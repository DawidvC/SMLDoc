functor MLLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : ML_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct
(* ml.grm
 *
 * Copyright 1989,1992 by AT&T Bell Laboratories
 *)

open Ast AstUtil FormatTemplate

fun markexp (e, _, _) = e

fun markdec(d as MarkDec _, _,_) = d
  | markdec(d,left,right) = MarkDec(d,(left,right))

fun marktypepat (p as MarkTyPat _, _, _) = p
  | marktypepat (p, left, right) = MarkTyPat(p, (left, right))

fun marktemplate (t as MarkTemplate _, _, _) = t
  | marktemplate (t, left, right) = MarkTemplate(t, (left, right))

fun markinstance (i as MarkInstance _, _, _) = i
  | markinstance (i, left, right) = MarkInstance(i, (left, right))

fun qidToString [id] = id
  | qidToString (head::tail) = head ^ "." ^ (qidToString tail)

  
end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\000\000\002\000\000\000\000\000\
\\001\000\001\000\014\004\002\000\014\004\011\000\074\004\017\000\074\004\
\\023\000\074\004\028\000\040\000\029\000\039\000\035\000\036\000\
\\036\000\035\000\039\000\033\000\040\000\032\000\043\000\030\000\
\\044\000\029\000\049\000\027\000\051\000\026\000\053\000\074\004\
\\054\000\025\000\084\000\018\000\090\000\014\000\000\000\
\\001\000\001\000\061\004\002\000\061\004\003\000\052\004\011\000\061\004\
\\012\000\061\004\013\000\061\004\015\000\061\004\017\000\061\004\
\\019\000\061\004\020\000\061\004\023\000\061\004\024\000\061\004\
\\028\000\061\004\029\000\061\004\030\000\061\004\033\000\061\004\
\\035\000\061\004\036\000\061\004\039\000\061\004\040\000\061\004\
\\041\000\061\004\043\000\061\004\044\000\061\004\049\000\061\004\
\\051\000\061\004\052\000\061\004\053\000\061\004\054\000\061\004\
\\072\000\178\001\073\000\061\004\075\000\061\004\079\000\061\004\
\\080\000\061\004\081\000\061\004\082\000\061\004\083\000\061\004\
\\084\000\061\004\090\000\061\004\000\000\
\\001\000\001\000\071\004\002\000\071\004\003\000\052\004\011\000\071\004\
\\012\000\071\004\013\000\052\004\015\000\071\004\017\000\071\004\
\\019\000\071\004\020\000\071\004\023\000\071\004\024\000\071\004\
\\028\000\071\004\029\000\071\004\030\000\071\004\033\000\071\004\
\\035\000\071\004\036\000\071\004\039\000\071\004\040\000\071\004\
\\041\000\071\004\043\000\071\004\044\000\071\004\049\000\071\004\
\\051\000\071\004\052\000\071\004\053\000\071\004\054\000\071\004\
\\072\000\178\001\073\000\071\004\075\000\071\004\079\000\071\004\
\\080\000\071\004\081\000\071\004\082\000\071\004\083\000\071\004\
\\084\000\071\004\090\000\071\004\000\000\
\\001\000\001\000\073\004\002\000\073\004\011\000\073\004\012\000\073\004\
\\013\000\066\004\015\000\073\004\017\000\073\004\019\000\073\004\
\\020\000\073\004\023\000\073\004\024\000\073\004\028\000\073\004\
\\029\000\073\004\030\000\073\004\033\000\073\004\035\000\073\004\
\\036\000\073\004\039\000\073\004\040\000\073\004\041\000\073\004\
\\043\000\073\004\044\000\073\004\049\000\073\004\051\000\073\004\
\\052\000\073\004\053\000\073\004\054\000\073\004\073\000\073\004\
\\075\000\073\004\079\000\073\004\080\000\073\004\081\000\073\004\
\\082\000\073\004\083\000\073\004\084\000\073\004\090\000\073\004\000\000\
\\001\000\002\000\138\000\011\000\074\004\017\000\074\004\020\000\012\004\
\\023\000\074\004\028\000\040\000\029\000\039\000\033\000\012\004\
\\035\000\036\000\036\000\035\000\039\000\033\000\040\000\032\000\
\\043\000\030\000\044\000\029\000\049\000\027\000\051\000\026\000\
\\053\000\074\004\054\000\025\000\084\000\018\000\090\000\014\000\000\000\
\\001\000\002\000\138\000\011\000\074\004\017\000\074\004\020\000\012\004\
\\023\000\074\004\028\000\040\000\029\000\039\000\035\000\036\000\
\\036\000\035\000\039\000\033\000\040\000\032\000\043\000\030\000\
\\044\000\029\000\049\000\027\000\051\000\026\000\053\000\074\004\
\\054\000\025\000\084\000\018\000\090\000\014\000\000\000\
\\001\000\002\000\138\000\011\000\074\004\017\000\074\004\023\000\074\004\
\\028\000\040\000\029\000\039\000\033\000\012\004\035\000\036\000\
\\036\000\035\000\039\000\033\000\040\000\032\000\043\000\030\000\
\\044\000\029\000\049\000\027\000\051\000\026\000\053\000\074\004\
\\054\000\025\000\084\000\018\000\090\000\014\000\000\000\
\\001\000\002\000\142\000\011\000\074\004\017\000\074\004\020\000\195\003\
\\023\000\074\004\028\000\040\000\033\000\195\003\035\000\036\000\
\\036\000\035\000\039\000\141\000\040\000\032\000\043\000\030\000\
\\044\000\029\000\053\000\074\004\054\000\025\000\090\000\014\000\000\000\
\\001\000\002\000\142\000\011\000\074\004\017\000\074\004\020\000\195\003\
\\023\000\074\004\028\000\040\000\035\000\036\000\036\000\035\000\
\\039\000\141\000\040\000\032\000\043\000\030\000\044\000\029\000\
\\053\000\074\004\054\000\025\000\090\000\014\000\000\000\
\\001\000\002\000\142\000\011\000\074\004\017\000\074\004\023\000\074\004\
\\028\000\040\000\033\000\195\003\035\000\036\000\036\000\035\000\
\\039\000\141\000\040\000\032\000\043\000\030\000\044\000\029\000\
\\053\000\074\004\054\000\025\000\090\000\014\000\000\000\
\\001\000\002\000\078\002\003\000\134\000\011\000\074\004\017\000\074\004\
\\021\000\042\000\023\000\074\004\028\000\040\000\029\000\077\002\
\\035\000\036\000\036\000\035\000\038\000\236\001\039\000\076\002\
\\040\000\032\000\043\000\030\000\044\000\029\000\050\000\235\001\
\\051\000\075\002\053\000\074\004\054\000\025\000\072\000\022\000\
\\081\000\009\004\090\000\014\000\000\000\
\\001\000\002\000\078\002\011\000\074\004\017\000\074\004\020\000\009\004\
\\023\000\074\004\028\000\040\000\029\000\077\002\033\000\009\004\
\\035\000\036\000\036\000\035\000\039\000\076\002\040\000\032\000\
\\043\000\030\000\044\000\029\000\051\000\075\002\053\000\074\004\
\\054\000\025\000\081\000\009\004\090\000\014\000\000\000\
\\001\000\002\000\078\002\011\000\074\004\017\000\074\004\020\000\009\004\
\\023\000\074\004\028\000\040\000\029\000\077\002\035\000\036\000\
\\036\000\035\000\039\000\076\002\040\000\032\000\043\000\030\000\
\\044\000\029\000\051\000\075\002\053\000\074\004\054\000\025\000\
\\090\000\014\000\000\000\
\\001\000\002\000\078\002\011\000\074\004\017\000\074\004\023\000\074\004\
\\028\000\040\000\029\000\077\002\033\000\009\004\035\000\036\000\
\\036\000\035\000\039\000\076\002\040\000\032\000\043\000\030\000\
\\044\000\029\000\051\000\075\002\053\000\074\004\054\000\025\000\
\\090\000\014\000\000\000\
\\001\000\003\000\055\004\013\000\065\004\000\000\
\\001\000\003\000\050\000\005\000\049\000\006\000\048\000\007\000\047\000\
\\008\000\046\000\009\000\045\000\010\000\044\000\016\000\043\000\
\\021\000\042\000\027\000\041\000\031\000\038\000\032\000\037\000\
\\038\000\034\000\042\000\031\000\045\000\028\000\056\000\024\000\
\\067\000\023\000\072\000\022\000\076\000\021\000\077\000\020\000\
\\078\000\019\000\080\000\082\000\085\000\017\000\086\000\016\000\
\\089\000\015\000\000\000\
\\001\000\003\000\050\000\005\000\049\000\006\000\048\000\007\000\047\000\
\\008\000\046\000\009\000\045\000\010\000\044\000\016\000\043\000\
\\021\000\042\000\027\000\041\000\031\000\038\000\032\000\037\000\
\\038\000\034\000\042\000\031\000\045\000\028\000\056\000\024\000\
\\067\000\023\000\072\000\022\000\076\000\021\000\077\000\020\000\
\\078\000\019\000\080\000\090\000\085\000\017\000\086\000\016\000\
\\089\000\015\000\000\000\
\\001\000\003\000\050\000\005\000\049\000\006\000\048\000\007\000\047\000\
\\008\000\046\000\009\000\045\000\010\000\044\000\016\000\043\000\
\\021\000\042\000\027\000\041\000\031\000\038\000\032\000\037\000\
\\038\000\034\000\042\000\031\000\045\000\028\000\056\000\024\000\
\\067\000\023\000\072\000\022\000\076\000\021\000\077\000\020\000\
\\078\000\019\000\081\000\088\000\085\000\017\000\086\000\016\000\
\\089\000\015\000\000\000\
\\001\000\003\000\050\000\005\000\049\000\006\000\048\000\007\000\047\000\
\\008\000\046\000\009\000\045\000\010\000\044\000\016\000\043\000\
\\021\000\042\000\027\000\041\000\031\000\038\000\032\000\037\000\
\\038\000\034\000\042\000\031\000\045\000\028\000\056\000\024\000\
\\067\000\023\000\072\000\022\000\076\000\021\000\077\000\020\000\
\\078\000\019\000\085\000\017\000\086\000\016\000\089\000\015\000\000\000\
\\001\000\003\000\050\000\005\000\049\000\006\000\048\000\007\000\047\000\
\\008\000\046\000\009\000\045\000\010\000\044\000\021\000\042\000\
\\031\000\038\000\038\000\034\000\042\000\031\000\069\000\217\001\
\\072\000\022\000\076\000\021\000\077\000\020\000\078\000\019\000\
\\085\000\017\000\086\000\016\000\089\000\015\000\000\000\
\\001\000\003\000\050\000\005\000\049\000\006\000\048\000\007\000\047\000\
\\008\000\046\000\009\000\045\000\010\000\044\000\021\000\042\000\
\\031\000\038\000\038\000\034\000\042\000\031\000\072\000\022\000\
\\076\000\021\000\077\000\020\000\078\000\019\000\085\000\017\000\
\\086\000\016\000\089\000\015\000\000\000\
\\001\000\003\000\058\000\021\000\042\000\048\000\124\001\072\000\022\000\000\000\
\\001\000\003\000\058\000\021\000\042\000\072\000\022\000\000\000\
\\001\000\003\000\098\000\004\000\123\000\037\000\241\000\042\000\240\000\
\\072\000\096\000\078\000\239\000\000\000\
\\001\000\003\000\098\000\005\000\097\000\018\000\180\002\072\000\096\000\000\000\
\\001\000\003\000\098\000\005\000\097\000\018\000\180\002\072\000\096\000\
\\079\000\179\002\000\000\
\\001\000\003\000\098\000\005\000\097\000\072\000\096\000\000\000\
\\001\000\003\000\098\000\005\000\097\000\072\000\096\000\079\000\095\000\000\000\
\\001\000\003\000\098\000\005\000\097\000\072\000\096\000\079\000\051\001\000\000\
\\001\000\003\000\098\000\037\000\241\000\042\000\240\000\072\000\096\000\000\000\
\\001\000\003\000\098\000\042\000\117\001\072\000\096\000\000\000\
\\001\000\003\000\098\000\072\000\096\000\000\000\
\\001\000\003\000\124\000\004\000\123\000\005\000\049\000\006\000\048\000\
\\007\000\122\000\009\000\121\000\010\000\120\000\037\000\119\000\
\\042\000\118\000\046\000\117\000\057\000\116\000\072\000\096\000\
\\076\000\115\000\077\000\114\000\078\000\113\000\085\000\112\000\000\000\
\\001\000\003\000\124\000\004\000\123\000\005\000\049\000\006\000\048\000\
\\007\000\122\000\009\000\121\000\010\000\120\000\037\000\154\000\
\\042\000\118\000\057\000\116\000\072\000\096\000\076\000\115\000\
\\077\000\114\000\078\000\113\000\085\000\112\000\000\000\
\\001\000\003\000\124\000\004\000\227\000\005\000\049\000\006\000\048\000\
\\007\000\122\000\009\000\121\000\010\000\120\000\042\000\118\000\
\\057\000\116\000\072\000\096\000\076\000\115\000\077\000\114\000\
\\078\000\158\000\081\000\226\000\085\000\112\000\000\000\
\\001\000\003\000\124\000\005\000\049\000\006\000\048\000\007\000\122\000\
\\009\000\121\000\010\000\120\000\037\000\119\000\042\000\118\000\
\\057\000\116\000\072\000\096\000\076\000\115\000\077\000\114\000\
\\078\000\158\000\085\000\112\000\000\000\
\\001\000\003\000\124\000\005\000\049\000\006\000\048\000\007\000\122\000\
\\009\000\121\000\010\000\120\000\037\000\154\000\042\000\118\000\
\\057\000\116\000\072\000\096\000\076\000\115\000\077\000\114\000\
\\078\000\158\000\085\000\112\000\000\000\
\\001\000\003\000\124\000\005\000\049\000\006\000\048\000\007\000\122\000\
\\009\000\121\000\010\000\120\000\042\000\118\000\057\000\116\000\
\\072\000\096\000\076\000\115\000\077\000\114\000\078\000\158\000\
\\080\000\223\000\085\000\112\000\000\000\
\\001\000\003\000\124\000\005\000\049\000\006\000\048\000\007\000\122\000\
\\009\000\121\000\010\000\120\000\042\000\118\000\057\000\116\000\
\\072\000\096\000\076\000\115\000\077\000\114\000\078\000\158\000\
\\080\000\229\000\085\000\112\000\000\000\
\\001\000\003\000\124\000\005\000\049\000\006\000\048\000\007\000\122\000\
\\009\000\121\000\010\000\120\000\042\000\118\000\057\000\116\000\
\\072\000\096\000\076\000\115\000\077\000\114\000\078\000\158\000\
\\081\000\226\000\085\000\112\000\000\000\
\\001\000\003\000\124\000\005\000\049\000\006\000\048\000\007\000\122\000\
\\009\000\121\000\010\000\120\000\042\000\118\000\057\000\116\000\
\\072\000\096\000\076\000\115\000\077\000\114\000\078\000\158\000\
\\085\000\112\000\000\000\
\\001\000\003\000\134\000\021\000\042\000\038\000\236\001\050\000\235\001\
\\072\000\022\000\000\000\
\\001\000\003\000\134\000\021\000\042\000\038\000\247\001\072\000\022\000\000\000\
\\001\000\003\000\134\000\021\000\042\000\053\000\202\001\072\000\022\000\000\000\
\\001\000\003\000\134\000\021\000\042\000\053\000\082\002\072\000\022\000\000\000\
\\001\000\003\000\134\000\021\000\042\000\072\000\022\000\000\000\
\\001\000\003\000\183\000\000\000\
\\001\000\003\000\183\000\004\000\182\000\068\000\181\000\076\000\180\000\
\\078\000\179\000\000\000\
\\001\000\003\000\183\000\004\000\182\000\076\000\180\000\078\000\179\000\000\000\
\\001\000\003\000\183\000\004\000\182\000\076\000\180\000\078\000\179\000\
\\090\000\166\002\000\000\
\\001\000\003\000\196\000\000\000\
\\001\000\003\000\197\000\000\000\
\\001\000\003\000\235\000\005\000\097\000\018\000\234\000\072\000\096\000\000\000\
\\001\000\003\000\235\000\005\000\097\000\018\000\234\000\072\000\096\000\
\\079\000\233\000\000\000\
\\001\000\003\000\067\001\000\000\
\\001\000\003\000\147\001\000\000\
\\001\000\003\000\185\001\000\000\
\\001\000\003\000\185\001\079\000\184\001\000\000\
\\001\000\003\000\012\002\000\000\
\\001\000\003\000\012\002\081\000\225\002\000\000\
\\001\000\003\000\040\002\000\000\
\\001\000\003\000\107\002\057\000\106\002\076\000\105\002\078\000\104\002\000\000\
\\001\000\003\000\107\002\057\000\106\002\078\000\243\002\000\000\
\\001\000\003\000\170\002\075\000\217\002\000\000\
\\001\000\003\000\184\002\000\000\
\\001\000\003\000\222\002\000\000\
\\001\000\003\000\239\002\000\000\
\\001\000\003\000\240\002\000\000\
\\001\000\003\000\005\003\000\000\
\\001\000\004\000\227\000\000\000\
\\001\000\009\000\192\000\000\000\
\\001\000\009\000\193\000\000\000\
\\001\000\011\000\054\000\017\000\053\000\023\000\052\000\053\000\051\000\000\000\
\\001\000\012\000\024\001\058\000\016\002\000\000\
\\001\000\012\000\040\001\058\000\042\001\059\000\041\001\000\000\
\\001\000\013\000\043\001\014\000\239\001\000\000\
\\001\000\013\000\043\001\075\000\170\001\081\000\169\001\000\000\
\\001\000\013\000\043\001\081\000\196\002\000\000\
\\001\000\013\000\177\001\000\000\
\\001\000\013\000\023\002\000\000\
\\001\000\014\000\220\000\015\000\104\001\073\000\218\000\075\000\103\001\
\\081\000\102\001\000\000\
\\001\000\014\000\220\000\021\000\219\000\073\000\218\000\000\000\
\\001\000\014\000\220\000\021\000\118\001\073\000\218\000\000\000\
\\001\000\014\000\220\000\026\000\017\001\073\000\218\000\000\000\
\\001\000\014\000\111\001\021\000\014\003\073\000\110\001\075\000\118\003\
\\079\000\118\003\000\000\
\\001\000\019\000\243\001\030\000\063\000\073\000\062\000\082\000\061\000\
\\083\000\060\000\000\000\
\\001\000\020\000\240\001\000\000\
\\001\000\020\000\241\001\000\000\
\\001\000\020\000\017\002\000\000\
\\001\000\020\000\083\002\000\000\
\\001\000\020\000\086\002\000\000\
\\001\000\020\000\151\002\000\000\
\\001\000\020\000\189\002\000\000\
\\001\000\020\000\234\002\073\000\069\002\074\000\068\002\000\000\
\\001\000\020\000\236\002\000\000\
\\001\000\020\000\251\002\000\000\
\\001\000\021\000\212\000\000\000\
\\001\000\021\000\250\000\000\000\
\\001\000\021\000\072\001\000\000\
\\001\000\021\000\109\001\000\000\
\\001\000\021\000\121\001\000\000\
\\001\000\021\000\136\001\000\000\
\\001\000\021\000\140\001\000\000\
\\001\000\021\000\228\001\000\000\
\\001\000\021\000\244\001\000\000\
\\001\000\021\000\250\001\000\000\
\\001\000\021\000\014\002\000\000\
\\001\000\021\000\044\002\000\000\
\\001\000\021\000\065\002\000\000\
\\001\000\021\000\066\002\000\000\
\\001\000\021\000\116\002\000\000\
\\001\000\021\000\146\002\000\000\
\\001\000\021\000\159\002\000\000\
\\001\000\021\000\235\002\000\000\
\\001\000\024\000\214\000\030\000\063\000\073\000\062\000\082\000\061\000\
\\083\000\060\000\000\000\
\\001\000\030\000\063\000\041\000\019\001\073\000\062\000\082\000\061\000\
\\083\000\060\000\000\000\
\\001\000\030\000\063\000\052\000\005\001\073\000\062\000\082\000\061\000\
\\083\000\060\000\000\000\
\\001\000\033\000\254\000\000\000\
\\001\000\033\000\001\001\000\000\
\\001\000\033\000\132\001\000\000\
\\001\000\033\000\157\002\000\000\
\\001\000\033\000\163\002\000\000\
\\001\000\033\000\200\002\000\000\
\\001\000\073\000\251\000\000\000\
\\001\000\073\000\173\001\000\000\
\\001\000\073\000\211\001\000\000\
\\001\000\073\000\033\002\000\000\
\\001\000\073\000\042\002\000\000\
\\001\000\073\000\051\002\078\000\204\000\000\000\
\\001\000\073\000\058\002\000\000\
\\001\000\073\000\069\002\074\000\068\002\081\000\199\002\000\000\
\\001\000\073\000\123\002\000\000\
\\001\000\073\000\133\002\000\000\
\\001\000\073\000\138\002\000\000\
\\001\000\075\000\030\002\081\000\029\002\000\000\
\\001\000\076\000\098\002\000\000\
\\001\000\078\000\194\000\000\000\
\\001\000\078\000\195\000\000\000\
\\001\000\078\000\204\000\000\000\
\\001\000\078\000\093\001\000\000\
\\001\000\078\000\059\002\000\000\
\\001\000\078\000\096\002\000\000\
\\001\000\079\000\210\000\000\000\
\\001\000\079\000\107\001\000\000\
\\001\000\079\000\171\001\000\000\
\\001\000\079\000\032\002\000\000\
\\001\000\079\000\182\002\000\000\
\\001\000\079\000\210\002\000\000\
\\001\000\079\000\220\002\000\000\
\\001\000\080\000\200\000\000\000\
\\001\000\080\000\209\000\000\000\
\\001\000\080\000\099\001\000\000\
\\001\000\080\000\106\001\000\000\
\\001\000\080\000\169\002\000\000\
\\001\000\081\000\205\000\000\000\
\\001\000\081\000\208\000\000\000\
\\001\000\081\000\101\001\000\000\
\\001\000\081\000\168\001\000\000\
\\001\000\081\000\187\001\000\000\
\\001\000\081\000\189\001\000\000\
\\001\000\081\000\191\001\000\000\
\\001\000\081\000\251\001\000\000\
\\001\000\081\000\031\002\000\000\
\\001\000\081\000\056\002\000\000\
\\001\000\081\000\060\002\000\000\
\\001\000\081\000\061\002\000\000\
\\001\000\081\000\172\002\000\000\
\\001\000\081\000\198\002\000\000\
\\001\000\081\000\209\002\000\000\
\\001\000\081\000\216\002\000\000\
\\001\000\081\000\218\002\000\000\
\\001\000\081\000\246\002\000\000\
\\001\000\081\000\007\003\000\000\
\\001\000\081\000\009\003\000\000\
\\001\000\087\000\079\000\088\000\078\000\000\000\
\\001\000\087\000\198\000\000\000\
\\001\000\091\000\191\000\000\000\
\\001\000\091\000\028\001\095\000\073\000\000\000\
\\001\000\091\000\151\001\000\000\
\\001\000\091\000\157\001\000\000\
\\001\000\091\000\095\002\000\000\
\\001\000\091\000\253\002\000\000\
\\001\000\092\000\237\002\098\000\156\001\000\000\
\\001\000\098\000\156\001\000\000\
\\012\003\000\000\
\\013\003\000\000\
\\014\003\000\000\
\\014\003\025\000\244\000\000\000\
\\015\003\000\000\
\\016\003\000\000\
\\016\003\025\000\160\000\000\000\
\\016\003\025\000\253\000\000\000\
\\017\003\000\000\
\\018\003\000\000\
\\019\003\000\000\
\\020\003\042\000\030\001\000\000\
\\020\003\042\000\030\001\090\000\166\002\000\000\
\\021\003\000\000\
\\022\003\000\000\
\\023\003\000\000\
\\024\003\000\000\
\\025\003\000\000\
\\026\003\025\000\064\001\000\000\
\\027\003\013\000\043\001\000\000\
\\028\003\000\000\
\\029\003\075\000\172\001\000\000\
\\030\003\000\000\
\\031\003\000\000\
\\032\003\000\000\
\\033\003\000\000\
\\034\003\000\000\
\\035\003\000\000\
\\036\003\000\000\
\\037\003\000\000\
\\038\003\003\000\183\000\072\000\045\001\000\000\
\\039\003\000\000\
\\040\003\013\000\043\001\000\000\
\\041\003\003\000\183\000\072\000\045\001\000\000\
\\042\003\013\000\043\001\075\000\170\001\000\000\
\\043\003\000\000\
\\044\003\015\000\018\001\000\000\
\\045\003\000\000\
\\046\003\030\000\063\000\073\000\062\000\082\000\061\000\083\000\060\000\000\000\
\\047\003\030\000\063\000\073\000\062\000\082\000\061\000\083\000\060\000\000\000\
\\048\003\000\000\
\\049\003\075\000\211\000\000\000\
\\050\003\002\000\207\000\030\000\063\000\073\000\062\000\075\000\206\000\
\\082\000\061\000\083\000\060\000\000\000\
\\050\003\002\000\207\000\030\000\063\000\073\000\062\000\082\000\061\000\
\\083\000\060\000\000\000\
\\051\003\000\000\
\\052\003\000\000\
\\053\003\073\000\062\000\082\000\061\000\083\000\060\000\000\000\
\\054\003\073\000\062\000\083\000\060\000\000\000\
\\055\003\013\000\043\001\000\000\
\\056\003\000\000\
\\057\003\000\000\
\\058\003\000\000\
\\059\003\030\000\063\000\073\000\062\000\082\000\061\000\083\000\060\000\000\000\
\\060\003\030\000\063\000\073\000\062\000\082\000\061\000\083\000\060\000\000\000\
\\061\003\030\000\063\000\073\000\062\000\082\000\061\000\083\000\060\000\000\000\
\\062\003\000\000\
\\063\003\000\000\
\\064\003\003\000\050\000\005\000\049\000\006\000\048\000\007\000\047\000\
\\008\000\046\000\009\000\045\000\010\000\044\000\021\000\042\000\
\\031\000\038\000\038\000\034\000\042\000\031\000\072\000\022\000\
\\076\000\021\000\077\000\020\000\078\000\019\000\085\000\017\000\
\\086\000\016\000\089\000\015\000\000\000\
\\065\003\000\000\
\\066\003\000\000\
\\067\003\000\000\
\\068\003\000\000\
\\069\003\000\000\
\\070\003\000\000\
\\071\003\000\000\
\\072\003\000\000\
\\073\003\000\000\
\\074\003\000\000\
\\075\003\000\000\
\\076\003\000\000\
\\077\003\000\000\
\\078\003\000\000\
\\079\003\000\000\
\\080\003\000\000\
\\081\003\000\000\
\\082\003\000\000\
\\083\003\000\000\
\\084\003\000\000\
\\085\003\000\000\
\\086\003\000\000\
\\087\003\000\000\
\\088\003\000\000\
\\089\003\088\000\078\000\000\000\
\\090\003\000\000\
\\091\003\000\000\
\\092\003\030\000\063\000\073\000\062\000\075\000\206\000\082\000\061\000\
\\083\000\060\000\000\000\
\\093\003\030\000\063\000\073\000\062\000\075\000\201\000\082\000\061\000\
\\083\000\060\000\000\000\
\\094\003\000\000\
\\095\003\014\000\220\000\073\000\218\000\000\000\
\\096\003\013\000\043\001\000\000\
\\097\003\000\000\
\\098\003\000\000\
\\099\003\000\000\
\\100\003\000\000\
\\101\003\000\000\
\\102\003\000\000\
\\103\003\000\000\
\\104\003\000\000\
\\105\003\000\000\
\\106\003\000\000\
\\107\003\000\000\
\\108\003\000\000\
\\109\003\000\000\
\\110\003\000\000\
\\111\003\000\000\
\\112\003\000\000\
\\113\003\000\000\
\\114\003\000\000\
\\115\003\000\000\
\\116\003\000\000\
\\117\003\014\000\220\000\073\000\218\000\000\000\
\\119\003\014\000\220\000\073\000\218\000\000\000\
\\120\003\013\000\043\001\014\000\063\002\000\000\
\\121\003\014\000\220\000\073\000\218\000\000\000\
\\122\003\000\000\
\\123\003\075\000\108\001\000\000\
\\124\003\000\000\
\\125\003\014\000\220\000\073\000\218\000\075\000\100\001\000\000\
\\126\003\000\000\
\\127\003\014\000\220\000\015\000\062\002\073\000\218\000\000\000\
\\128\003\000\000\
\\129\003\012\000\216\000\000\000\
\\130\003\030\000\063\000\073\000\062\000\082\000\061\000\083\000\060\000\000\000\
\\131\003\030\000\063\000\073\000\062\000\082\000\061\000\083\000\060\000\000\000\
\\132\003\073\000\014\001\000\000\
\\133\003\013\000\043\001\000\000\
\\134\003\030\000\063\000\073\000\062\000\082\000\061\000\083\000\060\000\000\000\
\\135\003\030\000\063\000\073\000\062\000\082\000\061\000\083\000\060\000\000\000\
\\136\003\012\000\113\001\000\000\
\\137\003\030\000\063\000\073\000\062\000\082\000\061\000\083\000\060\000\000\000\
\\138\003\030\000\063\000\073\000\062\000\082\000\061\000\083\000\060\000\000\000\
\\139\003\015\000\012\001\000\000\
\\140\003\000\000\
\\141\003\012\000\015\001\000\000\
\\142\003\012\000\143\001\000\000\
\\143\003\000\000\
\\144\003\000\000\
\\145\003\003\000\124\000\005\000\049\000\006\000\048\000\007\000\122\000\
\\009\000\121\000\010\000\120\000\042\000\118\000\057\000\116\000\
\\072\000\096\000\076\000\115\000\077\000\114\000\078\000\158\000\
\\085\000\112\000\000\000\
\\146\003\000\000\
\\147\003\030\000\063\000\073\000\062\000\082\000\061\000\083\000\060\000\000\000\
\\148\003\013\000\043\001\000\000\
\\149\003\012\000\024\001\000\000\
\\150\003\000\000\
\\151\003\000\000\
\\152\003\004\000\023\001\037\000\038\001\078\000\022\001\000\000\
\\152\003\004\000\023\001\078\000\022\001\000\000\
\\153\003\000\000\
\\154\003\000\000\
\\155\003\075\000\105\001\000\000\
\\156\003\000\000\
\\157\003\012\000\040\001\000\000\
\\158\003\000\000\
\\159\003\000\000\
\\160\003\000\000\
\\161\003\000\000\
\\162\003\015\000\186\002\000\000\
\\163\003\000\000\
\\164\003\041\000\249\002\000\000\
\\165\003\013\000\043\001\000\000\
\\166\003\012\000\032\001\000\000\
\\167\003\000\000\
\\168\003\021\000\254\001\041\000\253\001\000\000\
\\169\003\013\000\043\001\000\000\
\\170\003\000\000\
\\171\003\003\000\134\000\021\000\042\000\072\000\022\000\000\000\
\\172\003\000\000\
\\173\003\005\000\049\000\006\000\048\000\000\000\
\\174\003\000\000\
\\175\003\005\000\049\000\006\000\048\000\000\000\
\\176\003\000\000\
\\177\003\000\000\
\\178\003\012\000\216\000\000\000\
\\179\003\012\000\216\000\000\000\
\\180\003\012\000\113\001\000\000\
\\181\003\012\000\113\001\000\000\
\\182\003\000\000\
\\183\003\000\000\
\\184\003\012\000\024\001\000\000\
\\185\003\012\000\040\001\059\000\039\001\000\000\
\\186\003\012\000\024\001\000\000\
\\187\003\000\000\
\\188\003\000\000\
\\189\003\000\000\
\\190\003\000\000\
\\191\003\000\000\
\\192\003\000\000\
\\193\003\012\000\161\002\030\000\063\000\073\000\062\000\082\000\061\000\
\\083\000\060\000\000\000\
\\194\003\000\000\
\\196\003\000\000\
\\197\003\000\000\
\\198\003\000\000\
\\199\003\003\000\058\000\021\000\042\000\072\000\022\000\000\000\
\\200\003\000\000\
\\201\003\002\000\086\001\003\000\085\001\017\000\084\001\022\000\083\001\
\\023\000\082\001\029\000\081\001\034\000\080\001\047\000\079\001\
\\051\000\078\001\053\000\077\001\054\000\076\001\000\000\
\\201\003\002\000\086\001\017\000\084\001\022\000\083\001\023\000\082\001\
\\029\000\081\001\034\000\080\001\047\000\079\001\051\000\078\001\
\\053\000\077\001\054\000\076\001\000\000\
\\202\003\000\000\
\\203\003\000\000\
\\204\003\012\000\041\002\000\000\
\\205\003\012\000\048\002\000\000\
\\206\003\012\000\040\001\059\000\054\002\000\000\
\\207\003\012\000\024\001\000\000\
\\208\003\012\000\039\002\000\000\
\\209\003\012\000\039\002\000\000\
\\210\003\012\000\037\002\000\000\
\\211\003\012\000\052\002\000\000\
\\212\003\012\000\043\002\000\000\
\\213\003\055\000\237\001\000\000\
\\214\003\000\000\
\\215\003\003\000\058\000\021\000\042\000\072\000\022\000\000\000\
\\216\003\000\000\
\\217\003\012\000\041\002\000\000\
\\218\003\021\000\193\002\055\000\237\001\000\000\
\\219\003\000\000\
\\220\003\012\000\048\002\000\000\
\\221\003\000\000\
\\222\003\012\000\039\002\000\000\
\\223\003\021\000\125\002\000\000\
\\224\003\013\000\043\001\000\000\
\\225\003\012\000\037\002\000\000\
\\226\003\013\000\043\001\000\000\
\\227\003\012\000\052\002\000\000\
\\228\003\041\000\053\002\000\000\
\\229\003\013\000\043\001\000\000\
\\230\003\012\000\043\002\000\000\
\\231\003\000\000\
\\232\003\000\000\
\\233\003\021\000\044\002\000\000\
\\234\003\000\000\
\\235\003\012\000\158\002\000\000\
\\236\003\013\000\043\001\000\000\
\\237\003\000\000\
\\238\003\000\000\
\\238\003\003\000\058\000\021\000\042\000\072\000\022\000\000\000\
\\239\003\000\000\
\\240\003\012\000\158\002\000\000\
\\241\003\073\000\248\000\074\000\247\000\000\000\
\\242\003\055\000\237\001\000\000\
\\243\003\055\000\237\001\000\000\
\\244\003\073\000\010\001\074\000\009\001\078\000\204\000\000\000\
\\245\003\000\000\
\\246\003\000\000\
\\247\003\012\000\249\000\000\000\
\\248\003\055\000\237\001\000\000\
\\249\003\012\000\202\000\000\000\
\\250\003\055\000\237\001\000\000\
\\251\003\000\000\
\\252\003\055\000\237\001\000\000\
\\253\003\078\000\071\002\000\000\
\\254\003\000\000\
\\255\003\000\000\
\\000\004\000\000\
\\001\004\055\000\237\001\000\000\
\\002\004\055\000\237\001\000\000\
\\003\004\000\000\
\\004\004\000\000\
\\005\004\078\000\071\002\000\000\
\\006\004\078\000\071\002\000\000\
\\007\004\000\000\
\\008\004\000\000\
\\010\004\000\000\
\\011\004\000\000\
\\013\004\000\000\
\\015\004\012\000\245\000\000\000\
\\016\004\012\000\006\001\000\000\
\\017\004\000\000\
\\018\004\000\000\
\\019\004\012\000\245\000\000\000\
\\020\004\012\000\249\000\000\000\
\\021\004\012\000\202\000\000\000\
\\022\004\012\000\006\001\000\000\
\\023\004\000\000\
\\024\004\000\000\
\\025\004\073\000\069\002\074\000\068\002\000\000\
\\026\004\012\000\245\000\000\000\
\\027\004\055\000\237\001\000\000\
\\028\004\000\000\
\\029\004\078\000\204\000\000\000\
\\030\004\000\000\
\\031\004\073\000\069\002\074\000\068\002\000\000\
\\032\004\000\000\
\\033\004\012\000\006\001\000\000\
\\034\004\078\000\071\002\000\000\
\\035\004\000\000\
\\036\004\000\000\
\\037\004\000\000\
\\038\004\030\000\063\000\073\000\062\000\082\000\061\000\083\000\060\000\000\000\
\\039\004\063\000\102\000\070\000\101\000\000\000\
\\040\004\000\000\
\\041\004\000\000\
\\042\004\072\000\230\002\000\000\
\\043\004\000\000\
\\044\004\075\000\057\002\000\000\
\\045\004\000\000\
\\046\004\003\000\050\000\005\000\049\000\006\000\048\000\007\000\047\000\
\\008\000\046\000\009\000\045\000\010\000\044\000\021\000\042\000\
\\031\000\038\000\038\000\034\000\042\000\031\000\069\000\217\001\
\\072\000\022\000\076\000\021\000\077\000\020\000\078\000\019\000\
\\085\000\017\000\086\000\016\000\089\000\015\000\000\000\
\\047\004\000\000\
\\048\004\075\000\190\002\000\000\
\\049\004\000\000\
\\050\004\075\000\030\002\000\000\
\\051\004\000\000\
\\052\004\072\000\178\001\000\000\
\\053\004\000\000\
\\054\004\004\000\063\001\063\000\102\000\070\000\101\000\076\000\062\001\
\\078\000\061\001\000\000\
\\054\004\004\000\063\001\063\000\102\000\070\000\101\000\076\000\062\001\
\\078\000\061\001\081\000\182\001\000\000\
\\054\004\004\000\063\001\076\000\062\001\078\000\061\001\000\000\
\\054\004\004\000\063\001\076\000\062\001\078\000\028\002\000\000\
\\055\004\000\000\
\\056\004\000\000\
\\057\004\000\000\
\\058\004\000\000\
\\059\004\000\000\
\\060\004\000\000\
\\062\004\000\000\
\\063\004\000\000\
\\064\004\000\000\
\\066\004\000\000\
\\067\004\000\000\
\\068\004\000\000\
\\069\004\000\000\
\\070\004\000\000\
\\072\004\000\000\
\\074\004\003\000\050\000\005\000\049\000\006\000\048\000\007\000\047\000\
\\008\000\046\000\009\000\045\000\010\000\044\000\016\000\043\000\
\\021\000\042\000\027\000\041\000\028\000\040\000\029\000\039\000\
\\031\000\038\000\032\000\037\000\035\000\036\000\036\000\035\000\
\\038\000\034\000\039\000\033\000\040\000\032\000\042\000\031\000\
\\043\000\030\000\044\000\029\000\045\000\028\000\049\000\027\000\
\\051\000\026\000\054\000\025\000\056\000\024\000\067\000\023\000\
\\072\000\022\000\076\000\021\000\077\000\020\000\078\000\019\000\
\\084\000\018\000\085\000\017\000\086\000\016\000\089\000\015\000\
\\090\000\014\000\000\000\
\\074\004\090\000\014\000\000\000\
\\075\004\000\000\
\\076\004\092\000\076\000\093\000\075\000\094\000\074\000\095\000\073\000\
\\096\000\072\000\097\000\071\000\000\000\
\\077\004\000\000\
\\078\004\000\000\
\\079\004\000\000\
\\080\004\000\000\
\\081\004\000\000\
\\082\004\000\000\
\\083\004\090\000\163\000\000\000\
\\084\004\000\000\
\\085\004\000\000\
\\086\004\095\000\073\000\000\000\
\\087\004\000\000\
\\088\004\000\000\
\\089\004\000\000\
\\090\004\000\000\
\\091\004\091\000\036\001\093\000\075\000\095\000\073\000\000\000\
\\091\004\091\000\208\002\093\000\075\000\000\000\
\\092\004\000\000\
\\093\004\000\000\
\\094\004\000\000\
\\095\004\075\000\188\001\000\000\
\\096\004\000\000\
\\097\004\000\000\
\\098\004\000\000\
\\099\004\000\000\
\\100\004\000\000\
\\100\004\017\000\115\002\000\000\
\\101\004\000\000\
\\102\004\000\000\
\\103\004\000\000\
\\104\004\090\000\168\000\000\000\
\\105\004\000\000\
\\106\004\000\000\
\\107\004\000\000\
\\108\004\000\000\
\\109\004\000\000\
\\110\004\099\000\001\002\000\000\
\\111\004\000\000\
\\112\004\000\000\
\\113\004\000\000\
\\114\004\072\000\171\002\000\000\
\\115\004\000\000\
\\116\004\072\000\171\002\000\000\
\\117\004\000\000\
\\118\004\000\000\
\\119\004\000\000\
\\120\004\003\000\170\002\000\000\
\\120\004\003\000\170\002\075\000\217\002\000\000\
\\121\004\073\000\254\002\000\000\
\\122\004\000\000\
\\123\004\073\000\212\002\000\000\
\\124\004\000\000\
\\125\004\073\000\181\002\000\000\
\\126\004\000\000\
\\127\004\000\000\
\\128\004\000\000\
\\129\004\003\000\170\002\075\000\217\002\000\000\
\\130\004\000\000\
\\131\004\075\000\219\002\000\000\
\\132\004\000\000\
\\133\004\073\000\221\002\000\000\
\\134\004\000\000\
\\135\004\000\000\
\\136\004\000\000\
\\137\004\003\000\012\002\009\000\011\002\076\000\010\002\078\000\009\002\
\\100\000\008\002\101\000\007\002\102\000\006\002\103\000\005\002\000\000\
\\137\004\003\000\012\002\009\000\011\002\076\000\010\002\100\000\008\002\
\\101\000\007\002\102\000\006\002\103\000\005\002\000\000\
\\138\004\000\000\
\\139\004\000\000\
\\140\004\000\000\
\\141\004\000\000\
\\142\004\000\000\
\\143\004\000\000\
\\144\004\078\000\183\002\000\000\
\\145\004\000\000\
\\146\004\000\000\
\\147\004\078\000\000\003\000\000\
\\148\004\078\000\248\002\000\000\
\\149\004\073\000\110\002\000\000\
\\150\004\000\000\
\\151\004\000\000\
\\152\004\075\000\247\002\000\000\
\\153\004\000\000\
\\154\004\075\000\008\003\000\000\
\"
val actionRowNumbers =
"\249\001\073\000\213\001\001\000\
\\200\001\023\000\008\001\242\000\
\\234\000\214\001\247\000\244\000\
\\252\001\007\001\175\000\016\000\
\\023\000\018\000\017\000\028\000\
\\193\000\215\001\019\000\033\000\
\\023\000\023\000\019\000\023\000\
\\046\000\023\000\099\001\007\000\
\\010\000\097\001\095\001\019\000\
\\027\000\023\000\034\000\041\000\
\\194\000\019\000\251\000\250\000\
\\249\000\248\000\186\000\185\000\
\\191\000\003\002\026\002\003\002\
\\003\002\190\001\113\001\120\001\
\\190\000\243\000\019\000\019\000\
\\048\000\041\000\252\001\252\001\
\\252\001\252\001\252\001\252\001\
\\177\000\071\000\072\000\137\000\
\\138\000\051\000\052\000\176\000\
\\021\000\009\001\150\000\015\001\
\\005\001\197\001\139\000\155\000\
\\227\000\156\000\255\000\151\000\
\\003\001\143\000\226\000\097\000\
\\200\000\254\000\189\000\201\000\
\\187\000\216\001\021\000\247\001\
\\246\001\115\000\036\000\019\001\
\\100\001\020\001\066\001\082\000\
\\028\001\022\001\038\000\035\000\
\\039\000\054\000\032\001\024\000\
\\023\000\041\000\031\001\030\001\
\\029\001\075\001\188\000\195\001\
\\164\001\196\001\098\000\239\000\
\\124\000\112\001\093\001\199\000\
\\192\000\245\000\118\000\005\000\
\\005\000\119\000\008\000\010\000\
\\008\000\098\001\096\001\117\000\
\\252\000\198\001\167\001\037\000\
\\060\001\053\001\104\001\062\001\
\\041\000\084\000\221\000\235\000\
\\040\000\116\000\046\000\074\001\
\\106\001\178\000\196\000\026\002\
\\088\001\111\001\011\002\073\001\
\\107\001\075\000\121\001\232\000\
\\231\000\233\000\216\000\218\000\
\\213\000\049\000\029\000\230\001\
\\207\000\203\000\230\000\002\002\
\\001\002\000\002\255\001\254\001\
\\253\001\250\001\019\002\018\002\
\\055\000\046\000\009\002\010\002\
\\010\001\011\001\004\001\019\000\
\\023\000\099\000\122\001\001\001\
\\019\000\019\000\000\001\002\001\
\\253\000\027\000\019\000\140\000\
\\019\000\101\001\036\000\067\001\
\\049\000\019\000\041\000\152\000\
\\046\001\035\001\157\000\081\000\
\\023\001\077\001\153\000\033\001\
\\144\000\044\001\100\000\037\001\
\\045\001\085\000\030\000\102\001\
\\053\001\070\000\032\000\031\000\
\\026\001\083\000\046\000\023\000\
\\101\000\022\000\022\000\023\000\
\\022\000\049\000\094\001\046\000\
\\006\000\188\001\189\001\019\000\
\\117\001\120\000\118\001\019\000\
\\023\000\164\001\102\000\023\000\
\\023\000\105\001\041\000\103\000\
\\049\000\037\000\063\001\019\000\
\\041\000\041\000\246\000\056\000\
\\070\000\071\001\003\002\008\002\
\\006\002\179\000\003\002\023\000\
\\195\000\028\002\026\002\184\000\
\\013\002\180\000\026\002\023\000\
\\074\001\003\002\003\002\003\002\
\\009\000\049\000\212\000\049\000\
\\158\000\077\000\145\000\206\000\
\\125\000\209\000\240\000\232\001\
\\248\001\079\000\004\000\241\001\
\\003\000\047\000\015\000\231\001\
\\058\000\236\001\047\000\251\001\
\\159\000\016\002\160\000\012\001\
\\016\001\172\001\022\000\161\000\
\\123\001\204\001\196\000\074\001\
\\023\000\044\000\022\000\023\000\
\\023\000\074\001\003\002\126\000\
\\123\001\013\001\014\001\228\000\
\\229\000\225\000\224\000\222\001\
\\237\000\050\001\018\001\052\001\
\\017\001\036\001\041\000\076\001\
\\021\001\041\000\041\000\070\000\
\\034\001\038\001\053\000\041\000\
\\049\000\041\000\103\001\030\000\
\\104\000\053\001\053\001\032\000\
\\019\000\027\001\202\001\042\000\
\\166\001\160\001\123\001\165\001\
\\170\001\171\001\076\000\198\000\
\\087\000\088\000\009\000\086\000\
\\209\001\105\000\043\000\169\001\
\\168\001\061\001\019\000\054\001\
\\064\001\037\000\223\000\222\000\
\\236\000\106\000\162\000\070\001\
\\007\002\003\002\005\002\090\001\
\\089\001\032\002\060\002\026\002\
\\029\002\107\000\023\000\108\001\
\\079\001\074\000\089\000\217\000\
\\214\000\215\000\047\000\211\000\
\\049\000\208\000\027\000\049\000\
\\080\000\243\001\228\001\230\001\
\\233\001\237\001\135\000\163\000\
\\242\001\146\000\239\001\127\000\
\\202\000\015\002\055\000\046\000\
\\173\001\205\001\124\001\132\001\
\\023\000\130\001\061\000\126\001\
\\128\000\154\001\134\001\108\000\
\\046\000\135\001\161\001\127\001\
\\129\000\133\001\150\001\131\001\
\\128\001\022\000\125\001\223\001\
\\164\000\220\001\130\000\141\000\
\\047\001\165\000\166\000\048\001\
\\078\001\043\001\039\001\041\001\
\\040\001\057\001\019\000\109\000\
\\110\000\053\001\051\001\201\001\
\\176\001\013\000\014\000\045\000\
\\090\000\019\000\199\001\006\001\
\\091\000\019\000\042\000\208\001\
\\210\001\014\000\068\001\065\001\
\\021\002\072\001\004\002\049\000\
\\046\000\032\002\181\000\142\000\
\\067\002\061\002\031\002\136\000\
\\066\002\061\002\063\002\062\000\
\\061\002\062\002\073\002\027\002\
\\022\002\111\000\009\000\109\001\
\\210\000\220\000\219\000\205\000\
\\204\000\230\001\244\001\240\001\
\\002\000\234\001\230\001\235\001\
\\230\001\229\001\238\001\230\001\
\\017\002\014\002\206\001\196\000\
\\132\000\074\001\145\001\023\000\
\\022\000\044\000\046\000\153\001\
\\136\001\137\001\023\000\133\000\
\\143\001\023\000\023\000\049\000\
\\003\002\203\001\134\000\020\000\
\\230\001\049\000\024\001\025\001\
\\041\000\041\000\055\001\019\000\
\\019\000\112\000\022\000\022\000\
\\178\001\011\000\092\000\012\000\
\\194\001\023\000\014\000\023\000\
\\012\000\121\000\163\001\113\000\
\\074\001\162\001\114\001\115\001\
\\008\000\238\000\207\001\211\001\
\\122\000\050\000\091\001\092\001\
\\033\002\020\002\062\000\058\002\
\\061\002\154\000\042\002\035\002\
\\036\002\167\000\062\000\026\000\
\\050\002\048\002\147\000\068\002\
\\065\000\197\000\084\001\082\001\
\\080\001\047\000\022\002\093\000\
\\245\001\226\001\227\001\224\001\
\\147\001\049\000\144\001\049\000\
\\139\001\140\001\152\001\156\001\
\\155\001\138\001\142\001\022\000\
\\174\001\149\001\151\001\129\001\
\\230\001\221\001\217\001\078\000\
\\049\001\042\001\056\001\058\001\
\\019\000\181\001\180\001\168\000\
\\131\000\177\001\186\001\191\001\
\\123\000\192\001\187\001\042\000\
\\045\000\046\000\046\000\019\000\
\\119\001\043\000\023\002\069\001\
\\012\002\169\000\148\000\061\002\
\\046\002\062\000\061\002\170\000\
\\043\002\171\000\054\002\149\000\
\\056\002\040\002\055\002\066\000\
\\065\002\060\000\074\002\023\000\
\\021\002\083\001\081\001\110\001\
\\057\000\148\001\146\001\046\000\
\\175\001\241\000\218\001\059\001\
\\185\001\184\001\013\000\094\000\
\\157\001\159\001\114\000\116\001\
\\095\000\183\000\024\002\061\002\
\\064\002\059\002\067\000\037\002\
\\038\002\030\002\068\000\063\000\
\\041\002\025\000\039\002\062\000\
\\049\002\172\000\076\002\072\002\
\\086\001\085\001\225\001\141\001\
\\021\000\182\001\183\001\096\000\
\\179\001\049\000\212\001\182\000\
\\034\002\047\002\044\002\051\002\
\\052\002\063\000\053\002\057\002\
\\071\002\059\000\061\002\049\000\
\\219\001\193\001\158\001\025\002\
\\069\000\064\000\061\002\075\002\
\\173\000\078\002\087\001\045\002\
\\174\000\070\002\061\002\069\002\
\\077\002\000\000"
val gotoT =
"\
\\001\000\011\000\003\000\010\000\019\000\009\000\020\000\008\000\
\\021\000\007\000\024\000\006\000\052\000\005\000\053\000\004\000\
\\078\000\003\000\080\000\002\000\086\000\009\003\102\000\001\000\000\000\
\\000\000\
\\000\000\
\\052\000\005\000\053\000\004\000\078\000\003\000\080\000\053\000\
\\102\000\001\000\000\000\
\\000\000\
\\001\000\055\000\056\000\054\000\000\000\
\\000\000\
\\001\000\011\000\003\000\010\000\020\000\057\000\021\000\007\000\
\\024\000\006\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\103\000\068\000\107\000\067\000\108\000\066\000\110\000\065\000\
\\111\000\064\000\113\000\063\000\114\000\062\000\000\000\
\\000\000\
\\025\000\075\000\000\000\
\\001\000\011\000\003\000\010\000\019\000\079\000\020\000\008\000\
\\021\000\007\000\022\000\078\000\024\000\006\000\000\000\
\\001\000\082\000\072\000\081\000\000\000\
\\001\000\011\000\003\000\010\000\018\000\085\000\019\000\084\000\
\\020\000\008\000\021\000\007\000\023\000\083\000\024\000\006\000\000\000\
\\001\000\011\000\003\000\010\000\019\000\079\000\020\000\008\000\
\\021\000\007\000\022\000\087\000\024\000\006\000\000\000\
\\002\000\092\000\006\000\091\000\016\000\090\000\017\000\089\000\000\000\
\\000\000\
\\087\000\098\000\100\000\097\000\000\000\
\\001\000\011\000\003\000\010\000\019\000\101\000\020\000\008\000\
\\021\000\007\000\024\000\006\000\000\000\
\\002\000\109\000\003\000\108\000\026\000\107\000\027\000\106\000\
\\028\000\105\000\034\000\104\000\039\000\103\000\043\000\102\000\000\000\
\\001\000\124\000\081\000\123\000\000\000\
\\001\000\126\000\071\000\125\000\000\000\
\\001\000\011\000\003\000\010\000\019\000\127\000\020\000\008\000\
\\021\000\007\000\024\000\006\000\000\000\
\\001\000\128\000\000\000\
\\001\000\131\000\005\000\130\000\051\000\129\000\000\000\
\\001\000\133\000\000\000\
\\000\000\
\\052\000\005\000\053\000\004\000\078\000\135\000\079\000\134\000\
\\102\000\001\000\000\000\
\\052\000\005\000\053\000\138\000\055\000\137\000\102\000\001\000\000\000\
\\003\000\141\000\000\000\
\\003\000\142\000\000\000\
\\001\000\011\000\003\000\010\000\019\000\143\000\020\000\008\000\
\\021\000\007\000\024\000\006\000\000\000\
\\002\000\092\000\006\000\144\000\000\000\
\\001\000\146\000\084\000\145\000\000\000\
\\002\000\109\000\003\000\108\000\027\000\106\000\028\000\105\000\
\\037\000\151\000\038\000\150\000\039\000\149\000\040\000\148\000\
\\043\000\147\000\000\000\
\\002\000\109\000\003\000\108\000\014\000\155\000\015\000\154\000\
\\026\000\153\000\027\000\106\000\028\000\105\000\039\000\103\000\000\000\
\\000\000\
\\001\000\011\000\003\000\010\000\019\000\157\000\020\000\008\000\
\\021\000\007\000\024\000\006\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\041\000\160\000\104\000\159\000\000\000\
\\049\000\165\000\050\000\164\000\115\000\163\000\117\000\162\000\000\000\
\\045\000\168\000\104\000\167\000\000\000\
\\045\000\169\000\104\000\167\000\000\000\
\\000\000\
\\000\000\
\\001\000\055\000\056\000\170\000\000\000\
\\000\000\
\\000\000\
\\001\000\011\000\003\000\010\000\019\000\171\000\020\000\008\000\
\\021\000\007\000\024\000\006\000\000\000\
\\001\000\011\000\003\000\010\000\019\000\172\000\020\000\008\000\
\\021\000\007\000\024\000\006\000\000\000\
\\007\000\176\000\010\000\175\000\011\000\174\000\012\000\173\000\000\000\
\\002\000\109\000\003\000\108\000\014\000\182\000\015\000\154\000\
\\026\000\153\000\027\000\106\000\028\000\105\000\039\000\103\000\000\000\
\\103\000\183\000\107\000\067\000\108\000\066\000\110\000\065\000\
\\111\000\064\000\113\000\063\000\114\000\062\000\000\000\
\\103\000\184\000\107\000\067\000\108\000\066\000\110\000\065\000\
\\111\000\064\000\113\000\063\000\114\000\062\000\000\000\
\\103\000\185\000\107\000\067\000\108\000\066\000\110\000\065\000\
\\111\000\064\000\113\000\063\000\114\000\062\000\000\000\
\\103\000\186\000\107\000\067\000\108\000\066\000\110\000\065\000\
\\111\000\064\000\113\000\063\000\114\000\062\000\000\000\
\\103\000\187\000\107\000\067\000\108\000\066\000\110\000\065\000\
\\111\000\064\000\113\000\063\000\114\000\062\000\000\000\
\\103\000\188\000\107\000\067\000\108\000\066\000\110\000\065\000\
\\111\000\064\000\113\000\063\000\114\000\062\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\011\000\003\000\010\000\021\000\197\000\024\000\006\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\083\000\201\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\011\000\003\000\010\000\021\000\211\000\024\000\006\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\109\000\003\000\108\000\026\000\107\000\027\000\106\000\
\\028\000\105\000\034\000\213\000\039\000\103\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\109\000\003\000\108\000\027\000\106\000\028\000\105\000\
\\039\000\215\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\109\000\003\000\108\000\026\000\220\000\027\000\106\000\
\\028\000\105\000\032\000\219\000\039\000\103\000\000\000\
\\002\000\109\000\003\000\108\000\026\000\223\000\027\000\106\000\
\\028\000\105\000\039\000\103\000\044\000\222\000\000\000\
\\002\000\109\000\003\000\108\000\026\000\220\000\027\000\106\000\
\\028\000\105\000\032\000\226\000\039\000\103\000\000\000\
\\002\000\092\000\006\000\230\000\029\000\229\000\030\000\228\000\000\000\
\\000\000\
\\002\000\236\000\036\000\235\000\043\000\234\000\000\000\
\\001\000\240\000\000\000\
\\002\000\109\000\003\000\108\000\026\000\241\000\027\000\106\000\
\\028\000\105\000\039\000\103\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\069\000\244\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\131\000\005\000\130\000\051\000\250\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\052\000\005\000\053\000\004\000\078\000\135\000\079\000\253\000\
\\102\000\001\000\000\000\
\\052\000\005\000\053\000\004\000\078\000\135\000\079\000\254\000\
\\102\000\001\000\000\000\
\\000\000\
\\052\000\005\000\053\000\138\000\055\000\000\001\102\000\001\000\000\000\
\\052\000\005\000\053\000\138\000\055\000\001\001\102\000\001\000\000\000\
\\052\000\005\000\053\000\138\000\055\000\002\001\102\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\070\000\006\001\083\000\005\001\000\000\
\\002\000\109\000\003\000\108\000\027\000\106\000\028\000\105\000\
\\037\000\151\000\038\000\009\001\039\000\149\000\040\000\148\000\000\000\
\\000\000\
\\035\000\011\001\000\000\
\\000\000\
\\000\000\
\\002\000\109\000\003\000\108\000\027\000\106\000\028\000\105\000\
\\037\000\014\001\039\000\149\000\040\000\148\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\109\000\003\000\108\000\026\000\223\000\027\000\106\000\
\\028\000\105\000\039\000\103\000\000\000\
\\000\000\
\\001\000\131\000\005\000\018\001\000\000\
\\042\000\019\001\000\000\
\\000\000\
\\105\000\025\001\106\000\024\001\111\000\023\001\000\000\
\\004\000\027\001\000\000\
\\115\000\163\000\117\000\029\001\000\000\
\\000\000\
\\000\000\
\\105\000\033\001\106\000\024\001\108\000\032\001\109\000\031\001\
\\111\000\023\001\000\000\
\\042\000\035\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\042\001\000\000\
\\000\000\
\\007\000\176\000\010\000\175\000\011\000\174\000\012\000\045\001\
\\013\000\044\001\000\000\
\\002\000\092\000\006\000\048\001\008\000\047\001\009\000\046\001\000\000\
\\093\000\058\001\094\000\057\001\095\000\056\001\096\000\055\001\
\\097\000\054\001\098\000\053\001\099\000\052\001\100\000\051\001\
\\101\000\050\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\102\000\063\001\000\000\
\\000\000\
\\000\000\
\\112\000\064\001\000\000\
\\001\000\131\000\005\000\066\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\025\000\067\001\000\000\
\\000\000\
\\001\000\011\000\003\000\010\000\019\000\079\000\020\000\008\000\
\\021\000\007\000\022\000\068\001\024\000\006\000\000\000\
\\001\000\082\000\072\000\069\001\000\000\
\\000\000\
\\057\000\073\001\058\000\072\001\082\000\071\001\000\000\
\\000\000\
\\001\000\011\000\003\000\010\000\019\000\086\001\020\000\008\000\
\\021\000\007\000\023\000\085\001\024\000\006\000\000\000\
\\001\000\011\000\003\000\010\000\018\000\088\001\019\000\087\001\
\\020\000\008\000\021\000\007\000\024\000\006\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\092\000\006\000\091\000\016\000\090\000\017\000\089\001\000\000\
\\001\000\011\000\003\000\010\000\019\000\090\001\020\000\008\000\
\\021\000\007\000\024\000\006\000\000\000\
\\000\000\
\\001\000\011\000\003\000\010\000\019\000\092\001\020\000\008\000\
\\021\000\007\000\024\000\006\000\000\000\
\\000\000\
\\002\000\109\000\003\000\108\000\026\000\107\000\027\000\106\000\
\\028\000\105\000\034\000\093\001\039\000\103\000\000\000\
\\000\000\
\\007\000\176\000\010\000\175\000\011\000\174\000\012\000\094\001\000\000\
\\001\000\011\000\003\000\010\000\019\000\095\001\020\000\008\000\
\\021\000\007\000\024\000\006\000\000\000\
\\002\000\109\000\003\000\108\000\026\000\096\001\027\000\106\000\
\\028\000\105\000\039\000\103\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\236\000\036\000\110\001\000\000\
\\000\000\
\\035\000\112\001\000\000\
\\044\000\222\000\000\000\
\\002\000\113\001\000\000\
\\002\000\114\001\000\000\
\\000\000\
\\000\000\
\\001\000\131\000\005\000\117\001\000\000\
\\001\000\124\000\081\000\118\001\000\000\
\\000\000\
\\001\000\121\001\068\000\120\001\000\000\
\\001\000\121\001\068\000\123\001\000\000\
\\001\000\126\000\071\000\124\001\000\000\
\\001\000\121\001\068\000\125\001\000\000\
\\007\000\176\000\010\000\175\000\011\000\174\000\012\000\126\001\000\000\
\\000\000\
\\001\000\131\000\005\000\127\001\000\000\
\\052\000\005\000\053\000\004\000\078\000\135\000\079\000\128\001\
\\102\000\001\000\000\000\
\\000\000\
\\000\000\
\\001\000\011\000\003\000\010\000\018\000\129\001\019\000\087\001\
\\020\000\008\000\021\000\007\000\024\000\006\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\011\000\003\000\010\000\019\000\131\001\020\000\008\000\
\\021\000\007\000\024\000\006\000\000\000\
\\001\000\146\000\084\000\132\001\000\000\
\\069\000\133\001\000\000\
\\000\000\
\\001\000\135\001\000\000\
\\001\000\136\001\000\000\
\\000\000\
\\002\000\109\000\003\000\108\000\027\000\106\000\028\000\105\000\
\\037\000\137\001\039\000\149\000\040\000\148\000\000\000\
\\000\000\
\\007\000\176\000\010\000\175\000\011\000\174\000\012\000\139\001\000\000\
\\002\000\109\000\003\000\108\000\027\000\106\000\028\000\105\000\
\\037\000\151\000\038\000\140\001\039\000\149\000\040\000\148\000\000\000\
\\000\000\
\\001\000\011\000\003\000\010\000\019\000\142\001\020\000\008\000\
\\021\000\007\000\024\000\006\000\000\000\
\\002\000\109\000\003\000\108\000\014\000\143\001\015\000\154\000\
\\026\000\153\000\027\000\106\000\028\000\105\000\039\000\103\000\000\000\
\\002\000\109\000\003\000\108\000\014\000\144\001\015\000\154\000\
\\026\000\153\000\027\000\106\000\028\000\105\000\039\000\103\000\000\000\
\\000\000\
\\000\000\
\\044\000\146\001\000\000\
\\000\000\
\\041\000\147\001\104\000\159\000\000\000\
\\000\000\
\\105\000\148\001\106\000\024\001\111\000\023\001\000\000\
\\000\000\
\\104\000\150\001\000\000\
\\001\000\151\001\000\000\
\\000\000\
\\000\000\
\\049\000\152\001\050\000\164\000\115\000\163\000\117\000\162\000\000\000\
\\118\000\153\001\000\000\
\\000\000\
\\000\000\
\\115\000\163\000\117\000\156\001\000\000\
\\001\000\157\001\000\000\
\\042\000\158\001\000\000\
\\041\000\159\001\104\000\159\000\000\000\
\\045\000\160\001\104\000\167\000\000\000\
\\041\000\161\001\104\000\159\000\000\000\
\\052\000\005\000\053\000\138\000\055\000\162\001\102\000\001\000\000\000\
\\007\000\176\000\010\000\175\000\011\000\174\000\012\000\163\001\000\000\
\\000\000\
\\007\000\176\000\010\000\165\001\011\000\164\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\093\000\058\001\094\000\057\001\095\000\174\001\096\000\055\001\
\\097\000\173\001\098\000\172\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\177\001\000\000\
\\000\000\
\\092\000\179\001\093\000\058\001\094\000\057\001\095\000\056\001\
\\096\000\055\001\097\000\054\001\098\000\053\001\099\000\052\001\
\\100\000\051\001\101\000\178\001\000\000\
\\091\000\181\001\000\000\
\\000\000\
\\007\000\184\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\121\001\068\000\188\001\000\000\
\\000\000\
\\057\000\190\001\058\000\072\001\000\000\
\\000\000\
\\004\000\192\001\063\000\191\001\000\000\
\\042\000\194\001\062\000\193\001\000\000\
\\001\000\196\001\060\000\195\001\000\000\
\\001\000\131\000\005\000\199\001\065\000\198\001\066\000\197\001\000\000\
\\001\000\202\001\068\000\201\001\000\000\
\\001\000\204\001\061\000\203\001\000\000\
\\001\000\206\001\064\000\205\001\000\000\
\\042\000\194\001\062\000\207\001\000\000\
\\045\000\208\001\104\000\167\000\000\000\
\\000\000\
\\057\000\210\001\058\000\072\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\011\000\003\000\010\000\020\000\214\001\021\000\007\000\
\\024\000\006\000\088\000\213\001\089\000\212\001\090\000\211\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\109\000\003\000\108\000\026\000\220\000\027\000\106\000\
\\028\000\105\000\032\000\216\001\039\000\103\000\000\000\
\\000\000\
\\000\000\
\\002\000\109\000\003\000\108\000\026\000\220\000\027\000\106\000\
\\028\000\105\000\032\000\217\001\039\000\103\000\000\000\
\\002\000\109\000\003\000\108\000\026\000\219\001\027\000\106\000\
\\028\000\105\000\033\000\218\001\039\000\103\000\000\000\
\\044\000\220\001\000\000\
\\000\000\
\\000\000\
\\002\000\092\000\006\000\230\000\029\000\229\000\030\000\221\001\000\000\
\\002\000\109\000\003\000\108\000\026\000\222\001\027\000\106\000\
\\028\000\105\000\039\000\103\000\000\000\
\\007\000\176\000\010\000\175\000\011\000\174\000\012\000\223\001\000\000\
\\002\000\109\000\003\000\108\000\026\000\224\001\027\000\106\000\
\\028\000\105\000\039\000\103\000\000\000\
\\000\000\
\\002\000\236\000\036\000\225\001\000\000\
\\000\000\
\\035\000\227\001\000\000\
\\035\000\228\001\000\000\
\\002\000\229\001\000\000\
\\001\000\011\000\003\000\010\000\019\000\230\001\020\000\008\000\
\\021\000\007\000\024\000\006\000\000\000\
\\000\000\
\\000\000\
\\001\000\131\000\005\000\232\001\074\000\231\001\000\000\
\\000\000\
\\000\000\
\\057\000\236\001\058\000\072\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\052\000\005\000\053\000\138\000\055\000\240\001\102\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\131\000\005\000\244\001\085\000\243\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\011\000\003\000\010\000\019\000\246\001\020\000\008\000\
\\021\000\007\000\024\000\006\000\000\000\
\\000\000\
\\000\000\
\\002\000\109\000\003\000\108\000\027\000\106\000\028\000\105\000\
\\037\000\151\000\038\000\247\001\039\000\149\000\040\000\148\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\104\000\250\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\119\000\254\001\120\000\253\001\000\000\
\\128\000\002\002\129\000\001\002\130\000\000\002\000\000\
\\115\000\163\000\117\000\011\002\000\000\
\\000\000\
\\000\000\
\\001\000\013\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\042\001\000\000\
\\007\000\016\002\000\000\
\\000\000\
\\007\000\176\000\010\000\175\000\011\000\174\000\012\000\018\002\
\\013\000\017\002\000\000\
\\000\000\
\\002\000\092\000\006\000\048\001\008\000\047\001\009\000\019\002\000\000\
\\007\000\176\000\010\000\175\000\011\000\174\000\012\000\020\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\093\000\058\001\094\000\057\001\095\000\056\001\096\000\055\001\
\\097\000\054\001\098\000\053\001\099\000\052\001\100\000\051\001\
\\101\000\022\002\000\000\
\\093\000\025\002\094\000\057\001\095\000\024\002\096\000\023\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\112\000\032\002\000\000\
\\001\000\131\000\005\000\033\002\000\000\
\\000\000\
\\083\000\034\002\000\000\
\\000\000\
\\000\000\
\\001\000\036\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\131\000\005\000\199\001\066\000\043\002\000\000\
\\000\000\
\\001\000\045\002\059\000\044\002\000\000\
\\000\000\
\\073\000\048\002\083\000\047\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\121\001\068\000\053\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\011\000\003\000\010\000\019\000\062\002\020\000\008\000\
\\021\000\007\000\024\000\006\000\000\000\
\\000\000\
\\000\000\
\\035\000\065\002\000\000\
\\000\000\
\\000\000\
\\075\000\068\002\000\000\
\\052\000\005\000\053\000\072\002\076\000\071\002\077\000\070\002\
\\102\000\001\000\000\000\
\\052\000\005\000\053\000\072\002\076\000\071\002\077\000\077\002\
\\102\000\001\000\000\000\
\\001\000\131\000\005\000\079\002\067\000\078\002\000\000\
\\000\000\
\\001\000\011\000\003\000\010\000\019\000\083\002\020\000\008\000\
\\021\000\007\000\024\000\006\000\054\000\082\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\011\000\003\000\010\000\019\000\085\002\020\000\008\000\
\\021\000\007\000\024\000\006\000\000\000\
\\001\000\131\000\005\000\232\001\074\000\086\002\000\000\
\\000\000\
\\075\000\087\002\000\000\
\\052\000\005\000\053\000\072\002\076\000\071\002\077\000\088\002\
\\102\000\001\000\000\000\
\\000\000\
\\000\000\
\\116\000\089\002\000\000\
\\000\000\
\\000\000\
\\007\000\176\000\010\000\175\000\011\000\174\000\012\000\090\002\000\000\
\\001\000\131\000\005\000\091\002\000\000\
\\119\000\092\002\120\000\253\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\128\000\095\002\129\000\001\002\130\000\000\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\128\000\097\002\129\000\001\002\130\000\000\002\000\000\
\\000\000\
\\121\000\101\002\122\000\100\002\123\000\099\002\126\000\098\002\000\000\
\\128\000\106\002\129\000\001\002\130\000\000\002\000\000\
\\000\000\
\\131\000\107\002\000\000\
\\000\000\
\\046\000\112\002\047\000\111\002\048\000\110\002\116\000\109\002\000\000\
\\000\000\
\\052\000\005\000\053\000\138\000\055\000\115\002\102\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\093\000\058\001\094\000\057\001\095\000\056\001\096\000\055\001\
\\097\000\054\001\098\000\053\001\099\000\052\001\100\000\051\001\
\\101\000\116\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\092\000\179\001\093\000\058\001\094\000\057\001\095\000\056\001\
\\096\000\055\001\097\000\054\001\098\000\053\001\099\000\052\001\
\\100\000\051\001\101\000\178\001\000\000\
\\000\000\
\\092\000\118\002\093\000\058\001\094\000\057\001\095\000\056\001\
\\096\000\055\001\097\000\054\001\098\000\053\001\099\000\052\001\
\\100\000\051\001\101\000\117\002\000\000\
\\000\000\
\\000\000\
\\093\000\058\001\094\000\057\001\095\000\056\001\096\000\055\001\
\\097\000\054\001\098\000\053\001\099\000\052\001\100\000\051\001\
\\101\000\119\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\192\001\063\000\120\002\000\000\
\\000\000\
\\042\000\194\001\062\000\122\002\000\000\
\\000\000\
\\001\000\196\001\060\000\124\002\000\000\
\\001\000\121\001\068\000\125\002\000\000\
\\001\000\131\000\005\000\199\001\065\000\126\002\066\000\197\001\000\000\
\\001\000\131\000\005\000\128\002\066\000\127\002\000\000\
\\000\000\
\\000\000\
\\001\000\045\002\059\000\129\002\000\000\
\\001\000\204\001\061\000\130\002\000\000\
\\000\000\
\\000\000\
\\001\000\132\002\000\000\
\\001\000\206\001\064\000\133\002\000\000\
\\007\000\176\000\010\000\175\000\011\000\174\000\012\000\134\002\000\000\
\\041\000\135\002\104\000\159\000\000\000\
\\000\000\
\\000\000\
\\001\000\011\000\003\000\010\000\020\000\214\001\021\000\007\000\
\\024\000\006\000\088\000\213\001\090\000\137\002\000\000\
\\093\000\058\001\094\000\057\001\095\000\056\001\096\000\055\001\
\\097\000\054\001\098\000\053\001\099\000\052\001\100\000\051\001\
\\101\000\138\002\000\000\
\\007\000\176\000\010\000\175\000\011\000\174\000\012\000\139\002\000\000\
\\000\000\
\\000\000\
\\002\000\109\000\003\000\108\000\026\000\219\001\027\000\106\000\
\\028\000\105\000\033\000\140\002\039\000\103\000\000\000\
\\002\000\109\000\003\000\108\000\026\000\141\002\027\000\106\000\
\\028\000\105\000\039\000\103\000\000\000\
\\000\000\
\\001\000\011\000\003\000\010\000\019\000\142\002\020\000\008\000\
\\021\000\007\000\024\000\006\000\000\000\
\\001\000\011\000\003\000\010\000\019\000\143\002\020\000\008\000\
\\021\000\007\000\024\000\006\000\000\000\
\\000\000\
\\001\000\121\001\068\000\145\002\000\000\
\\001\000\121\001\068\000\146\002\000\000\
\\000\000\
\\001\000\131\000\005\000\232\001\052\000\005\000\053\000\072\002\
\\074\000\148\002\076\000\071\002\077\000\147\002\102\000\001\000\000\000\
\\000\000\
\\052\000\005\000\053\000\072\002\076\000\071\002\077\000\150\002\
\\102\000\001\000\000\000\
\\000\000\
\\001\000\124\000\081\000\151\002\000\000\
\\052\000\005\000\053\000\072\002\076\000\071\002\077\000\152\002\
\\102\000\001\000\000\000\
\\001\000\146\000\084\000\153\002\000\000\
\\052\000\005\000\053\000\072\002\076\000\071\002\077\000\154\002\
\\102\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\042\000\158\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\052\000\005\000\053\000\138\000\055\000\160\002\102\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\176\000\010\000\175\000\011\000\174\000\012\000\163\002\
\\115\000\162\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\121\000\165\002\122\000\100\002\123\000\099\002\126\000\098\002\000\000\
\\000\000\
\\128\000\166\002\129\000\001\002\130\000\000\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\121\000\173\002\122\000\100\002\123\000\099\002\126\000\172\002\
\\127\000\171\002\000\000\
\\002\000\092\000\006\000\176\002\124\000\175\002\125\000\174\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\183\002\115\000\162\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\185\002\000\000\
\\046\000\186\002\047\000\111\002\048\000\110\002\116\000\109\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\176\000\010\000\175\000\011\000\174\000\012\000\189\002\000\000\
\\000\000\
\\007\000\176\000\010\000\175\000\011\000\174\000\012\000\190\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\121\001\068\000\192\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\093\000\058\001\094\000\057\001\095\000\056\001\096\000\055\001\
\\097\000\054\001\098\000\053\001\099\000\052\001\100\000\051\001\
\\101\000\193\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\011\000\003\000\010\000\019\000\195\002\020\000\008\000\
\\021\000\007\000\024\000\006\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\131\000\005\000\232\001\074\000\199\002\000\000\
\\001\000\131\000\005\000\079\002\067\000\200\002\000\000\
\\001\000\131\000\005\000\201\002\000\000\
\\001\000\131\000\005\000\202\002\000\000\
\\001\000\011\000\003\000\010\000\019\000\083\002\020\000\008\000\
\\021\000\007\000\024\000\006\000\054\000\203\002\000\000\
\\000\000\
\\001\000\131\000\005\000\244\001\085\000\204\002\000\000\
\\000\000\
\\000\000\
\\108\000\032\001\109\000\205\002\000\000\
\\000\000\
\\000\000\
\\128\000\209\002\129\000\001\002\130\000\000\002\000\000\
\\000\000\
\\122\000\212\002\123\000\211\002\126\000\098\002\000\000\
\\128\000\213\002\129\000\001\002\130\000\000\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\130\000\222\002\132\000\221\002\000\000\
\\000\000\
\\001\000\224\002\000\000\
\\047\000\225\002\048\000\110\002\116\000\109\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\091\000\226\002\000\000\
\\000\000\
\\000\000\
\\001\000\131\000\005\000\227\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\075\000\229\002\000\000\
\\075\000\230\002\000\000\
\\052\000\005\000\053\000\072\002\076\000\071\002\077\000\231\002\
\\102\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\118\000\153\001\000\000\
\\000\000\
\\128\000\236\002\129\000\001\002\130\000\000\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\126\000\240\002\127\000\239\002\000\000\
\\000\000\
\\002\000\092\000\006\000\176\002\124\000\242\002\125\000\174\002\000\000\
\\000\000\
\\121\000\243\002\122\000\100\002\123\000\099\002\126\000\098\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\011\000\003\000\010\000\021\000\248\002\024\000\006\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\176\000\010\000\175\000\011\000\174\000\012\000\250\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\126\000\253\002\127\000\171\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\130\000\222\002\132\000\255\002\000\000\
\\128\000\001\003\129\000\001\002\130\000\000\002\133\000\000\003\000\000\
\\007\000\176\000\010\000\175\000\011\000\174\000\012\000\002\003\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\128\000\001\003\129\000\001\002\130\000\000\002\133\000\004\003\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\128\000\001\003\129\000\001\002\130\000\000\002\133\000\008\003\000\000\
\\000\000\
\\000\000\
\\000\000\
\"
val numstates = 778
val numrules = 399
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit ->  unit
 | ASSOCINDICATOR of unit ->  ({ cut:bool,strength:int,direction:FormatTemplate.assocDirection } )
 | FORMATINDICATOR of unit ->  ({ space:bool,newline:{ priority:FormatTemplate.priority }  option } )
 | STARTOFINDENT of unit ->  (int)
 | LOCALFORMATTAG of unit ->  (string) | AQID of unit ->  (string)
 | OBJL of unit ->  (string) | ENDQ of unit ->  (string)
 | CHAR of unit ->  (string) | STRING of unit ->  (string)
 | REAL of unit ->  (string) | WORD of unit ->  (int)
 | INT0 of unit ->  (int) | INT of unit ->  (int)
 | TYVAR of unit ->  (string) | ID of unit ->  (string)
 | templates_comma_list of unit ->  (template list list)
 | insts of unit ->  (instance list)
 | opt_typed of unit ->  (string option) | inst of unit ->  (instance)
 | template of unit ->  (template)
 | templates of unit ->  (template list)
 | atypepat_list of unit ->  (typepat list)
 | atypepat of unit ->  (typepat)
 | typepat_field of unit ->  (string*typepat)
 | typepat_rows of unit ->  ( ( string * typepat )  list*bool)
 | tuple_typepat of unit ->  (typepat list)
 | typepat' of unit ->  (typepat) | typepat of unit ->  (typepat)
 | localformattag of unit ->  (formattag)
 | localformattags of unit ->  (formattag list)
 | formattag of unit ->  (formattag)
 | defining_format_comment_list_with_inners of unit ->  (innerHeaderFormatComment list*definingFormatComment list)
 | defining_format_comment_list of unit ->  (definingFormatComment list)
 | defining_format_comment of unit ->  (definingFormatComment)
 | funheader_spec of unit ->  (string)
 | destination_spec of unit ->  (string)
 | formatparam_list of unit ->  (string list)
 | formatparams_spec of unit ->  (string list)
 | formatter_spec of unit ->  (string*string)
 | prefix_spec_opt of unit ->  (string)
 | prefix_spec of unit ->  (string) | ditto_spec of unit ->  (string)
 | inner_header_format_spec of unit ->  (innerHeaderFormatComment)
 | inner_header_format_specs of unit ->  (innerHeaderFormatComment)
 | inner_header_format_comment_list of unit ->  (innerHeaderFormatComment list)
 | header_format_specs of unit ->  (headerFormatComment)
 | header_format_comment_list of unit ->  (headerFormatComment list)
 | ffity of unit ->  (unit) | fficconv of unit ->  (unit)
 | ffiFunty of unit ->  (unit) | ffiFunArg of unit ->  (unit)
 | ffiTupleTy of unit ->  (unit) | ffitupleseq of unit ->  (unit)
 | ffiAtty of unit ->  (unit) | ffiContyArg of unit ->  (unit)
 | ffiArgs of unit ->  (unit) | ffityseq of unit ->  (unit)
 | ffityrow of unit ->  (unit) | ffiApplyArgSeq of unit ->  (unit)
 | ffiApplyArgs of unit ->  (unit) | ffiApplyArg of unit ->  (unit)
 | cconv of unit ->  (unit) | interdec of unit ->  (dec)
 | fct_exp of unit ->  (fsigexp sigConst -> fctexp)
 | fctb of unit ->  (fctb list)
 | fparamList of unit ->  ( ( string option * sigexp )  list)
 | fparam of unit ->  (string option*sigexp)
 | strb of unit ->  (strb list) | sdecs' of unit ->  (dec)
 | sdecs of unit ->  (dec) | sdec of unit ->  (dec)
 | strdecs of unit ->  (dec) | strdec of unit ->  (dec)
 | arg_fct of unit ->  ( ( strexp * bool )  list)
 | str of unit ->  (strexp) | fsig of unit ->  (fsigexp)
 | fsigb of unit ->  (fsigb list) | sigb of unit ->  (sigb list)
 | fsigconstraint_op of unit ->  (fsigexp sigConst)
 | sigconstraint_op of unit ->  (sigexp sigConst)
 | sign of unit ->  (sigexp) | whspec of unit ->  (wherespec list)
 | patheqn of unit ->  (string list list)
 | sharespec of unit ->  (spec list)
 | exnspec of unit ->  ( ( string * ty option )  list)
 | valspec of unit ->  ( ( string * ty )  list)
 | tyspec of unit ->  ( ( string * tyvar list * ty option )  list)
 | fctspec of unit ->  ( ( string * fsigexp )  list)
 | strspec of unit ->  ( ( string * sigexp * path option )  list)
 | idents of unit ->  (spec list) | spec of unit ->  (spec list)
 | spec_s of unit ->  (spec list) | ops of unit ->  (string list)
 | ldecs of unit ->  (dec) | exp_pa of unit ->  (exp list)
 | ldec of unit ->  (dec) | fixity of unit ->  (fixity)
 | qid_p of unit ->  (string list list) | eb of unit ->  (eb)
 | ebs of unit ->  (eb list)
 | constr of unit ->  ({ valConName:string,argTypeOpt:ty option,formatComments:definingFormatComment list } )
 | constrs of unit ->  ({ valConName:string,argTypeOpt:ty option,formatComments:definingFormatComment list }  list)
 | dbrhs of unit ->  (dbrhs) | db of unit ->  (db list)
 | tyvar_pc of unit ->  (tyvar list)
 | tyvarseq of unit ->  (tyvar list) | tyvars of unit ->  (tyvar list)
 | tb of unit ->  (tb list) | clause of unit ->  (clause)
 | apats of unit ->  (pat list) | fb of unit ->  (fb list)
 | fb' of unit ->  (clause list) | rvb of unit ->  (rvb list)
 | constraint of unit ->  (ty option) | vb of unit ->  (vb list)
 | or_pat_list of unit ->  (pat list)
 | pat_list of unit ->  (pat list) | pat_2c of unit ->  (pat list)
 | plabels of unit ->  ( ( (string * pat) list * bool ) )
 | plabel of unit ->  ( ( string * pat ) ) | apat' of unit ->  (pat)
 | apat of unit ->  (pat) | pat of unit ->  (pat)
 | ot_list of unit ->  (exp list) | quote of unit ->  (exp list)
 | exp_2c of unit ->  (exp list) | exp_list of unit ->  (exp list)
 | aexp of unit ->  (exp) | app_exp of unit ->  (exp list)
 | exp of unit ->  (exp) | exp_ps of unit ->  (exp list)
 | elabels of unit ->  ( ( string * exp )  list)
 | elabel of unit ->  ( ( string * exp ) ) | rule of unit ->  (rule)
 | match of unit ->  (rule list) | ty0_pc of unit ->  (ty list)
 | ty of unit ->  (ty) | tuple_ty of unit ->  (ty list)
 | ty' of unit ->  (ty) | tlabels of unit ->  ( ( string * ty )  list)
 | tlabel of unit ->  ( ( string * ty ) )
 | tycon of unit ->  (string list) | selector of unit ->  (string)
 | qid of unit ->  (string list) | op_op of unit ->  (unit)
 | int of unit ->  (int) | id of unit ->  (string)
 | ident of unit ->  (string)
end
type svalue = MlyValue.svalue
type result = dec
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn (T 10) => true | (T 11) => true | (T 13) => true | (T 15) => true
 | (T 16) => true | (T 17) => true | (T 18) => true | (T 19) => true
 | (T 21) => true | (T 22) => true | (T 23) => true | (T 25) => true
 | (T 26) => true | (T 27) => true | (T 28) => true | (T 29) => true
 | (T 31) => true | (T 32) => true | (T 33) => true | (T 34) => true
 | (T 35) => true | (T 36) => true | (T 37) => true | (T 38) => true
 | (T 39) => true | (T 40) => true | (T 41) => true | (T 42) => true
 | (T 43) => true | (T 44) => true | (T 45) => true | (T 46) => true
 | (T 47) => true | (T 48) => true | (T 49) => true | (T 50) => true
 | (T 51) => true | (T 52) => true | (T 53) => true | (T 55) => true
 | (T 54) => true | (T 57) => true | (T 58) => true | (T 81) => true
 | (T 82) => true | _ => false
val preferred_change : (term list * term list) list = 
(nil
,nil
 $$ (T 53))::
(nil
,nil
 $$ (T 51))::
(nil
,nil
 $$ (T 18))::
(nil
,nil
 $$ (T 77))::
(nil
,nil
 $$ (T 1))::
(nil
 $$ (T 25),nil
 $$ (T 20))::
(nil
 $$ (T 20),nil
 $$ (T 25))::
(nil
 $$ (T 11),nil
 $$ (T 82))::
(nil
 $$ (T 72),nil
 $$ (T 40))::
(nil
 $$ (T 1),nil
 $$ (T 74))::
(nil
 $$ (T 74),nil
 $$ (T 1))::
(nil
,nil
 $$ (T 19) $$ (T 2) $$ (T 32))::
(nil
,nil
 $$ (T 2) $$ (T 18))::
nil
val noShift = 
fn (T 0) => true | _ => false
val showTerminal =
fn (T 0) => "EOF"
  | (T 1) => "SEMICOLON"
  | (T 2) => "ID"
  | (T 3) => "TYVAR"
  | (T 4) => "INT"
  | (T 5) => "INT0"
  | (T 6) => "WORD"
  | (T 7) => "REAL"
  | (T 8) => "STRING"
  | (T 9) => "CHAR"
  | (T 10) => "ABSTYPE"
  | (T 11) => "AND"
  | (T 12) => "ARROW"
  | (T 13) => "AS"
  | (T 14) => "BAR"
  | (T 15) => "CASE"
  | (T 16) => "DATATYPE"
  | (T 17) => "DOTDOTDOT"
  | (T 18) => "ELSE"
  | (T 19) => "END"
  | (T 20) => "EQUALOP"
  | (T 21) => "EQTYPE"
  | (T 22) => "EXCEPTION"
  | (T 23) => "DO"
  | (T 24) => "DOT"
  | (T 25) => "DARROW"
  | (T 26) => "FN"
  | (T 27) => "FUN"
  | (T 28) => "FUNCTOR"
  | (T 29) => "HANDLE"
  | (T 30) => "HASH"
  | (T 31) => "IF"
  | (T 32) => "IN"
  | (T 33) => "INCLUDE"
  | (T 34) => "INFIX"
  | (T 35) => "INFIXR"
  | (T 36) => "LAZY"
  | (T 37) => "LET"
  | (T 38) => "LOCAL"
  | (T 39) => "NONFIX"
  | (T 40) => "OF"
  | (T 41) => "OP"
  | (T 42) => "OPEN"
  | (T 43) => "OVERLOAD"
  | (T 44) => "RAISE"
  | (T 45) => "REC"
  | (T 46) => "SHARING"
  | (T 47) => "SIG"
  | (T 48) => "SIGNATURE"
  | (T 49) => "STRUCT"
  | (T 50) => "STRUCTURE"
  | (T 51) => "THEN"
  | (T 52) => "TYPE"
  | (T 53) => "VAL"
  | (T 54) => "WHERE"
  | (T 55) => "WHILE"
  | (T 56) => "WILD"
  | (T 57) => "WITH"
  | (T 58) => "WITHTYPE"
  | (T 59) => "ATOM"
  | (T 60) => "BOXED"
  | (T 61) => "CAST"
  | (T 62) => "CDECL"
  | (T 63) => "DOUBLE"
  | (T 64) => "EXPORT"
  | (T 65) => "EXTERNAL"
  | (T 66) => "FFIAPPLY"
  | (T 67) => "IMPORT"
  | (T 68) => "SIZEOF"
  | (T 69) => "STDCALL"
  | (T 70) => "USEOBJ"
  | (T 71) => "ASTERISK"
  | (T 72) => "COLON"
  | (T 73) => "COLONGT"
  | (T 74) => "COMMA"
  | (T 75) => "LBRACE"
  | (T 76) => "LBRACKET"
  | (T 77) => "LPAREN"
  | (T 78) => "RBRACE"
  | (T 79) => "RBRACKET"
  | (T 80) => "RPAREN"
  | (T 81) => "ORELSE"
  | (T 82) => "ANDALSO"
  | (T 83) => "FUNSIG"
  | (T 84) => "VECTORSTART"
  | (T 85) => "BEGINQ"
  | (T 86) => "ENDQ"
  | (T 87) => "OBJL"
  | (T 88) => "AQID"
  | (T 89) => "FORMATCOMMENTSTART"
  | (T 90) => "FORMATCOMMENTEND"
  | (T 91) => "DITTOTAG"
  | (T 92) => "PREFIXTAG"
  | (T 93) => "FORMATTERTAG"
  | (T 94) => "FORMATPARAMSTAG"
  | (T 95) => "DESTINATIONTAG"
  | (T 96) => "HEADERTAG"
  | (T 97) => "FORMATTAG"
  | (T 98) => "LOCALFORMATTAG"
  | (T 99) => "NEWLINE"
  | (T 100) => "STARTOFINDENT"
  | (T 101) => "FORMATINDICATOR"
  | (T 102) => "ASSOCINDICATOR"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn (T 2) => MlyValue.ID(fn () => ("BOGUS")) | 
(T 3) => MlyValue.TYVAR(fn () => ("BOGUS")) | 
(T 4) => MlyValue.INT(fn () => (1)) | 
(T 5) => MlyValue.INT0(fn () => (0)) | 
(T 6) => MlyValue.WORD(fn () => (0)) | 
(T 7) => MlyValue.REAL(fn () => ("0.0")) | 
(T 8) => MlyValue.STRING(fn () => ("")) | 
(T 9) => MlyValue.CHAR(fn () => ("a")) | 
_ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 99) $$ (T 97) $$ (T 96) $$ (T 95) $$ (T 94) $$ (T 93) $$ (T 92)
 $$ (T 91) $$ (T 90) $$ (T 89) $$ (T 85) $$ (T 84) $$ (T 83) $$ (T 82)
 $$ (T 81) $$ (T 80) $$ (T 79) $$ (T 78) $$ (T 77) $$ (T 76) $$ (T 75)
 $$ (T 74) $$ (T 73) $$ (T 72) $$ (T 71) $$ (T 70) $$ (T 69) $$ (T 68)
 $$ (T 67) $$ (T 66) $$ (T 65) $$ (T 64) $$ (T 63) $$ (T 62) $$ (T 61)
 $$ (T 60) $$ (T 59) $$ (T 58) $$ (T 57) $$ (T 56) $$ (T 55) $$ (T 54)
 $$ (T 53) $$ (T 52) $$ (T 51) $$ (T 50) $$ (T 49) $$ (T 48) $$ (T 47)
 $$ (T 46) $$ (T 45) $$ (T 44) $$ (T 43) $$ (T 42) $$ (T 41) $$ (T 40)
 $$ (T 39) $$ (T 38) $$ (T 37) $$ (T 36) $$ (T 35) $$ (T 34) $$ (T 33)
 $$ (T 32) $$ (T 31) $$ (T 30) $$ (T 29) $$ (T 28) $$ (T 27) $$ (T 26)
 $$ (T 25) $$ (T 24) $$ (T 23) $$ (T 22) $$ (T 21) $$ (T 20) $$ (T 19)
 $$ (T 18) $$ (T 17) $$ (T 16) $$ (T 15) $$ (T 14) $$ (T 13) $$ (T 12)
 $$ (T 11) $$ (T 10) $$ (T 1) $$ (T 0)end
structure Actions =
struct 
type int = Int.int
exception mlyAction of int
local open Header in
val actions = 
fn (i392:int,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of  ( 0, ( ( _, ( MlyValue.INT INT1, INT1left, INT1right)) :: rest671)
) => let val  result = MlyValue.int (fn _ => let val  (INT as INT1) = 
INT1 ()
 in (INT)
end)
 in ( LrTable.NT 2, ( result, INT1left, INT1right), rest671)
end
|  ( 1, ( ( _, ( MlyValue.INT0 INT01, INT01left, INT01right)) :: 
rest671)) => let val  result = MlyValue.int (fn _ => let val  (INT0
 as INT01) = INT01 ()
 in (INT0)
end)
 in ( LrTable.NT 2, ( result, INT01left, INT01right), rest671)
end
|  ( 2, ( ( _, ( MlyValue.ID ID1, ID1left, ID1right)) :: rest671)) =>
 let val  result = MlyValue.id (fn _ => let val  (ID as ID1) = ID1 ()
 in (ID)
end)
 in ( LrTable.NT 1, ( result, ID1left, ID1right), rest671)
end
|  ( 3, ( ( _, ( _, ASTERISK1left, ASTERISK1right)) :: rest671)) =>
 let val  result = MlyValue.id (fn _ => ("*"))
 in ( LrTable.NT 1, ( result, ASTERISK1left, ASTERISK1right), rest671)

end
|  ( 4, ( ( _, ( MlyValue.ID ID1, ID1left, ID1right)) :: rest671)) =>
 let val  result = MlyValue.ident (fn _ => let val  (ID as ID1) = ID1
 ()
 in (ID)
end)
 in ( LrTable.NT 0, ( result, ID1left, ID1right), rest671)
end
|  ( 5, ( ( _, ( _, ASTERISK1left, ASTERISK1right)) :: rest671)) =>
 let val  result = MlyValue.ident (fn _ => ("*"))
 in ( LrTable.NT 0, ( result, ASTERISK1left, ASTERISK1right), rest671)

end
|  ( 6, ( ( _, ( _, EQUALOP1left, EQUALOP1right)) :: rest671)) => let
 val  result = MlyValue.ident (fn _ => ("="))
 in ( LrTable.NT 0, ( result, EQUALOP1left, EQUALOP1right), rest671)

end
|  ( 7, ( ( _, ( _, OP1left, OP1right)) :: rest671)) => let val  
result = MlyValue.op_op (fn _ => ())
 in ( LrTable.NT 3, ( result, OP1left, OP1right), rest671)
end
|  ( 8, ( rest671)) => let val  result = MlyValue.op_op (fn _ => ())
 in ( LrTable.NT 3, ( result, defaultPos, defaultPos), rest671)
end
|  ( 9, ( ( _, ( MlyValue.qid qid1, _, qid1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.qid (fn _ => let val  (ID as ID1) = ID1 ()
 val  (qid as qid1) = qid1 ()
 in (ID :: qid)
end)
 in ( LrTable.NT 4, ( result, ID1left, qid1right), rest671)
end
|  ( 10, ( ( _, ( MlyValue.ident ident1, ident1left, ident1right)) :: 
rest671)) => let val  result = MlyValue.qid (fn _ => let val  (ident
 as ident1) = ident1 ()
 in ([ident])
end)
 in ( LrTable.NT 4, ( result, ident1left, ident1right), rest671)
end
|  ( 11, ( ( _, ( MlyValue.id id1, id1left, id1right)) :: rest671)) =>
 let val  result = MlyValue.selector (fn _ => let val  (id as id1) = 
id1 ()
 in (id)
end)
 in ( LrTable.NT 5, ( result, id1left, id1right), rest671)
end
|  ( 12, ( ( _, ( MlyValue.INT INT1, INT1left, INT1right)) :: rest671)
) => let val  result = MlyValue.selector (fn _ => let val  (INT as 
INT1) = INT1 ()
 in (Int.toString INT)
end)
 in ( LrTable.NT 5, ( result, INT1left, INT1right), rest671)
end
|  ( 13, ( ( _, ( MlyValue.tycon tycon1, _, tycon1right)) :: _ :: ( _,
 ( MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.tycon (fn _ => let val  (ID as ID1) = ID1 ()
 val  (tycon as tycon1) = tycon1 ()
 in (ID :: tycon)
end)
 in ( LrTable.NT 6, ( result, ID1left, tycon1right), rest671)
end
|  ( 14, ( ( _, ( MlyValue.ID ID1, ID1left, ID1right)) :: rest671)) =>
 let val  result = MlyValue.tycon (fn _ => let val  (ID as ID1) = ID1
 ()
 in ([ID])
end)
 in ( LrTable.NT 6, ( result, ID1left, ID1right), rest671)
end
|  ( 15, ( ( _, ( MlyValue.ty ty1, _, ty1right)) :: _ :: ( _, ( 
MlyValue.selector selector1, selector1left, _)) :: rest671)) => let
 val  result = MlyValue.tlabel (fn _ => let val  (selector as 
selector1) = selector1 ()
 val  (ty as ty1) = ty1 ()
 in (selector, ty )
end)
 in ( LrTable.NT 7, ( result, selector1left, ty1right), rest671)
end
|  ( 16, ( ( _, ( MlyValue.tlabels tlabels1, _, tlabels1right)) :: _
 :: ( _, ( MlyValue.tlabel tlabel1, tlabel1left, _)) :: rest671)) =>
 let val  result = MlyValue.tlabels (fn _ => let val  (tlabel as 
tlabel1) = tlabel1 ()
 val  (tlabels as tlabels1) = tlabels1 ()
 in (tlabel :: tlabels)
end)
 in ( LrTable.NT 8, ( result, tlabel1left, tlabels1right), rest671)

end
|  ( 17, ( ( _, ( MlyValue.tlabel tlabel1, tlabel1left, tlabel1right))
 :: rest671)) => let val  result = MlyValue.tlabels (fn _ => let val 
 (tlabel as tlabel1) = tlabel1 ()
 in ([tlabel])
end)
 in ( LrTable.NT 8, ( result, tlabel1left, tlabel1right), rest671)
end
|  ( 18, ( ( _, ( MlyValue.TYVAR TYVAR1, (TYVARleft as TYVAR1left), (
TYVARright as TYVAR1right))) :: rest671)) => let val  result = 
MlyValue.ty' (fn _ => let val  (TYVAR as TYVAR1) = TYVAR1 ()
 in (MarkTy (VarTy(Tyv(TYVAR)), (TYVARleft, TYVARright)))
end)
 in ( LrTable.NT 9, ( result, TYVAR1left, TYVAR1right), rest671)
end
|  ( 19, ( ( _, ( _, _, (RBRACEright as RBRACE1right))) :: ( _, ( 
MlyValue.tlabels tlabels1, _, _)) :: ( _, ( _, (LBRACEleft as 
LBRACE1left), _)) :: rest671)) => let val  result = MlyValue.ty' (fn _
 => let val  (tlabels as tlabels1) = tlabels1 ()
 in (MarkTy(RecordTy tlabels, (LBRACEleft, RBRACEright)))
end)
 in ( LrTable.NT 9, ( result, LBRACE1left, RBRACE1right), rest671)
end
|  ( 20, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( _, LBRACE1left, _))
 :: rest671)) => let val  result = MlyValue.ty' (fn _ => (RecordTy [])
)
 in ( LrTable.NT 9, ( result, LBRACE1left, RBRACE1right), rest671)
end
|  ( 21, ( ( _, ( MlyValue.tycon tycon1, tyconleft, (tyconright as 
tycon1right))) :: _ :: ( _, ( MlyValue.ty0_pc ty0_pc1, _, _)) :: ( _, 
( _, LPAREN1left, _)) :: rest671)) => let val  result = MlyValue.ty'
 (fn _ => let val  (ty0_pc as ty0_pc1) = ty0_pc1 ()
 val  (tycon as tycon1) = tycon1 ()
 in (MarkTy(ConTy(tycon, ty0_pc), (tyconleft, tyconright)))
end)
 in ( LrTable.NT 9, ( result, LPAREN1left, tycon1right), rest671)
end
|  ( 22, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.ty ty1, _, _
)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let val  result = 
MlyValue.ty' (fn _ => let val  (ty as ty1) = ty1 ()
 in (ty)
end)
 in ( LrTable.NT 9, ( result, LPAREN1left, RPAREN1right), rest671)
end
|  ( 23, ( ( _, ( MlyValue.tycon tycon1, tyconleft, (tyconright as 
tycon1right))) :: ( _, ( MlyValue.ty' ty'1, ty'1left, _)) :: rest671))
 => let val  result = MlyValue.ty' (fn _ => let val  (ty' as ty'1) = 
ty'1 ()
 val  (tycon as tycon1) = tycon1 ()
 in (MarkTy(ConTy(tycon, [ty']), (tyconleft, tyconright)))
end)
 in ( LrTable.NT 9, ( result, ty'1left, tycon1right), rest671)
end
|  ( 24, ( ( _, ( MlyValue.tycon tycon1, (tyconleft as tycon1left), (
tyconright as tycon1right))) :: rest671)) => let val  result = 
MlyValue.ty' (fn _ => let val  (tycon as tycon1) = tycon1 ()
 in (MarkTy(ConTy(tycon, []), (tyconleft, tyconright)))
end)
 in ( LrTable.NT 9, ( result, tycon1left, tycon1right), rest671)
end
|  ( 25, ( ( _, ( MlyValue.tuple_ty tuple_ty1, _, tuple_ty1right)) ::
 _ :: ( _, ( MlyValue.ty' ty'1, ty'1left, _)) :: rest671)) => let val 
 result = MlyValue.tuple_ty (fn _ => let val  (ty' as ty'1) = ty'1 ()
 val  (tuple_ty as tuple_ty1) = tuple_ty1 ()
 in (ty' :: tuple_ty)
end)
 in ( LrTable.NT 10, ( result, ty'1left, tuple_ty1right), rest671)
end
|  ( 26, ( ( _, ( MlyValue.ty' ty'2, _, ty'2right)) :: _ :: ( _, ( 
MlyValue.ty' ty'1, ty'1left, _)) :: rest671)) => let val  result = 
MlyValue.tuple_ty (fn _ => let val  ty'1 = ty'1 ()
 val  ty'2 = ty'2 ()
 in ([ty'1, ty'2])
end)
 in ( LrTable.NT 10, ( result, ty'1left, ty'2right), rest671)
end
|  ( 27, ( ( _, ( MlyValue.tuple_ty tuple_ty1, tuple_ty1left, 
tuple_ty1right)) :: rest671)) => let val  result = MlyValue.ty (fn _
 => let val  (tuple_ty as tuple_ty1) = tuple_ty1 ()
 in (TupleTy(tuple_ty))
end)
 in ( LrTable.NT 11, ( result, tuple_ty1left, tuple_ty1right), rest671
)
end
|  ( 28, ( ( _, ( MlyValue.ty ty2, _, ty2right)) :: _ :: ( _, ( 
MlyValue.ty ty1, ty1left, _)) :: rest671)) => let val  result = 
MlyValue.ty (fn _ => let val  ty1 = ty1 ()
 val  ty2 = ty2 ()
 in (ConTy([arrowTycon], [ty1, ty2]))
end)
 in ( LrTable.NT 11, ( result, ty1left, ty2right), rest671)
end
|  ( 29, ( ( _, ( MlyValue.ty' ty'1, ty'1left, ty'1right)) :: rest671)
) => let val  result = MlyValue.ty (fn _ => let val  (ty' as ty'1) = 
ty'1 ()
 in (ty')
end)
 in ( LrTable.NT 11, ( result, ty'1left, ty'1right), rest671)
end
|  ( 30, ( ( _, ( MlyValue.ty ty2, _, ty2right)) :: _ :: ( _, ( 
MlyValue.ty ty1, ty1left, _)) :: rest671)) => let val  result = 
MlyValue.ty0_pc (fn _ => let val  ty1 = ty1 ()
 val  ty2 = ty2 ()
 in ([ty1, ty2])
end)
 in ( LrTable.NT 12, ( result, ty1left, ty2right), rest671)
end
|  ( 31, ( ( _, ( MlyValue.ty0_pc ty0_pc1, _, ty0_pc1right)) :: _ :: (
 _, ( MlyValue.ty ty1, ty1left, _)) :: rest671)) => let val  result = 
MlyValue.ty0_pc (fn _ => let val  (ty as ty1) = ty1 ()
 val  (ty0_pc as ty0_pc1) = ty0_pc1 ()
 in (ty :: ty0_pc)
end)
 in ( LrTable.NT 12, ( result, ty1left, ty0_pc1right), rest671)
end
|  ( 32, ( ( _, ( MlyValue.rule rule1, rule1left, rule1right)) :: 
rest671)) => let val  result = MlyValue.match (fn _ => let val  (rule
 as rule1) = rule1 ()
 in ([rule])
end)
 in ( LrTable.NT 13, ( result, rule1left, rule1right), rest671)
end
|  ( 33, ( ( _, ( MlyValue.match match1, _, match1right)) :: _ :: ( _,
 ( MlyValue.rule rule1, rule1left, _)) :: rest671)) => let val  result
 = MlyValue.match (fn _ => let val  (rule as rule1) = rule1 ()
 val  (match as match1) = match1 ()
 in (rule :: match)
end)
 in ( LrTable.NT 13, ( result, rule1left, match1right), rest671)
end
|  ( 34, ( ( _, ( MlyValue.exp exp1, expleft, (expright as exp1right))
) :: _ :: ( _, ( MlyValue.pat pat1, pat1left, _)) :: rest671)) => let
 val  result = MlyValue.rule (fn _ => let val  (pat as pat1) = pat1 ()
 val  (exp as exp1) = exp1 ()
 in (Rule{pat = pat, exp = markexp(exp, expleft, expright)})
end)
 in ( LrTable.NT 14, ( result, pat1left, exp1right), rest671)
end
|  ( 35, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.selector selector1, selector1left, _)) :: rest671)) => let
 val  result = MlyValue.elabel (fn _ => let val  (selector as 
selector1) = selector1 ()
 val  (exp as exp1) = exp1 ()
 in (selector, exp)
end)
 in ( LrTable.NT 15, ( result, selector1left, exp1right), rest671)
end
|  ( 36, ( ( _, ( MlyValue.elabels elabels1, _, elabels1right)) :: _
 :: ( _, ( MlyValue.elabel elabel1, elabel1left, _)) :: rest671)) =>
 let val  result = MlyValue.elabels (fn _ => let val  (elabel as 
elabel1) = elabel1 ()
 val  (elabels as elabels1) = elabels1 ()
 in (elabel :: elabels)
end)
 in ( LrTable.NT 16, ( result, elabel1left, elabels1right), rest671)

end
|  ( 37, ( ( _, ( MlyValue.elabel elabel1, elabel1left, elabel1right))
 :: rest671)) => let val  result = MlyValue.elabels (fn _ => let val 
 (elabel as elabel1) = elabel1 ()
 in ([elabel])
end)
 in ( LrTable.NT 16, ( result, elabel1left, elabel1right), rest671)

end
|  ( 38, ( ( _, ( MlyValue.exp exp1, exp1left, exp1right)) :: rest671)
) => let val  result = MlyValue.exp_ps (fn _ => let val  (exp as exp1)
 = exp1 ()
 in ([exp])
end)
 in ( LrTable.NT 17, ( result, exp1left, exp1right), rest671)
end
|  ( 39, ( ( _, ( MlyValue.exp_ps exp_ps1, _, exp_ps1right)) :: _ :: (
 _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result
 = MlyValue.exp_ps (fn _ => let val  (exp as exp1) = exp1 ()
 val  (exp_ps as exp_ps1) = exp_ps1 ()
 in (exp :: exp_ps)
end)
 in ( LrTable.NT 17, ( result, exp1left, exp_ps1right), rest671)
end
|  ( 40, ( ( _, ( MlyValue.match match1, _, match1right)) :: _ :: ( _,
 ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  match1 = match1 ()
 in ()
end)
 in ( LrTable.NT 18, ( result, exp1left, match1right), rest671)
end
|  ( 41, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ()
end)
 in ( LrTable.NT 18, ( result, exp1left, exp2right), rest671)
end
|  ( 42, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ()
end)
 in ( LrTable.NT 18, ( result, exp1left, exp2right), rest671)
end
|  ( 43, ( ( _, ( MlyValue.ty ty1, _, ty1right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  ty1 = ty1 ()
 in ()
end)
 in ( LrTable.NT 18, ( result, exp1left, ty1right), rest671)
end
|  ( 44, ( ( _, ( MlyValue.app_exp app_exp1, app_exp1left, 
app_exp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  app_exp1 = app_exp1 ()
 in ()
end)
 in ( LrTable.NT 18, ( result, app_exp1left, app_exp1right), rest671)

end
|  ( 45, ( ( _, ( MlyValue.match match1, _, match1right)) :: ( _, ( _,
 FN1left, _)) :: rest671)) => let val  result = MlyValue.exp (fn _ =>
 let val  match1 = match1 ()
 in ()
end)
 in ( LrTable.NT 18, ( result, FN1left, match1right), rest671)
end
|  ( 46, ( ( _, ( MlyValue.match match1, _, match1right)) :: _ :: ( _,
 ( MlyValue.exp exp1, _, _)) :: ( _, ( _, CASE1left, _)) :: rest671))
 => let val  result = MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  match1 = match1 ()
 in ()
end)
 in ( LrTable.NT 18, ( result, CASE1left, match1right), rest671)
end
|  ( 47, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, _, _)) :: ( _, ( _, WHILE1left, _)) :: rest671)) =>
 let val  result = MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ()
end)
 in ( LrTable.NT 18, ( result, WHILE1left, exp2right), rest671)
end
|  ( 48, ( ( _, ( MlyValue.exp exp3, _, exp3right)) :: _ :: ( _, ( 
MlyValue.exp exp2, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: 
( _, ( _, IF1left, _)) :: rest671)) => let val  result = MlyValue.exp
 (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  exp3 = exp3 ()
 in ()
end)
 in ( LrTable.NT 18, ( result, IF1left, exp3right), rest671)
end
|  ( 49, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: ( _, ( _, 
RAISE1left, _)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  exp1 = exp1 ()
 in ()
end)
 in ( LrTable.NT 18, ( result, RAISE1left, exp1right), rest671)
end
|  ( 50, ( ( _, ( MlyValue.ffity ffity1, _, ffity1right)) :: _ :: _ ::
 ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  
result = MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  ffity1 = ffity1 ()
 in ()
end)
 in ( LrTable.NT 18, ( result, exp1left, ffity1right), rest671)
end
|  ( 51, ( ( _, ( MlyValue.ffity ffity1, _, ffity1right)) :: _ :: _ ::
 ( _, ( MlyValue.ffiApplyArgs ffiApplyArgs1, _, _)) :: _ :: ( _, ( 
MlyValue.aexp aexp1, _, _)) :: ( _, ( MlyValue.cconv cconv1, _, _)) ::
 ( _, ( _, FFIAPPLY1left, _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  cconv1 = cconv1 ()
 val  aexp1 = aexp1 ()
 val  ffiApplyArgs1 = ffiApplyArgs1 ()
 val  ffity1 = ffity1 ()
 in ()
end)
 in ( LrTable.NT 18, ( result, FFIAPPLY1left, ffity1right), rest671)

end
|  ( 52, ( ( _, ( MlyValue.aexp aexp1, aexp1left, aexp1right)) :: 
rest671)) => let val  result = MlyValue.app_exp (fn _ => let val  
aexp1 = aexp1 ()
 in ([])
end)
 in ( LrTable.NT 19, ( result, aexp1left, aexp1right), rest671)
end
|  ( 53, ( ( _, ( MlyValue.app_exp app_exp1, _, app_exp1right)) :: ( _
, ( MlyValue.aexp aexp1, aexp1left, _)) :: rest671)) => let val  
result = MlyValue.app_exp (fn _ => let val  aexp1 = aexp1 ()
 val  app_exp1 = app_exp1 ()
 in ([])
end)
 in ( LrTable.NT 19, ( result, aexp1left, app_exp1right), rest671)
end
|  ( 54, ( ( _, ( MlyValue.ident ident1, ident1left, ident1right)) :: 
rest671)) => let val  result = MlyValue.aexp (fn _ => let val  ident1
 = ident1 ()
 in ()
end)
 in ( LrTable.NT 20, ( result, ident1left, ident1right), rest671)
end
|  ( 55, ( ( _, ( MlyValue.ident ident1, _, ident1right)) :: ( _, ( _,
 OP1left, _)) :: rest671)) => let val  result = MlyValue.aexp (fn _ =>
 let val  ident1 = ident1 ()
 in ()
end)
 in ( LrTable.NT 20, ( result, OP1left, ident1right), rest671)
end
|  ( 56, ( ( _, ( MlyValue.qid qid1, _, qid1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.aexp (fn _ => let val  ID1 = ID1 ()
 val  qid1 = qid1 ()
 in ()
end)
 in ( LrTable.NT 20, ( result, ID1left, qid1right), rest671)
end
|  ( 57, ( ( _, ( MlyValue.int int1, int1left, int1right)) :: rest671)
) => let val  result = MlyValue.aexp (fn _ => let val  int1 = int1 ()
 in ()
end)
 in ( LrTable.NT 20, ( result, int1left, int1right), rest671)
end
|  ( 58, ( ( _, ( MlyValue.WORD WORD1, WORD1left, WORD1right)) :: 
rest671)) => let val  result = MlyValue.aexp (fn _ => let val  WORD1 =
 WORD1 ()
 in ()
end)
 in ( LrTable.NT 20, ( result, WORD1left, WORD1right), rest671)
end
|  ( 59, ( ( _, ( MlyValue.REAL REAL1, REAL1left, REAL1right)) :: 
rest671)) => let val  result = MlyValue.aexp (fn _ => let val  REAL1 =
 REAL1 ()
 in ()
end)
 in ( LrTable.NT 20, ( result, REAL1left, REAL1right), rest671)
end
|  ( 60, ( ( _, ( MlyValue.STRING STRING1, STRING1left, STRING1right))
 :: rest671)) => let val  result = MlyValue.aexp (fn _ => let val  
STRING1 = STRING1 ()
 in ()
end)
 in ( LrTable.NT 20, ( result, STRING1left, STRING1right), rest671)

end
|  ( 61, ( ( _, ( MlyValue.CHAR CHAR1, CHAR1left, CHAR1right)) :: 
rest671)) => let val  result = MlyValue.aexp (fn _ => let val  CHAR1 =
 CHAR1 ()
 in ()
end)
 in ( LrTable.NT 20, ( result, CHAR1left, CHAR1right), rest671)
end
|  ( 62, ( ( _, ( MlyValue.selector selector1, _, selector1right)) :: 
( _, ( _, HASH1left, _)) :: rest671)) => let val  result = 
MlyValue.aexp (fn _ => let val  selector1 = selector1 ()
 in ()
end)
 in ( LrTable.NT 20, ( result, HASH1left, selector1right), rest671)

end
|  ( 63, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.elabels 
elabels1, _, _)) :: ( _, ( _, LBRACE1left, _)) :: rest671)) => let
 val  result = MlyValue.aexp (fn _ => let val  elabels1 = elabels1 ()
 in ()
end)
 in ( LrTable.NT 20, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 64, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( _, LBRACE1left, _))
 :: rest671)) => let val  result = MlyValue.aexp (fn _ => ())
 in ( LrTable.NT 20, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 65, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( _, LPAREN1left, _))
 :: rest671)) => let val  result = MlyValue.aexp (fn _ => ())
 in ( LrTable.NT 20, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 66, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.exp_ps 
exp_ps1, _, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let val 
 result = MlyValue.aexp (fn _ => let val  exp_ps1 = exp_ps1 ()
 in ()
end)
 in ( LrTable.NT 20, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 67, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.exp_2c 
exp_2c1, _, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let val 
 result = MlyValue.aexp (fn _ => let val  exp_2c1 = exp_2c1 ()
 in ()
end)
 in ( LrTable.NT 20, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 68, ( ( _, ( _, _, RBRACKET1right)) :: ( _, ( MlyValue.exp_list 
exp_list1, _, _)) :: ( _, ( _, LBRACKET1left, _)) :: rest671)) => let
 val  result = MlyValue.aexp (fn _ => let val  exp_list1 = exp_list1
 ()
 in ()
end)
 in ( LrTable.NT 20, ( result, LBRACKET1left, RBRACKET1right), rest671
)
end
|  ( 69, ( ( _, ( _, _, RBRACKET1right)) :: ( _, ( _, LBRACKET1left, _
)) :: rest671)) => let val  result = MlyValue.aexp (fn _ => ())
 in ( LrTable.NT 20, ( result, LBRACKET1left, RBRACKET1right), rest671
)
end
|  ( 70, ( ( _, ( _, _, RBRACKET1right)) :: ( _, ( MlyValue.exp_list 
exp_list1, _, _)) :: ( _, ( _, VECTORSTART1left, _)) :: rest671)) =>
 let val  result = MlyValue.aexp (fn _ => let val  exp_list1 = 
exp_list1 ()
 in ()
end)
 in ( LrTable.NT 20, ( result, VECTORSTART1left, RBRACKET1right), 
rest671)
end
|  ( 71, ( ( _, ( _, _, RBRACKET1right)) :: ( _, ( _, VECTORSTART1left
, _)) :: rest671)) => let val  result = MlyValue.aexp (fn _ => ())
 in ( LrTable.NT 20, ( result, VECTORSTART1left, RBRACKET1right), 
rest671)
end
|  ( 72, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.exp_ps exp_ps1,
 _, _)) :: _ :: ( _, ( MlyValue.ldecs ldecs1, _, _)) :: ( _, ( _, 
LET1left, _)) :: rest671)) => let val  result = MlyValue.aexp (fn _ =>
 let val  ldecs1 = ldecs1 ()
 val  exp_ps1 = exp_ps1 ()
 in ()
end)
 in ( LrTable.NT 20, ( result, LET1left, END1right), rest671)
end
|  ( 73, ( ( _, ( MlyValue.AQID AQID1, AQID1left, AQID1right)) :: 
rest671)) => let val  result = MlyValue.aexp (fn _ => let val  AQID1 =
 AQID1 ()
 in ()
end)
 in ( LrTable.NT 20, ( result, AQID1left, AQID1right), rest671)
end
|  ( 74, ( ( _, ( MlyValue.quote quote1, quote1left, quote1right)) :: 
rest671)) => let val  result = MlyValue.aexp (fn _ => let val  quote1
 = quote1 ()
 in ()
end)
 in ( LrTable.NT 20, ( result, quote1left, quote1right), rest671)
end
|  ( 75, ( ( _, ( MlyValue.ENDQ ENDQ1, _, ENDQ1right)) :: ( _, ( _, 
BEGINQ1left, _)) :: rest671)) => let val  result = MlyValue.quote (fn
 _ => let val  ENDQ1 = ENDQ1 ()
 in ([])
end)
 in ( LrTable.NT 23, ( result, BEGINQ1left, ENDQ1right), rest671)
end
|  ( 76, ( ( _, ( MlyValue.ENDQ ENDQ1, _, ENDQ1right)) :: ( _, ( 
MlyValue.ot_list ot_list1, _, _)) :: ( _, ( _, BEGINQ1left, _)) :: 
rest671)) => let val  result = MlyValue.quote (fn _ => let val  
ot_list1 = ot_list1 ()
 val  ENDQ1 = ENDQ1 ()
 in ([])
end)
 in ( LrTable.NT 23, ( result, BEGINQ1left, ENDQ1right), rest671)
end
|  ( 77, ( ( _, ( MlyValue.aexp aexp1, _, aexp1right)) :: ( _, ( 
MlyValue.OBJL OBJL1, OBJL1left, _)) :: rest671)) => let val  result = 
MlyValue.ot_list (fn _ => let val  OBJL1 = OBJL1 ()
 val  aexp1 = aexp1 ()
 in ([])
end)
 in ( LrTable.NT 24, ( result, OBJL1left, aexp1right), rest671)
end
|  ( 78, ( ( _, ( MlyValue.ot_list ot_list1, _, ot_list1right)) :: ( _
, ( MlyValue.aexp aexp1, _, _)) :: ( _, ( MlyValue.OBJL OBJL1, 
OBJL1left, _)) :: rest671)) => let val  result = MlyValue.ot_list (fn
 _ => let val  OBJL1 = OBJL1 ()
 val  aexp1 = aexp1 ()
 val  ot_list1 = ot_list1 ()
 in ([])
end)
 in ( LrTable.NT 24, ( result, OBJL1left, ot_list1right), rest671)
end
|  ( 79, ( ( _, ( MlyValue.exp_2c exp_2c1, _, exp_2c1right)) :: _ :: (
 _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result
 = MlyValue.exp_2c (fn _ => let val  (exp as exp1) = exp1 ()
 val  (exp_2c as exp_2c1) = exp_2c1 ()
 in (exp :: exp_2c)
end)
 in ( LrTable.NT 22, ( result, exp1left, exp_2c1right), rest671)
end
|  ( 80, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.exp_2c (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ([exp1, exp2])
end)
 in ( LrTable.NT 22, ( result, exp1left, exp2right), rest671)
end
|  ( 81, ( ( _, ( MlyValue.exp exp1, exp1left, exp1right)) :: rest671)
) => let val  result = MlyValue.exp_list (fn _ => let val  (exp as 
exp1) = exp1 ()
 in ([exp])
end)
 in ( LrTable.NT 21, ( result, exp1left, exp1right), rest671)
end
|  ( 82, ( ( _, ( MlyValue.exp_list exp_list1, _, exp_list1right)) ::
 _ :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val 
 result = MlyValue.exp_list (fn _ => let val  (exp as exp1) = exp1 ()
 val  (exp_list as exp_list1) = exp_list1 ()
 in (exp :: exp_list)
end)
 in ( LrTable.NT 21, ( result, exp1left, exp_list1right), rest671)
end
|  ( 83, ( ( _, ( MlyValue.pat pat2, _, pat2right)) :: _ :: ( _, ( 
MlyValue.pat pat1, pat1left, _)) :: rest671)) => let val  result = 
MlyValue.pat (fn _ => let val  pat1 = pat1 ()
 val  pat2 = pat2 ()
 in (layered(pat1, pat2))
end)
 in ( LrTable.NT 25, ( result, pat1left, pat2right), rest671)
end
|  ( 84, ( ( _, ( MlyValue.ty ty1, _, ty1right)) :: _ :: ( _, ( 
MlyValue.pat pat1, pat1left, _)) :: rest671)) => let val  result = 
MlyValue.pat (fn _ => let val  (pat as pat1) = pat1 ()
 val  (ty as ty1) = ty1 ()
 in (ConstraintPat{pattern=pat, constraint=ty})
end)
 in ( LrTable.NT 25, ( result, pat1left, ty1right), rest671)
end
|  ( 85, ( ( _, ( MlyValue.apats apats1, apats1left, apats1right)) :: 
rest671)) => let val  result = MlyValue.pat (fn _ => let val  (apats
 as apats1) = apats1 ()
 in (FlatAppPat apats)
end)
 in ( LrTable.NT 25, ( result, apats1left, apats1right), rest671)
end
|  ( 86, ( ( _, ( MlyValue.apat' apat'1, apat'1left, apat'1right)) :: 
rest671)) => let val  result = MlyValue.apat (fn _ => let val  (apat'
 as apat'1) = apat'1 ()
 in (apat')
end)
 in ( LrTable.NT 26, ( result, apat'1left, apat'1right), rest671)
end
|  ( 87, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.pat pat1, _,
 _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let val  result = 
MlyValue.apat (fn _ => let val  (pat as pat1) = pat1 ()
 in (pat)
end)
 in ( LrTable.NT 26, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 88, ( ( _, ( MlyValue.id id1, id1left, id1right)) :: rest671)) =>
 let val  result = MlyValue.apat (fn _ => let val  (id as id1) = id1
 ()
 in (VarPat [id])
end)
 in ( LrTable.NT 26, ( result, id1left, id1right), rest671)
end
|  ( 89, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( _, LPAREN1left, _))
 :: rest671)) => let val  result = MlyValue.apat (fn _ => (unitPat))
 in ( LrTable.NT 26, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 90, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.pat_list 
pat_list1, _, _)) :: _ :: ( _, ( MlyValue.pat pat1, _, _)) :: ( _, ( _
, LPAREN1left, _)) :: rest671)) => let val  result = MlyValue.apat (fn
 _ => let val  (pat as pat1) = pat1 ()
 val  (pat_list as pat_list1) = pat_list1 ()
 in (TuplePat(pat :: pat_list))
end)
 in ( LrTable.NT 26, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 91, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.or_pat_list 
or_pat_list1, _, _)) :: _ :: ( _, ( MlyValue.pat pat1, _, _)) :: ( _, 
( _, LPAREN1left, _)) :: rest671)) => let val  result = MlyValue.apat
 (fn _ => let val  (pat as pat1) = pat1 ()
 val  (or_pat_list as or_pat_list1) = or_pat_list1 ()
 in (OrPat(pat :: or_pat_list))
end)
 in ( LrTable.NT 26, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 92, ( ( _, ( MlyValue.ident ident1, _, ident1right)) :: ( _, ( _,
 OP1left, _)) :: rest671)) => let val  result = MlyValue.apat' (fn _
 => let val  (ident as ident1) = ident1 ()
 in (VarPat [ident])
end)
 in ( LrTable.NT 27, ( result, OP1left, ident1right), rest671)
end
|  ( 93, ( ( _, ( MlyValue.qid qid1, _, qid1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.apat' (fn _ => let val  (ID as ID1) = ID1 ()
 val  (qid as qid1) = qid1 ()
 in (VarPat (ID :: qid))
end)
 in ( LrTable.NT 27, ( result, ID1left, qid1right), rest671)
end
|  ( 94, ( ( _, ( MlyValue.int int1, int1left, int1right)) :: rest671)
) => let val  result = MlyValue.apat' (fn _ => let val  (int as int1)
 = int1 ()
 in (IntPat int)
end)
 in ( LrTable.NT 27, ( result, int1left, int1right), rest671)
end
|  ( 95, ( ( _, ( MlyValue.WORD WORD1, WORD1left, WORD1right)) :: 
rest671)) => let val  result = MlyValue.apat' (fn _ => let val  (WORD
 as WORD1) = WORD1 ()
 in (WordPat WORD)
end)
 in ( LrTable.NT 27, ( result, WORD1left, WORD1right), rest671)
end
|  ( 96, ( ( _, ( MlyValue.STRING STRING1, STRING1left, STRING1right))
 :: rest671)) => let val  result = MlyValue.apat' (fn _ => let val  (
STRING as STRING1) = STRING1 ()
 in (StringPat STRING)
end)
 in ( LrTable.NT 27, ( result, STRING1left, STRING1right), rest671)

end
|  ( 97, ( ( _, ( MlyValue.CHAR CHAR1, CHAR1left, CHAR1right)) :: 
rest671)) => let val  result = MlyValue.apat' (fn _ => let val  (CHAR
 as CHAR1) = CHAR1 ()
 in (CharPat CHAR)
end)
 in ( LrTable.NT 27, ( result, CHAR1left, CHAR1right), rest671)
end
|  ( 98, ( ( _, ( _, WILD1left, WILD1right)) :: rest671)) => let val  
result = MlyValue.apat' (fn _ => (WildPat))
 in ( LrTable.NT 27, ( result, WILD1left, WILD1right), rest671)
end
|  ( 99, ( ( _, ( _, _, RBRACKET1right)) :: ( _, ( _, LBRACKET1left, _
)) :: rest671)) => let val  result = MlyValue.apat' (fn _ => (
ListPat nil))
 in ( LrTable.NT 27, ( result, LBRACKET1left, RBRACKET1right), rest671
)
end
|  ( 100, ( ( _, ( _, _, RBRACKET1right)) :: ( _, ( MlyValue.pat_list 
pat_list1, _, _)) :: ( _, ( _, LBRACKET1left, _)) :: rest671)) => let
 val  result = MlyValue.apat' (fn _ => let val  (pat_list as pat_list1
) = pat_list1 ()
 in (ListPat pat_list)
end)
 in ( LrTable.NT 27, ( result, LBRACKET1left, RBRACKET1right), rest671
)
end
|  ( 101, ( ( _, ( _, _, RBRACKET1right)) :: ( _, ( _, 
VECTORSTART1left, _)) :: rest671)) => let val  result = MlyValue.apat'
 (fn _ => (VectorPat nil))
 in ( LrTable.NT 27, ( result, VECTORSTART1left, RBRACKET1right), 
rest671)
end
|  ( 102, ( ( _, ( _, _, RBRACKET1right)) :: ( _, ( MlyValue.pat_list 
pat_list1, _, _)) :: ( _, ( _, VECTORSTART1left, _)) :: rest671)) =>
 let val  result = MlyValue.apat' (fn _ => let val  (pat_list as 
pat_list1) = pat_list1 ()
 in (VectorPat pat_list)
end)
 in ( LrTable.NT 27, ( result, VECTORSTART1left, RBRACKET1right), 
rest671)
end
|  ( 103, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( _, LBRACE1left, _))
 :: rest671)) => let val  result = MlyValue.apat' (fn _ => (unitPat))
 in ( LrTable.NT 27, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 104, ( ( _, ( _, _, (RBRACEright as RBRACE1right))) :: ( _, ( 
MlyValue.plabels plabels1, _, _)) :: ( _, ( _, (LBRACEleft as 
LBRACE1left), _)) :: rest671)) => let val  result = MlyValue.apat' (fn
 _ => let val  (plabels as plabels1) = plabels1 ()
 in (
let val (d, f) = plabels
         in
           MarkPat
               (RecordPat{def = d, flexibility = f}, (LBRACEleft, RBRACEright))
         end
)
end)
 in ( LrTable.NT 27, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 105, ( ( _, ( MlyValue.pat pat1, _, pat1right)) :: _ :: ( _, ( 
MlyValue.selector selector1, selector1left, _)) :: rest671)) => let
 val  result = MlyValue.plabel (fn _ => let val  (selector as 
selector1) = selector1 ()
 val  (pat as pat1) = pat1 ()
 in ((selector, pat))
end)
 in ( LrTable.NT 28, ( result, selector1left, pat1right), rest671)
end
|  ( 106, ( ( _, ( MlyValue.ID ID1, ID1left, ID1right)) :: rest671))
 => let val  result = MlyValue.plabel (fn _ => let val  (ID as ID1) = 
ID1 ()
 in (ID, VarPat [ID])
end)
 in ( LrTable.NT 28, ( result, ID1left, ID1right), rest671)
end
|  ( 107, ( ( _, ( MlyValue.pat pat1, _, pat1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.plabel (fn _ => let val  (ID as ID1) = ID1 ()
 val  (pat as pat1) = pat1 ()
 in (ID, LayeredPat{varPat = VarPat [ID], expPat = pat})
end)
 in ( LrTable.NT 28, ( result, ID1left, pat1right), rest671)
end
|  ( 108, ( ( _, ( MlyValue.ty ty1, _, ty1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.plabel (fn _ => let val  (ID as ID1) = ID1 ()
 val  (ty as ty1) = ty1 ()
 in (ID, ConstraintPat{pattern = VarPat [ID], constraint = ty})
end)
 in ( LrTable.NT 28, ( result, ID1left, ty1right), rest671)
end
|  ( 109, ( ( _, ( MlyValue.pat pat1, _, pat1right)) :: _ :: ( _, ( 
MlyValue.ty ty1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, ID1left, _))
 :: rest671)) => let val  result = MlyValue.plabel (fn _ => let val  (
ID as ID1) = ID1 ()
 val  (ty as ty1) = ty1 ()
 val  (pat as pat1) = pat1 ()
 in (

           ID,
           LayeredPat
           {
             varPat = ConstraintPat{pattern = VarPat [ID], constraint = ty},
             expPat=pat
           }
         
)
end)
 in ( LrTable.NT 28, ( result, ID1left, pat1right), rest671)
end
|  ( 110, ( ( _, ( MlyValue.plabels plabels1, _, plabels1right)) :: _
 :: ( _, ( MlyValue.plabel plabel1, plabel1left, _)) :: rest671)) =>
 let val  result = MlyValue.plabels (fn _ => let val  (plabel as 
plabel1) = plabel1 ()
 val  (plabels as plabels1) = plabels1 ()
 in (let val (a, (b, fx)) = (plabel, plabels) in (a :: b, fx) end)
end
)
 in ( LrTable.NT 29, ( result, plabel1left, plabels1right), rest671)

end
|  ( 111, ( ( _, ( MlyValue.plabel plabel1, plabel1left, plabel1right)
) :: rest671)) => let val  result = MlyValue.plabels (fn _ => let val 
 (plabel as plabel1) = plabel1 ()
 in ([plabel], false)
end)
 in ( LrTable.NT 29, ( result, plabel1left, plabel1right), rest671)

end
|  ( 112, ( ( _, ( _, DOTDOTDOT1left, DOTDOTDOT1right)) :: rest671))
 => let val  result = MlyValue.plabels (fn _ => (nil, true))
 in ( LrTable.NT 29, ( result, DOTDOTDOT1left, DOTDOTDOT1right), 
rest671)
end
|  ( 113, ( ( _, ( MlyValue.pat pat1, pat1left, pat1right)) :: rest671
)) => let val  result = MlyValue.pat_list (fn _ => let val  (pat as 
pat1) = pat1 ()
 in ([pat])
end)
 in ( LrTable.NT 31, ( result, pat1left, pat1right), rest671)
end
|  ( 114, ( ( _, ( MlyValue.pat_list pat_list1, _, pat_list1right)) ::
 _ :: ( _, ( MlyValue.pat pat1, pat1left, _)) :: rest671)) => let val 
 result = MlyValue.pat_list (fn _ => let val  (pat as pat1) = pat1 ()
 val  (pat_list as pat_list1) = pat_list1 ()
 in (pat :: pat_list)
end)
 in ( LrTable.NT 31, ( result, pat1left, pat_list1right), rest671)
end
|  ( 115, ( ( _, ( MlyValue.pat pat1, pat1left, pat1right)) :: rest671
)) => let val  result = MlyValue.or_pat_list (fn _ => let val  (pat
 as pat1) = pat1 ()
 in ([pat])
end)
 in ( LrTable.NT 32, ( result, pat1left, pat1right), rest671)
end
|  ( 116, ( ( _, ( MlyValue.or_pat_list or_pat_list1, _, 
or_pat_list1right)) :: _ :: ( _, ( MlyValue.pat pat1, pat1left, _)) ::
 rest671)) => let val  result = MlyValue.or_pat_list (fn _ => let val 
 (pat as pat1) = pat1 ()
 val  (or_pat_list as or_pat_list1) = or_pat_list1 ()
 in (pat :: or_pat_list)
end)
 in ( LrTable.NT 32, ( result, pat1left, or_pat_list1right), rest671)

end
|  ( 117, ( ( _, ( MlyValue.vb vb2, _, vb2right)) :: _ :: ( _, ( 
MlyValue.vb vb1, vb1left, _)) :: rest671)) => let val  result = 
MlyValue.vb (fn _ => let val  vb1 = vb1 ()
 val  vb2 = vb2 ()
 in (vb1 @ vb2)
end)
 in ( LrTable.NT 33, ( result, vb1left, vb2right), rest671)
end
|  ( 118, ( ( _, ( MlyValue.exp exp1, _, (expright as exp1right))) ::
 _ :: ( _, ( MlyValue.pat pat1, patleft, _)) :: ( _, ( _, LAZY1left, _
)) :: rest671)) => let val  result = MlyValue.vb (fn _ => let val  (
pat as pat1) = pat1 ()
 val  (exp as exp1) = exp1 ()
 in (
[MarkVb(Vb{exp = exp, pat = pat, lazyp = true}, (patleft, expright))])

end)
 in ( LrTable.NT 33, ( result, LAZY1left, exp1right), rest671)
end
|  ( 119, ( ( _, ( MlyValue.exp exp1, _, (expright as exp1right))) ::
 _ :: ( _, ( MlyValue.pat pat1, (patleft as pat1left), _)) :: rest671)
) => let val  result = MlyValue.vb (fn _ => let val  (pat as pat1) = 
pat1 ()
 val  (exp as exp1) = exp1 ()
 in (
[MarkVb(Vb{exp = exp, pat = pat, lazyp = false}, (patleft, expright))]
)
end)
 in ( LrTable.NT 33, ( result, pat1left, exp1right), rest671)
end
|  ( 120, ( rest671)) => let val  result = MlyValue.constraint (fn _
 => (NONE))
 in ( LrTable.NT 34, ( result, defaultPos, defaultPos), rest671)
end
|  ( 121, ( ( _, ( MlyValue.ty ty1, _, ty1right)) :: ( _, ( _, 
COLON1left, _)) :: rest671)) => let val  result = MlyValue.constraint
 (fn _ => let val  (ty as ty1) = ty1 ()
 in (SOME ty)
end)
 in ( LrTable.NT 34, ( result, COLON1left, ty1right), rest671)
end
|  ( 122, ( ( _, ( MlyValue.exp exp1, _, (expright as exp1right))) ::
 _ :: ( _, ( MlyValue.constraint constraint1, _, _)) :: ( _, ( 
MlyValue.id id1, (idleft as id1left), _)) :: rest671)) => let val  
result = MlyValue.rvb (fn _ => let val  (id as id1) = id1 ()
 val  (constraint as constraint1) = constraint1 ()
 val  (exp as exp1) = exp1 ()
 in (
[
         MarkRvb
         (
           Rvb{var = id, resultty = constraint, exp = exp, lazyp = false},
           (idleft, expright)
         )
       ]
)
end)
 in ( LrTable.NT 35, ( result, id1left, exp1right), rest671)
end
|  ( 123, ( ( _, ( MlyValue.exp exp1, _, (expright as exp1right))) ::
 _ :: ( _, ( MlyValue.constraint constraint1, _, _)) :: ( _, ( 
MlyValue.id id1, _, _)) :: ( _, ( _, (OPleft as OP1left), _)) :: 
rest671)) => let val  result = MlyValue.rvb (fn _ => let val  (id as 
id1) = id1 ()
 val  (constraint as constraint1) = constraint1 ()
 val  (exp as exp1) = exp1 ()
 in (
[
         MarkRvb
         (
           Rvb{var = id, resultty = constraint, exp = exp, lazyp = false},
           (OPleft, expright)
         )
       ]
)
end)
 in ( LrTable.NT 35, ( result, OP1left, exp1right), rest671)
end
|  ( 124, ( ( _, ( MlyValue.rvb rvb2, _, rvb2right)) :: _ :: ( _, ( 
MlyValue.rvb rvb1, rvb1left, _)) :: rest671)) => let val  result = 
MlyValue.rvb (fn _ => let val  rvb1 = rvb1 ()
 val  rvb2 = rvb2 ()
 in (rvb1 @ rvb2)
end)
 in ( LrTable.NT 35, ( result, rvb1left, rvb2right), rest671)
end
|  ( 125, ( ( _, ( MlyValue.exp exp1, _, (expright as exp1right))) ::
 _ :: ( _, ( MlyValue.constraint constraint1, _, _)) :: ( _, ( 
MlyValue.id id1, idleft, _)) :: ( _, ( _, LAZY1left, _)) :: rest671))
 => let val  result = MlyValue.rvb (fn _ => let val  (id as id1) = id1
 ()
 val  (constraint as constraint1) = constraint1 ()
 val  (exp as exp1) = exp1 ()
 in (
[
         MarkRvb
         (
           Rvb{var = id, resultty = constraint, exp = exp, lazyp = true},
           (idleft, expright)
         )
       ]
)
end)
 in ( LrTable.NT 35, ( result, LAZY1left, exp1right), rest671)
end
|  ( 126, ( ( _, ( MlyValue.exp exp1, _, (expright as exp1right))) ::
 _ :: ( _, ( MlyValue.constraint constraint1, _, _)) :: ( _, ( 
MlyValue.id id1, _, _)) :: ( _, ( _, OPleft, _)) :: ( _, ( _, 
LAZY1left, _)) :: rest671)) => let val  result = MlyValue.rvb (fn _ =>
 let val  (id as id1) = id1 ()
 val  (constraint as constraint1) = constraint1 ()
 val  (exp as exp1) = exp1 ()
 in (
[
         MarkRvb
         (
           Rvb{var = id, resultty = constraint, exp = exp, lazyp = true},
           (OPleft, expright)
         )
       ]
)
end)
 in ( LrTable.NT 35, ( result, LAZY1left, exp1right), rest671)
end
|  ( 127, ( ( _, ( MlyValue.clause clause1, clause1left, clause1right)
) :: rest671)) => let val  result = MlyValue.fb' (fn _ => let val  (
clause as clause1) = clause1 ()
 in ([clause])
end)
 in ( LrTable.NT 36, ( result, clause1left, clause1right), rest671)

end
|  ( 128, ( ( _, ( MlyValue.fb' fb'1, _, fb'1right)) :: _ :: ( _, ( 
MlyValue.clause clause1, clause1left, _)) :: rest671)) => let val  
result = MlyValue.fb' (fn _ => let val  (clause as clause1) = clause1
 ()
 val  (fb' as fb'1) = fb'1 ()
 in (clause :: fb')
end)
 in ( LrTable.NT 36, ( result, clause1left, fb'1right), rest671)
end
|  ( 129, ( ( _, ( MlyValue.fb' fb'1, (fb'left as fb'1left), (fb'right
 as fb'1right))) :: rest671)) => let val  result = MlyValue.fb (fn _
 => let val  (fb' as fb'1) = fb'1 ()
 in ([MarkFb(Fb(fb', false), (fb'left, fb'right))])
end)
 in ( LrTable.NT 37, ( result, fb'1left, fb'1right), rest671)
end
|  ( 130, ( ( _, ( MlyValue.fb' fb'1, fb'left, (fb'right as fb'1right)
)) :: ( _, ( _, LAZY1left, _)) :: rest671)) => let val  result = 
MlyValue.fb (fn _ => let val  (fb' as fb'1) = fb'1 ()
 in ([MarkFb(Fb(fb', true), (fb'left, fb'right))])
end)
 in ( LrTable.NT 37, ( result, LAZY1left, fb'1right), rest671)
end
|  ( 131, ( ( _, ( MlyValue.fb fb1, _, fb1right)) :: _ :: ( _, ( 
MlyValue.fb' fb'1, (fb'left as fb'1left), fb'right)) :: rest671)) =>
 let val  result = MlyValue.fb (fn _ => let val  (fb' as fb'1) = fb'1
 ()
 val  (fb as fb1) = fb1 ()
 in (MarkFb(Fb(fb', false), (fb'left, fb'right)) :: fb)
end)
 in ( LrTable.NT 37, ( result, fb'1left, fb1right), rest671)
end
|  ( 132, ( ( _, ( MlyValue.fb fb1, _, fb1right)) :: _ :: ( _, ( 
MlyValue.fb' fb'1, fb'left, fb'right)) :: ( _, ( _, LAZY1left, _)) :: 
rest671)) => let val  result = MlyValue.fb (fn _ => let val  (fb' as 
fb'1) = fb'1 ()
 val  (fb as fb1) = fb1 ()
 in (MarkFb(Fb(fb', true), (fb'left, fb'right)) :: fb)
end)
 in ( LrTable.NT 37, ( result, LAZY1left, fb1right), rest671)
end
|  ( 133, ( ( _, ( MlyValue.apat apat1, apat1left, apat1right)) :: 
rest671)) => let val  result = MlyValue.apats (fn _ => let val  (apat
 as apat1) = apat1 ()
 in ([apat])
end)
 in ( LrTable.NT 38, ( result, apat1left, apat1right), rest671)
end
|  ( 134, ( ( _, ( MlyValue.apats apats1, _, apats1right)) :: ( _, ( 
MlyValue.apat apat1, apat1left, _)) :: rest671)) => let val  result = 
MlyValue.apats (fn _ => let val  (apat as apat1) = apat1 ()
 val  (apats as apats1) = apats1 ()
 in (apat :: apats)
end)
 in ( LrTable.NT 38, ( result, apat1left, apats1right), rest671)
end
|  ( 135, ( ( _, ( MlyValue.exp exp1, expleft, (expright as exp1right)
)) :: _ :: ( _, ( MlyValue.constraint constraint1, _, _)) :: ( _, ( 
MlyValue.apats apats1, apats1left, _)) :: rest671)) => let val  result
 = MlyValue.clause (fn _ => let val  (apats as apats1) = apats1 ()
 val  (constraint as constraint1) = constraint1 ()
 val  (exp as exp1) = exp1 ()
 in (
Clause
          {
            pats = apats,
            resultty = constraint,
            exp = markexp(exp, expleft, expright)
          }
)
end)
 in ( LrTable.NT 39, ( result, apats1left, exp1right), rest671)
end
|  ( 136, ( ( _, ( MlyValue.ty ty1, tyleft, (tyright as ty1right))) ::
 ( _, ( MlyValue.defining_format_comment_list 
defining_format_comment_list1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1,
 _, _)) :: ( _, ( MlyValue.tyvars tyvars1, _, _)) :: ( _, ( 
MlyValue.inner_header_format_comment_list 
inner_header_format_comment_list1, 
inner_header_format_comment_list1left, _)) :: rest671)) => let val  
result = MlyValue.tb (fn _ => let val  (
inner_header_format_comment_list as inner_header_format_comment_list1)
 = inner_header_format_comment_list1 ()
 val  (tyvars as tyvars1) = tyvars1 ()
 val  (ID as ID1) = ID1 ()
 val  (defining_format_comment_list as defining_format_comment_list1)
 = defining_format_comment_list1 ()
 val  (ty as ty1) = ty1 ()
 in (
[
        MarkTb
        (
          Tb
          {
            tyvars = tyvars,
            tyConName = ID,
            ty = ty,
            formatComments = defining_format_comment_list,
            innerHeaderFormatComments = inner_header_format_comment_list
          },
          (tyleft, tyright)
        )
      ]
)
end)
 in ( LrTable.NT 40, ( result, inner_header_format_comment_list1left, 
ty1right), rest671)
end
|  ( 137, ( ( _, ( MlyValue.tb tb2, _, tb2right)) :: _ :: ( _, ( 
MlyValue.tb tb1, tb1left, _)) :: rest671)) => let val  result = 
MlyValue.tb (fn _ => let val  tb1 = tb1 ()
 val  tb2 = tb2 ()
 in (tb1 @ tb2)
end)
 in ( LrTable.NT 40, ( result, tb1left, tb2right), rest671)
end
|  ( 138, ( ( _, ( MlyValue.TYVAR TYVAR1, (TYVARleft as TYVAR1left), (
TYVARright as TYVAR1right))) :: rest671)) => let val  result = 
MlyValue.tyvars (fn _ => let val  (TYVAR as TYVAR1) = TYVAR1 ()
 in ([MarkTyv(Tyv(TYVAR), (TYVARleft, TYVARright))])
end)
 in ( LrTable.NT 41, ( result, TYVAR1left, TYVAR1right), rest671)
end
|  ( 139, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.tyvar_pc 
tyvar_pc1, _, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let
 val  result = MlyValue.tyvars (fn _ => let val  (tyvar_pc as 
tyvar_pc1) = tyvar_pc1 ()
 in (tyvar_pc)
end)
 in ( LrTable.NT 41, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 140, ( rest671)) => let val  result = MlyValue.tyvars (fn _ => (
nil))
 in ( LrTable.NT 41, ( result, defaultPos, defaultPos), rest671)
end
|  ( 141, ( ( _, ( MlyValue.TYVAR TYVAR1, (TYVARleft as TYVAR1left), (
TYVARright as TYVAR1right))) :: rest671)) => let val  result = 
MlyValue.tyvarseq (fn _ => let val  (TYVAR as TYVAR1) = TYVAR1 ()
 in ([MarkTyv(Tyv(TYVAR), (TYVARleft, TYVARright))])
end)
 in ( LrTable.NT 42, ( result, TYVAR1left, TYVAR1right), rest671)
end
|  ( 142, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.tyvar_pc 
tyvar_pc1, _, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let
 val  result = MlyValue.tyvarseq (fn _ => let val  (tyvar_pc as 
tyvar_pc1) = tyvar_pc1 ()
 in (tyvar_pc)
end)
 in ( LrTable.NT 42, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 143, ( ( _, ( MlyValue.TYVAR TYVAR1, (TYVARleft as TYVAR1left), (
TYVARright as TYVAR1right))) :: rest671)) => let val  result = 
MlyValue.tyvar_pc (fn _ => let val  (TYVAR as TYVAR1) = TYVAR1 ()
 in ([MarkTyv(Tyv(TYVAR), (TYVARleft, TYVARright))])
end)
 in ( LrTable.NT 43, ( result, TYVAR1left, TYVAR1right), rest671)
end
|  ( 144, ( ( _, ( MlyValue.tyvar_pc tyvar_pc1, _, tyvar_pc1right)) ::
 _ :: ( _, ( MlyValue.TYVAR TYVAR1, (TYVARleft as TYVAR1left), 
TYVARright)) :: rest671)) => let val  result = MlyValue.tyvar_pc (fn _
 => let val  (TYVAR as TYVAR1) = TYVAR1 ()
 val  (tyvar_pc as tyvar_pc1) = tyvar_pc1 ()
 in (MarkTyv(Tyv(TYVAR), (TYVARleft, TYVARright)) :: tyvar_pc)
end)
 in ( LrTable.NT 43, ( result, TYVAR1left, tyvar_pc1right), rest671)

end
|  ( 145, ( ( _, ( MlyValue.db db2, _, db2right)) :: _ :: ( _, ( 
MlyValue.db db1, db1left, _)) :: rest671)) => let val  result = 
MlyValue.db (fn _ => let val  db1 = db1 ()
 val  db2 = db2 ()
 in (db1 @ db2)
end)
 in ( LrTable.NT 44, ( result, db1left, db2right), rest671)
end
|  ( 146, ( ( _, ( MlyValue.dbrhs dbrhs1, _, dbrhs1right)) :: _ :: ( _
, ( MlyValue.ident ident1, _, _)) :: ( _, ( MlyValue.tyvars tyvars1, _
, _)) :: ( _, ( MlyValue.inner_header_format_comment_list 
inner_header_format_comment_list1, 
inner_header_format_comment_list1left, _)) :: rest671)) => let val  
result = MlyValue.db (fn _ => let val  (
inner_header_format_comment_list as inner_header_format_comment_list1)
 = inner_header_format_comment_list1 ()
 val  (tyvars as tyvars1) = tyvars1 ()
 val  (ident as ident1) = ident1 ()
 val  (dbrhs as dbrhs1) = dbrhs1 ()
 in (
[Db{tyConName = ident, tyvars = tyvars, rhs = dbrhs, lazyp = false,
          innerHeaderFormatComments = inner_header_format_comment_list }]
)
end)
 in ( LrTable.NT 44, ( result, inner_header_format_comment_list1left, 
dbrhs1right), rest671)
end
|  ( 147, ( ( _, ( MlyValue.dbrhs dbrhs1, _, dbrhs1right)) :: _ :: ( _
, ( MlyValue.ident ident1, _, _)) :: ( _, ( MlyValue.tyvars tyvars1, _
, _)) :: _ :: ( _, ( MlyValue.inner_header_format_comment_list 
inner_header_format_comment_list1, 
inner_header_format_comment_list1left, _)) :: rest671)) => let val  
result = MlyValue.db (fn _ => let val  (
inner_header_format_comment_list as inner_header_format_comment_list1)
 = inner_header_format_comment_list1 ()
 val  (tyvars as tyvars1) = tyvars1 ()
 val  (ident as ident1) = ident1 ()
 val  (dbrhs as dbrhs1) = dbrhs1 ()
 in (
[Db{tyConName = ident, tyvars = tyvars, rhs = dbrhs, lazyp = true,
          innerHeaderFormatComments = inner_header_format_comment_list }]
)
end)
 in ( LrTable.NT 44, ( result, inner_header_format_comment_list1left, 
dbrhs1right), rest671)
end
|  ( 148, ( ( _, ( MlyValue.constrs constrs1, constrs1left, 
constrs1right)) :: rest671)) => let val  result = MlyValue.dbrhs (fn _
 => let val  (constrs as constrs1) = constrs1 ()
 in (Constrs constrs)
end)
 in ( LrTable.NT 45, ( result, constrs1left, constrs1right), rest671)

end
|  ( 149, ( ( _, ( MlyValue.tycon tycon1, _, tycon1right)) :: ( _, ( _
, DATATYPE1left, _)) :: rest671)) => let val  result = MlyValue.dbrhs
 (fn _ => let val  (tycon as tycon1) = tycon1 ()
 in (Repl tycon)
end)
 in ( LrTable.NT 45, ( result, DATATYPE1left, tycon1right), rest671)

end
|  ( 150, ( ( _, ( MlyValue.constr constr1, constr1left, constr1right)
) :: rest671)) => let val  result = MlyValue.constrs (fn _ => let val 
 (constr as constr1) = constr1 ()
 in ([constr])
end)
 in ( LrTable.NT 46, ( result, constr1left, constr1right), rest671)

end
|  ( 151, ( ( _, ( MlyValue.constrs constrs1, _, constrs1right)) :: _
 :: ( _, ( MlyValue.constr constr1, constr1left, _)) :: rest671)) =>
 let val  result = MlyValue.constrs (fn _ => let val  (constr as 
constr1) = constr1 ()
 val  (constrs as constrs1) = constrs1 ()
 in (constr :: constrs)
end)
 in ( LrTable.NT 46, ( result, constr1left, constrs1right), rest671)

end
|  ( 152, ( ( _, ( MlyValue.ident ident1, _, ident1right)) :: ( _, ( 
MlyValue.op_op op_op1, _, _)) :: ( _, ( 
MlyValue.defining_format_comment_list defining_format_comment_list1, 
defining_format_comment_list1left, _)) :: rest671)) => let val  result
 = MlyValue.constr (fn _ => let val  (defining_format_comment_list as 
defining_format_comment_list1) = defining_format_comment_list1 ()
 val  op_op1 = op_op1 ()
 val  (ident as ident1) = ident1 ()
 in (
{
            formatComments = defining_format_comment_list,
            valConName = ident,
            argTypeOpt = NONE
          }
)
end)
 in ( LrTable.NT 47, ( result, defining_format_comment_list1left, 
ident1right), rest671)
end
|  ( 153, ( ( _, ( MlyValue.ty ty1, _, ty1right)) :: _ :: ( _, ( 
MlyValue.ident ident1, _, _)) :: ( _, ( MlyValue.op_op op_op1, _, _))
 :: ( _, ( MlyValue.defining_format_comment_list 
defining_format_comment_list1, defining_format_comment_list1left, _))
 :: rest671)) => let val  result = MlyValue.constr (fn _ => let val  (
defining_format_comment_list as defining_format_comment_list1) = 
defining_format_comment_list1 ()
 val  op_op1 = op_op1 ()
 val  (ident as ident1) = ident1 ()
 val  (ty as ty1) = ty1 ()
 in (
{
            formatComments = defining_format_comment_list,
            valConName = ident,
            argTypeOpt = SOME ty
          }
)
end)
 in ( LrTable.NT 47, ( result, defining_format_comment_list1left, 
ty1right), rest671)
end
|  ( 154, ( ( _, ( MlyValue.eb eb1, eb1left, eb1right)) :: rest671))
 => let val  result = MlyValue.ebs (fn _ => let val  (eb as eb1) = eb1
 ()
 in ([eb])
end)
 in ( LrTable.NT 48, ( result, eb1left, eb1right), rest671)
end
|  ( 155, ( ( _, ( MlyValue.ebs ebs1, _, ebs1right)) :: _ :: ( _, ( 
MlyValue.eb eb1, eb1left, _)) :: rest671)) => let val  result = 
MlyValue.ebs (fn _ => let val  (eb as eb1) = eb1 ()
 val  (ebs as ebs1) = ebs1 ()
 in (eb :: ebs)
end)
 in ( LrTable.NT 48, ( result, eb1left, ebs1right), rest671)
end
|  ( 156, ( ( _, ( MlyValue.ident ident1, _, ident1right)) :: ( _, ( 
MlyValue.op_op op_op1, _, _)) :: ( _, ( 
MlyValue.defining_format_comment_list_with_inners 
defining_format_comment_list_with_inners1, 
defining_format_comment_list_with_inners1left, _)) :: rest671)) => let
 val  result = MlyValue.eb (fn _ => let val  (
defining_format_comment_list_with_inners as 
defining_format_comment_list_with_inners1) = 
defining_format_comment_list_with_inners1 ()
 val  op_op1 = op_op1 ()
 val  (ident as ident1) = ident1 ()
 in (

        EbGen
        {
          formatComments =
              #2 defining_format_comment_list_with_inners,
          innerHeaderFormatComments =
              #1 defining_format_comment_list_with_inners,
          exn = (ident),
          etype = NONE
        }
      
)
end)
 in ( LrTable.NT 49, ( result, 
defining_format_comment_list_with_inners1left, ident1right), rest671)

end
|  ( 157, ( ( _, ( MlyValue.ty ty1, _, ty1right)) :: _ :: ( _, ( 
MlyValue.ident ident1, _, _)) :: ( _, ( MlyValue.op_op op_op1, _, _))
 :: ( _, ( MlyValue.defining_format_comment_list_with_inners 
defining_format_comment_list_with_inners1, 
defining_format_comment_list_with_inners1left, _)) :: rest671)) => let
 val  result = MlyValue.eb (fn _ => let val  (
defining_format_comment_list_with_inners as 
defining_format_comment_list_with_inners1) = 
defining_format_comment_list_with_inners1 ()
 val  op_op1 = op_op1 ()
 val  (ident as ident1) = ident1 ()
 val  (ty as ty1) = ty1 ()
 in (

        EbGen
        {
          formatComments =
              #2 defining_format_comment_list_with_inners,
          innerHeaderFormatComments =
              #1 defining_format_comment_list_with_inners,
          exn = (ident),
          etype = SOME ty
        }
      
)
end)
 in ( LrTable.NT 49, ( result, 
defining_format_comment_list_with_inners1left, ty1right), rest671)
end
|  ( 158, ( ( _, ( MlyValue.qid qid1, _, qid1right)) :: _ :: ( _, ( 
MlyValue.ident ident1, _, _)) :: ( _, ( MlyValue.op_op op_op1, _, _))
 :: ( _, ( MlyValue.defining_format_comment_list_with_inners 
defining_format_comment_list_with_inners1, 
defining_format_comment_list_with_inners1left, _)) :: rest671)) => let
 val  result = MlyValue.eb (fn _ => let val  (
defining_format_comment_list_with_inners as 
defining_format_comment_list_with_inners1) = 
defining_format_comment_list_with_inners1 ()
 val  op_op1 = op_op1 ()
 val  (ident as ident1) = ident1 ()
 val  (qid as qid1) = qid1 ()
 in (

        EbDef
        {
          formatComments =
              #2 defining_format_comment_list_with_inners,
          innerHeaderFormatComments =
              #1 defining_format_comment_list_with_inners,
          exn = ident,
          edef = qid
        }
      
)
end)
 in ( LrTable.NT 49, ( result, 
defining_format_comment_list_with_inners1left, qid1right), rest671)

end
|  ( 159, ( ( _, ( MlyValue.qid qid1, qid1left, qid1right)) :: rest671
)) => let val  result = MlyValue.qid_p (fn _ => let val  (qid as qid1)
 = qid1 ()
 in ([qid])
end)
 in ( LrTable.NT 50, ( result, qid1left, qid1right), rest671)
end
|  ( 160, ( ( _, ( MlyValue.qid_p qid_p1, _, qid_p1right)) :: ( _, ( 
MlyValue.qid qid1, qid1left, _)) :: rest671)) => let val  result = 
MlyValue.qid_p (fn _ => let val  (qid as qid1) = qid1 ()
 val  (qid_p as qid_p1) = qid_p1 ()
 in (qid :: qid_p)
end)
 in ( LrTable.NT 50, ( result, qid1left, qid_p1right), rest671)
end
|  ( 161, ( ( _, ( _, INFIX1left, INFIX1right)) :: rest671)) => let
 val  result = MlyValue.fixity (fn _ => (INfix 0))
 in ( LrTable.NT 51, ( result, INFIX1left, INFIX1right), rest671)
end
|  ( 162, ( ( _, ( MlyValue.int int1, _, int1right)) :: ( _, ( _, 
INFIX1left, _)) :: rest671)) => let val  result = MlyValue.fixity (fn
 _ => let val  (int as int1) = int1 ()
 in (INfix int)
end)
 in ( LrTable.NT 51, ( result, INFIX1left, int1right), rest671)
end
|  ( 163, ( ( _, ( _, INFIXR1left, INFIXR1right)) :: rest671)) => let
 val  result = MlyValue.fixity (fn _ => (INfixR 0))
 in ( LrTable.NT 51, ( result, INFIXR1left, INFIXR1right), rest671)

end
|  ( 164, ( ( _, ( MlyValue.int int1, _, int1right)) :: ( _, ( _, 
INFIXR1left, _)) :: rest671)) => let val  result = MlyValue.fixity (fn
 _ => let val  (int as int1) = int1 ()
 in (INfixR int)
end)
 in ( LrTable.NT 51, ( result, INFIXR1left, int1right), rest671)
end
|  ( 165, ( ( _, ( _, NONFIX1left, NONFIX1right)) :: rest671)) => let
 val  result = MlyValue.fixity (fn _ => (NONfix))
 in ( LrTable.NT 51, ( result, NONFIX1left, NONFIX1right), rest671)

end
|  ( 166, ( ( _, ( MlyValue.vb vb1, _, vb1right)) :: ( _, ( _, 
VAL1left, _)) :: rest671)) => let val  result = MlyValue.ldec (fn _ =>
 let val  (vb as vb1) = vb1 ()
 in (ValDec(vb, nil))
end)
 in ( LrTable.NT 52, ( result, VAL1left, vb1right), rest671)
end
|  ( 167, ( ( _, ( MlyValue.vb vb1, _, vb1right)) :: ( _, ( 
MlyValue.tyvarseq tyvarseq1, _, _)) :: ( _, ( _, VAL1left, _)) :: 
rest671)) => let val  result = MlyValue.ldec (fn _ => let val  (
tyvarseq as tyvarseq1) = tyvarseq1 ()
 val  (vb as vb1) = vb1 ()
 in (ValDec(vb, tyvarseq))
end)
 in ( LrTable.NT 52, ( result, VAL1left, vb1right), rest671)
end
|  ( 168, ( ( _, ( MlyValue.rvb rvb1, _, rvb1right)) :: _ :: ( _, ( _,
 VAL1left, _)) :: rest671)) => let val  result = MlyValue.ldec (fn _
 => let val  (rvb as rvb1) = rvb1 ()
 in (ValrecDec(rvb, nil))
end)
 in ( LrTable.NT 52, ( result, VAL1left, rvb1right), rest671)
end
|  ( 169, ( ( _, ( MlyValue.rvb rvb1, _, rvb1right)) :: ( _, ( 
MlyValue.tyvarseq tyvarseq1, _, _)) :: _ :: ( _, ( _, VAL1left, _)) ::
 rest671)) => let val  result = MlyValue.ldec (fn _ => let val  (
tyvarseq as tyvarseq1) = tyvarseq1 ()
 val  (rvb as rvb1) = rvb1 ()
 in (ValrecDec(rvb, tyvarseq))
end)
 in ( LrTable.NT 52, ( result, VAL1left, rvb1right), rest671)
end
|  ( 170, ( ( _, ( MlyValue.fb fb1, _, fb1right)) :: ( _, ( _, 
FUN1left, _)) :: rest671)) => let val  result = MlyValue.ldec (fn _ =>
 let val  (fb as fb1) = fb1 ()
 in (FunDec(fb, nil))
end)
 in ( LrTable.NT 52, ( result, FUN1left, fb1right), rest671)
end
|  ( 171, ( ( _, ( MlyValue.fb fb1, _, fb1right)) :: ( _, ( 
MlyValue.tyvarseq tyvarseq1, _, _)) :: ( _, ( _, FUN1left, _)) :: 
rest671)) => let val  result = MlyValue.ldec (fn _ => let val  (
tyvarseq as tyvarseq1) = tyvarseq1 ()
 val  (fb as fb1) = fb1 ()
 in (FunDec(fb, tyvarseq))
end)
 in ( LrTable.NT 52, ( result, FUN1left, fb1right), rest671)
end
|  ( 172, ( ( _, ( MlyValue.tb tb1, _, tb1right)) :: _ :: ( _, ( 
MlyValue.header_format_comment_list header_format_comment_list1, 
header_format_comment_list1left, _)) :: rest671)) => let val  result =
 MlyValue.ldec (fn _ => let val  (header_format_comment_list as 
header_format_comment_list1) = header_format_comment_list1 ()
 val  (tb as tb1) = tb1 ()
 in (TypeDec {formatComments = header_format_comment_list, tbs = tb})

end)
 in ( LrTable.NT 52, ( result, header_format_comment_list1left, 
tb1right), rest671)
end
|  ( 173, ( ( _, ( MlyValue.db db1, _, db1right)) :: _ :: ( _, ( 
MlyValue.header_format_comment_list header_format_comment_list1, 
header_format_comment_list1left, _)) :: rest671)) => let val  result =
 MlyValue.ldec (fn _ => let val  (header_format_comment_list as 
header_format_comment_list1) = header_format_comment_list1 ()
 val  (db as db1) = db1 ()
 in (
DatatypeDec
        {
          formatComments = header_format_comment_list,
          datatycs = db,
          withtycs = []
        }
)
end)
 in ( LrTable.NT 52, ( result, header_format_comment_list1left, 
db1right), rest671)
end
|  ( 174, ( ( _, ( MlyValue.tb tb1, _, tb1right)) :: _ :: ( _, ( 
MlyValue.db db1, _, _)) :: _ :: ( _, ( 
MlyValue.header_format_comment_list header_format_comment_list1, 
header_format_comment_list1left, _)) :: rest671)) => let val  result =
 MlyValue.ldec (fn _ => let val  (header_format_comment_list as 
header_format_comment_list1) = header_format_comment_list1 ()
 val  (db as db1) = db1 ()
 val  (tb as tb1) = tb1 ()
 in (
DatatypeDec
        {
          formatComments = header_format_comment_list,
          datatycs = db,
          withtycs = tb
        }
)
end)
 in ( LrTable.NT 52, ( result, header_format_comment_list1left, 
tb1right), rest671)
end
|  ( 175, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.ldecs ldecs1,
 _, _)) :: ( _, ( _, _, WITHright)) :: ( _, ( MlyValue.db db1, _, _))
 :: _ :: ( _, ( MlyValue.header_format_comment_list 
header_format_comment_list1, header_format_comment_list1left, _)) :: 
rest671)) => let val  result = MlyValue.ldec (fn _ => let val  (
header_format_comment_list as header_format_comment_list1) = 
header_format_comment_list1 ()
 val  (db as db1) = db1 ()
 val  (ldecs as ldecs1) = ldecs1 ()
 in (
AbstypeDec
        {
          formatComments = header_format_comment_list,
          abstycs = db,
          withtycs = [],
          bodyBeginPos = WITHright,
          body = ldecs
        }
)
end)
 in ( LrTable.NT 52, ( result, header_format_comment_list1left, 
END1right), rest671)
end
|  ( 176, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.ldecs ldecs1,
 _, _)) :: ( _, ( _, _, WITHright)) :: ( _, ( MlyValue.tb tb1, _, _))
 :: _ :: ( _, ( MlyValue.db db1, _, _)) :: _ :: ( _, ( 
MlyValue.header_format_comment_list header_format_comment_list1, 
header_format_comment_list1left, _)) :: rest671)) => let val  result =
 MlyValue.ldec (fn _ => let val  (header_format_comment_list as 
header_format_comment_list1) = header_format_comment_list1 ()
 val  (db as db1) = db1 ()
 val  (tb as tb1) = tb1 ()
 val  (ldecs as ldecs1) = ldecs1 ()
 in (
AbstypeDec
        {
          formatComments = header_format_comment_list,
          abstycs = db,
          withtycs = tb,
          bodyBeginPos = WITHright,
          body = ldecs
        }
)
end)
 in ( LrTable.NT 52, ( result, header_format_comment_list1left, 
END1right), rest671)
end
|  ( 177, ( ( _, ( MlyValue.ebs ebs1, _, ebs1right)) :: _ :: ( _, ( 
MlyValue.header_format_comment_list header_format_comment_list1, 
header_format_comment_list1left, _)) :: rest671)) => let val  result =
 MlyValue.ldec (fn _ => let val  (header_format_comment_list as 
header_format_comment_list1) = header_format_comment_list1 ()
 val  (ebs as ebs1) = ebs1 ()
 in (
ExceptionDec {formatComments = header_format_comment_list, ebs = ebs})

end)
 in ( LrTable.NT 52, ( result, header_format_comment_list1left, 
ebs1right), rest671)
end
|  ( 178, ( ( _, ( MlyValue.qid_p qid_p1, _, qid_p1right)) :: ( _, ( _
, OPEN1left, _)) :: rest671)) => let val  result = MlyValue.ldec (fn _
 => let val  (qid_p as qid_p1) = qid_p1 ()
 in (OpenDec qid_p)
end)
 in ( LrTable.NT 52, ( result, OPEN1left, qid_p1right), rest671)
end
|  ( 179, ( ( _, ( MlyValue.ops ops1, _, ops1right)) :: ( _, ( 
MlyValue.fixity fixity1, fixity1left, _)) :: rest671)) => let val  
result = MlyValue.ldec (fn _ => let val  (fixity as fixity1) = fixity1
 ()
 val  (ops as ops1) = ops1 ()
 in (FixDec{fixity = fixity, ops = ops})
end)
 in ( LrTable.NT 52, ( result, fixity1left, ops1right), rest671)
end
|  ( 180, ( ( _, ( MlyValue.exp_pa exp_pa1, _, exp_pa1right)) :: _ :: 
( _, ( MlyValue.ty ty1, _, _)) :: _ :: ( _, ( MlyValue.ident ident1, _
, _)) :: ( _, ( _, OVERLOAD1left, _)) :: rest671)) => let val  result
 = MlyValue.ldec (fn _ => let val  (ident as ident1) = ident1 ()
 val  (ty as ty1) = ty1 ()
 val  (exp_pa as exp_pa1) = exp_pa1 ()
 in (OvldDec(ident, ty, exp_pa))
end)
 in ( LrTable.NT 52, ( result, OVERLOAD1left, exp_pa1right), rest671)

end
|  ( 181, ( ( _, ( MlyValue.exp exp1, exp1left, exp1right)) :: rest671
)) => let val  result = MlyValue.exp_pa (fn _ => let val  (exp as exp1
) = exp1 ()
 in ([exp])
end)
 in ( LrTable.NT 53, ( result, exp1left, exp1right), rest671)
end
|  ( 182, ( ( _, ( MlyValue.exp_pa exp_pa1, _, exp_pa1right)) :: _ :: 
( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  
result = MlyValue.exp_pa (fn _ => let val  (exp as exp1) = exp1 ()
 val  (exp_pa as exp_pa1) = exp_pa1 ()
 in (exp :: exp_pa)
end)
 in ( LrTable.NT 53, ( result, exp1left, exp_pa1right), rest671)
end
|  ( 183, ( rest671)) => let val  result = MlyValue.ldecs (fn _ => (
SeqDec nil))
 in ( LrTable.NT 54, ( result, defaultPos, defaultPos), rest671)
end
|  ( 184, ( ( _, ( MlyValue.ldecs ldecs1, _, ldecs1right)) :: ( _, ( 
MlyValue.ldec ldec1, (ldecleft as ldec1left), ldecright)) :: rest671))
 => let val  result = MlyValue.ldecs (fn _ => let val  (ldec as ldec1)
 = ldec1 ()
 val  (ldecs as ldecs1) = ldecs1 ()
 in (makeSEQdec (markdec(ldec, ldecleft, ldecright), ldecs))
end)
 in ( LrTable.NT 54, ( result, ldec1left, ldecs1right), rest671)
end
|  ( 185, ( ( _, ( MlyValue.ldecs ldecs1, _, ldecs1right)) :: ( _, ( _
, SEMICOLON1left, _)) :: rest671)) => let val  result = MlyValue.ldecs
 (fn _ => let val  (ldecs as ldecs1) = ldecs1 ()
 in (ldecs)
end)
 in ( LrTable.NT 54, ( result, SEMICOLON1left, ldecs1right), rest671)

end
|  ( 186, ( ( _, ( MlyValue.ldecs ldecs3, _, ldecs3right)) :: ( _, ( _
, _, ENDright)) :: ( _, ( MlyValue.ldecs ldecs2, ldecs2left, 
ldecs2right)) :: _ :: ( _, ( MlyValue.ldecs ldecs1, ldecs1left, 
ldecs1right)) :: ( _, ( _, (LOCALleft as LOCAL1left), _)) :: rest671))
 => let val  result = MlyValue.ldecs (fn _ => let val  ldecs1 = ldecs1
 ()
 val  ldecs2 = ldecs2 ()
 val  ldecs3 = ldecs3 ()
 in (
makeSEQdec
         (
           markdec
           (
             LocalDec
             (
               markdec(ldecs1, ldecs1left, ldecs1right),
               markdec(ldecs2, ldecs2left, ldecs2right)
             ),
             LOCALleft,
             ENDright
           ),
           ldecs3
         )
)
end)
 in ( LrTable.NT 54, ( result, LOCAL1left, ldecs3right), rest671)
end
|  ( 187, ( ( _, ( MlyValue.ident ident1, ident1left, ident1right)) ::
 rest671)) => let val  result = MlyValue.ops (fn _ => let val  (ident
 as ident1) = ident1 ()
 in ([ident])
end)
 in ( LrTable.NT 55, ( result, ident1left, ident1right), rest671)
end
|  ( 188, ( ( _, ( MlyValue.ops ops1, _, ops1right)) :: ( _, ( 
MlyValue.ident ident1, ident1left, _)) :: rest671)) => let val  result
 = MlyValue.ops (fn _ => let val  (ident as ident1) = ident1 ()
 val  (ops as ops1) = ops1 ()
 in (ident :: ops)
end)
 in ( LrTable.NT 55, ( result, ident1left, ops1right), rest671)
end
|  ( 189, ( rest671)) => let val  result = MlyValue.spec_s (fn _ => (
[]))
 in ( LrTable.NT 56, ( result, defaultPos, defaultPos), rest671)
end
|  ( 190, ( ( _, ( MlyValue.spec_s spec_s1, _, spec_s1right)) :: ( _, 
( MlyValue.spec spec1, spec1left, _)) :: rest671)) => let val  result
 = MlyValue.spec_s (fn _ => let val  (spec as spec1) = spec1 ()
 val  (spec_s as spec_s1) = spec_s1 ()
 in (spec @ spec_s)
end)
 in ( LrTable.NT 56, ( result, spec1left, spec_s1right), rest671)
end
|  ( 191, ( ( _, ( MlyValue.spec_s spec_s1, _, spec_s1right)) :: ( _, 
( _, SEMICOLON1left, _)) :: rest671)) => let val  result = 
MlyValue.spec_s (fn _ => let val  (spec_s as spec_s1) = spec_s1 ()
 in (spec_s)
end)
 in ( LrTable.NT 56, ( result, SEMICOLON1left, spec_s1right), rest671)

end
|  ( 192, ( ( _, ( MlyValue.strspec strspec1, _, strspec1right)) :: (
 _, ( _, STRUCTURE1left, _)) :: rest671)) => let val  result = 
MlyValue.spec (fn _ => let val  (strspec as strspec1) = strspec1 ()
 in ([StrSpec strspec])
end)
 in ( LrTable.NT 57, ( result, STRUCTURE1left, strspec1right), rest671
)
end
|  ( 193, ( ( _, ( MlyValue.fctspec fctspec1, _, fctspec1right)) :: (
 _, ( _, FUNCTOR1left, _)) :: rest671)) => let val  result = 
MlyValue.spec (fn _ => let val  (fctspec as fctspec1) = fctspec1 ()
 in ([FctSpec fctspec])
end)
 in ( LrTable.NT 57, ( result, FUNCTOR1left, fctspec1right), rest671)

end
|  ( 194, ( ( _, ( MlyValue.db db1, _, db1right)) :: ( _, ( _, 
DATATYPE1left, _)) :: rest671)) => let val  result = MlyValue.spec (fn
 _ => let val  (db as db1) = db1 ()
 in ([DataSpec{datatycs = db, withtycs = nil}])
end)
 in ( LrTable.NT 57, ( result, DATATYPE1left, db1right), rest671)
end
|  ( 195, ( ( _, ( MlyValue.tb tb1, _, tb1right)) :: _ :: ( _, ( 
MlyValue.db db1, _, _)) :: ( _, ( _, DATATYPE1left, _)) :: rest671))
 => let val  result = MlyValue.spec (fn _ => let val  (db as db1) = 
db1 ()
 val  (tb as tb1) = tb1 ()
 in ([DataSpec{datatycs = db, withtycs = tb}])
end)
 in ( LrTable.NT 57, ( result, DATATYPE1left, tb1right), rest671)
end
|  ( 196, ( ( _, ( MlyValue.tyspec tyspec1, _, tyspec1right)) :: ( _, 
( _, TYPE1left, _)) :: rest671)) => let val  result = MlyValue.spec
 (fn _ => let val  (tyspec as tyspec1) = tyspec1 ()
 in ([TycSpec(tyspec, false)])
end)
 in ( LrTable.NT 57, ( result, TYPE1left, tyspec1right), rest671)
end
|  ( 197, ( ( _, ( MlyValue.tyspec tyspec1, _, tyspec1right)) :: ( _, 
( _, EQTYPE1left, _)) :: rest671)) => let val  result = MlyValue.spec
 (fn _ => let val  (tyspec as tyspec1) = tyspec1 ()
 in ([TycSpec(tyspec, true)])
end)
 in ( LrTable.NT 57, ( result, EQTYPE1left, tyspec1right), rest671)

end
|  ( 198, ( ( _, ( MlyValue.valspec valspec1, _, valspec1right)) :: (
 _, ( _, VAL1left, _)) :: rest671)) => let val  result = MlyValue.spec
 (fn _ => let val  (valspec as valspec1) = valspec1 ()
 in ([ValSpec valspec])
end)
 in ( LrTable.NT 57, ( result, VAL1left, valspec1right), rest671)
end
|  ( 199, ( ( _, ( MlyValue.exnspec exnspec1, _, exnspec1right)) :: (
 _, ( _, EXCEPTION1left, _)) :: rest671)) => let val  result = 
MlyValue.spec (fn _ => let val  (exnspec as exnspec1) = exnspec1 ()
 in ([ExceSpec exnspec])
end)
 in ( LrTable.NT 57, ( result, EXCEPTION1left, exnspec1right), rest671
)
end
|  ( 200, ( ( _, ( MlyValue.sharespec sharespec1, _, sharespec1right))
 :: ( _, ( _, SHARING1left, _)) :: rest671)) => let val  result = 
MlyValue.spec (fn _ => let val  (sharespec as sharespec1) = sharespec1
 ()
 in (sharespec)
end)
 in ( LrTable.NT 57, ( result, SHARING1left, sharespec1right), rest671
)
end
|  ( 201, ( ( _, ( MlyValue.sign sign1, _, sign1right)) :: ( _, ( _, 
INCLUDE1left, _)) :: rest671)) => let val  result = MlyValue.spec (fn
 _ => let val  (sign as sign1) = sign1 ()
 in ([IncludeSpec sign])
end)
 in ( LrTable.NT 57, ( result, INCLUDE1left, sign1right), rest671)
end
|  ( 202, ( ( _, ( MlyValue.idents idents1, _, idents1right)) :: ( _, 
( MlyValue.ident ident1, _, _)) :: ( _, ( _, INCLUDE1left, _)) :: 
rest671)) => let val  result = MlyValue.spec (fn _ => let val  (ident
 as ident1) = ident1 ()
 val  (idents as idents1) = idents1 ()
 in (IncludeSpec(VarSig(ident)) :: idents)
end)
 in ( LrTable.NT 57, ( result, INCLUDE1left, idents1right), rest671)

end
|  ( 203, ( ( _, ( MlyValue.ident ident1, ident1left, ident1right)) ::
 rest671)) => let val  result = MlyValue.idents (fn _ => let val  (
ident as ident1) = ident1 ()
 in ([IncludeSpec(VarSig(ident))])
end)
 in ( LrTable.NT 58, ( result, ident1left, ident1right), rest671)
end
|  ( 204, ( ( _, ( MlyValue.idents idents1, _, idents1right)) :: ( _, 
( MlyValue.ident ident1, ident1left, _)) :: rest671)) => let val  
result = MlyValue.idents (fn _ => let val  (ident as ident1) = ident1
 ()
 val  (idents as idents1) = idents1 ()
 in (IncludeSpec(VarSig(ident)) :: idents)
end)
 in ( LrTable.NT 58, ( result, ident1left, idents1right), rest671)
end
|  ( 205, ( ( _, ( MlyValue.strspec strspec2, _, strspec2right)) :: _
 :: ( _, ( MlyValue.strspec strspec1, strspec1left, _)) :: rest671))
 => let val  result = MlyValue.strspec (fn _ => let val  strspec1 = 
strspec1 ()
 val  strspec2 = strspec2 ()
 in (strspec1 @ strspec2)
end)
 in ( LrTable.NT 59, ( result, strspec1left, strspec2right), rest671)

end
|  ( 206, ( ( _, ( MlyValue.sign sign1, _, sign1right)) :: _ :: ( _, (
 MlyValue.ident ident1, ident1left, _)) :: rest671)) => let val  
result = MlyValue.strspec (fn _ => let val  (ident as ident1) = ident1
 ()
 val  (sign as sign1) = sign1 ()
 in ([(ident, sign, NONE)])
end)
 in ( LrTable.NT 59, ( result, ident1left, sign1right), rest671)
end
|  ( 207, ( ( _, ( MlyValue.qid qid1, _, qid1right)) :: _ :: ( _, ( 
MlyValue.sign sign1, _, _)) :: _ :: ( _, ( MlyValue.ident ident1, 
ident1left, _)) :: rest671)) => let val  result = MlyValue.strspec (fn
 _ => let val  (ident as ident1) = ident1 ()
 val  (sign as sign1) = sign1 ()
 val  (qid as qid1) = qid1 ()
 in ([(ident, sign, SOME(qid))])
end)
 in ( LrTable.NT 59, ( result, ident1left, qid1right), rest671)
end
|  ( 208, ( ( _, ( MlyValue.fctspec fctspec2, _, fctspec2right)) :: _
 :: ( _, ( MlyValue.fctspec fctspec1, fctspec1left, _)) :: rest671))
 => let val  result = MlyValue.fctspec (fn _ => let val  fctspec1 = 
fctspec1 ()
 val  fctspec2 = fctspec2 ()
 in (fctspec1 @ fctspec2)
end)
 in ( LrTable.NT 60, ( result, fctspec1left, fctspec2right), rest671)

end
|  ( 209, ( ( _, ( MlyValue.fsig fsig1, _, fsig1right)) :: ( _, ( 
MlyValue.ident ident1, ident1left, _)) :: rest671)) => let val  result
 = MlyValue.fctspec (fn _ => let val  (ident as ident1) = ident1 ()
 val  (fsig as fsig1) = fsig1 ()
 in ([(ident, fsig)])
end)
 in ( LrTable.NT 60, ( result, ident1left, fsig1right), rest671)
end
|  ( 210, ( ( _, ( MlyValue.tyspec tyspec2, _, tyspec2right)) :: _ :: 
( _, ( MlyValue.tyspec tyspec1, tyspec1left, _)) :: rest671)) => let
 val  result = MlyValue.tyspec (fn _ => let val  tyspec1 = tyspec1 ()
 val  tyspec2 = tyspec2 ()
 in (tyspec1 @ tyspec2)
end)
 in ( LrTable.NT 61, ( result, tyspec1left, tyspec2right), rest671)

end
|  ( 211, ( ( _, ( MlyValue.ID ID1, _, ID1right)) :: ( _, ( 
MlyValue.tyvars tyvars1, tyvars1left, _)) :: rest671)) => let val  
result = MlyValue.tyspec (fn _ => let val  (tyvars as tyvars1) = 
tyvars1 ()
 val  (ID as ID1) = ID1 ()
 in ([(ID, tyvars, NONE)])
end)
 in ( LrTable.NT 61, ( result, tyvars1left, ID1right), rest671)
end
|  ( 212, ( ( _, ( MlyValue.ty ty1, _, ty1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, _, _)) :: ( _, ( MlyValue.tyvars tyvars1, tyvars1left
, _)) :: rest671)) => let val  result = MlyValue.tyspec (fn _ => let
 val  (tyvars as tyvars1) = tyvars1 ()
 val  (ID as ID1) = ID1 ()
 val  (ty as ty1) = ty1 ()
 in ([(ID, tyvars, SOME ty)])
end)
 in ( LrTable.NT 61, ( result, tyvars1left, ty1right), rest671)
end
|  ( 213, ( ( _, ( MlyValue.valspec valspec2, _, valspec2right)) :: _
 :: ( _, ( MlyValue.valspec valspec1, valspec1left, _)) :: rest671))
 => let val  result = MlyValue.valspec (fn _ => let val  valspec1 = 
valspec1 ()
 val  valspec2 = valspec2 ()
 in (valspec1 @ valspec2)
end)
 in ( LrTable.NT 62, ( result, valspec1left, valspec2right), rest671)

end
|  ( 214, ( ( _, ( MlyValue.ty ty1, _, ty1right)) :: _ :: ( _, ( 
MlyValue.ident ident1, _, _)) :: ( _, ( MlyValue.op_op op_op1, 
op_op1left, _)) :: rest671)) => let val  result = MlyValue.valspec (fn
 _ => let val  op_op1 = op_op1 ()
 val  (ident as ident1) = ident1 ()
 val  (ty as ty1) = ty1 ()
 in ([(ident, ty)])
end)
 in ( LrTable.NT 62, ( result, op_op1left, ty1right), rest671)
end
|  ( 215, ( ( _, ( MlyValue.exnspec exnspec2, _, exnspec2right)) :: _
 :: ( _, ( MlyValue.exnspec exnspec1, exnspec1left, _)) :: rest671))
 => let val  result = MlyValue.exnspec (fn _ => let val  exnspec1 = 
exnspec1 ()
 val  exnspec2 = exnspec2 ()
 in (exnspec1 @ exnspec2)
end)
 in ( LrTable.NT 63, ( result, exnspec1left, exnspec2right), rest671)

end
|  ( 216, ( ( _, ( MlyValue.ident ident1, ident1left, ident1right)) ::
 rest671)) => let val  result = MlyValue.exnspec (fn _ => let val  (
ident as ident1) = ident1 ()
 in ([(ident, NONE)])
end)
 in ( LrTable.NT 63, ( result, ident1left, ident1right), rest671)
end
|  ( 217, ( ( _, ( MlyValue.ty ty1, _, ty1right)) :: _ :: ( _, ( 
MlyValue.ident ident1, ident1left, _)) :: rest671)) => let val  result
 = MlyValue.exnspec (fn _ => let val  (ident as ident1) = ident1 ()
 val  (ty as ty1) = ty1 ()
 in ([(ident, SOME ty)])
end)
 in ( LrTable.NT 63, ( result, ident1left, ty1right), rest671)
end
|  ( 218, ( ( _, ( MlyValue.sharespec sharespec2, _, sharespec2right))
 :: _ :: ( _, ( MlyValue.sharespec sharespec1, sharespec1left, _)) :: 
rest671)) => let val  result = MlyValue.sharespec (fn _ => let val  
sharespec1 = sharespec1 ()
 val  sharespec2 = sharespec2 ()
 in (sharespec1 @ sharespec2)
end)
 in ( LrTable.NT 64, ( result, sharespec1left, sharespec2right), 
rest671)
end
|  ( 219, ( ( _, ( MlyValue.patheqn patheqn1, patheqnleft, (
patheqnright as patheqn1right))) :: ( _, ( _, TYPE1left, _)) :: 
rest671)) => let val  result = MlyValue.sharespec (fn _ => let val  (
patheqn as patheqn1) = patheqn1 ()
 in ([MarkSpec(ShareTycSpec(patheqn), (patheqnleft, patheqnright))])

end)
 in ( LrTable.NT 64, ( result, TYPE1left, patheqn1right), rest671)
end
|  ( 220, ( ( _, ( MlyValue.patheqn patheqn1, (patheqnleft as 
patheqn1left), (patheqnright as patheqn1right))) :: rest671)) => let
 val  result = MlyValue.sharespec (fn _ => let val  (patheqn as 
patheqn1) = patheqn1 ()
 in ([MarkSpec(ShareStrSpec(patheqn),(patheqnleft, patheqnright))])

end)
 in ( LrTable.NT 64, ( result, patheqn1left, patheqn1right), rest671)

end
|  ( 221, ( ( _, ( MlyValue.qid qid2, _, qid2right)) :: _ :: ( _, ( 
MlyValue.qid qid1, qid1left, _)) :: rest671)) => let val  result = 
MlyValue.patheqn (fn _ => let val  qid1 = qid1 ()
 val  qid2 = qid2 ()
 in ([qid1, qid2])
end)
 in ( LrTable.NT 65, ( result, qid1left, qid2right), rest671)
end
|  ( 222, ( ( _, ( MlyValue.patheqn patheqn1, _, patheqn1right)) :: _
 :: ( _, ( MlyValue.qid qid1, qid1left, _)) :: rest671)) => let val  
result = MlyValue.patheqn (fn _ => let val  (qid as qid1) = qid1 ()
 val  (patheqn as patheqn1) = patheqn1 ()
 in (qid :: patheqn)
end)
 in ( LrTable.NT 65, ( result, qid1left, patheqn1right), rest671)
end
|  ( 223, ( ( _, ( MlyValue.whspec whspec2, _, whspec2right)) :: _ :: 
( _, ( MlyValue.whspec whspec1, whspec1left, _)) :: rest671)) => let
 val  result = MlyValue.whspec (fn _ => let val  whspec1 = whspec1 ()
 val  whspec2 = whspec2 ()
 in (whspec1 @ whspec2)
end)
 in ( LrTable.NT 66, ( result, whspec1left, whspec2right), rest671)

end
|  ( 224, ( ( _, ( MlyValue.ty ty1, _, ty1right)) :: _ :: ( _, ( 
MlyValue.qid qid1, _, _)) :: ( _, ( MlyValue.tyvars tyvars1, _, _)) ::
 ( _, ( _, TYPE1left, _)) :: rest671)) => let val  result = 
MlyValue.whspec (fn _ => let val  (tyvars as tyvars1) = tyvars1 ()
 val  (qid as qid1) = qid1 ()
 val  (ty as ty1) = ty1 ()
 in ([WhType(qid, tyvars, ty)])
end)
 in ( LrTable.NT 66, ( result, TYPE1left, ty1right), rest671)
end
|  ( 225, ( ( _, ( MlyValue.qid qid2, _, qid2right)) :: _ :: ( _, ( 
MlyValue.qid qid1, qid1left, _)) :: rest671)) => let val  result = 
MlyValue.whspec (fn _ => let val  qid1 = qid1 ()
 val  qid2 = qid2 ()
 in ([WhStruct(qid1, qid2)])
end)
 in ( LrTable.NT 66, ( result, qid1left, qid2right), rest671)
end
|  ( 226, ( ( _, ( MlyValue.ident ident1, (identleft as ident1left), (
identright as ident1right))) :: rest671)) => let val  result = 
MlyValue.sign (fn _ => let val  (ident as ident1) = ident1 ()
 in (MarkSig(VarSig(ident), (identleft,identright)))
end)
 in ( LrTable.NT 67, ( result, ident1left, ident1right), rest671)
end
|  ( 227, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.spec_s spec_s1
, spec_sleft, spec_sright)) :: ( _, ( _, SIG1left, _)) :: rest671)) =>
 let val  result = MlyValue.sign (fn _ => let val  (spec_s as spec_s1)
 = spec_s1 ()
 in (MarkSig(BaseSig(spec_s), (spec_sleft, spec_sright)))
end)
 in ( LrTable.NT 67, ( result, SIG1left, END1right), rest671)
end
|  ( 228, ( ( _, ( MlyValue.whspec whspec1, _, (whspecright as 
whspec1right))) :: _ :: ( _, ( MlyValue.sign sign1, (signleft as 
sign1left), _)) :: rest671)) => let val  result = MlyValue.sign (fn _
 => let val  (sign as sign1) = sign1 ()
 val  (whspec as whspec1) = whspec1 ()
 in (MarkSig(AugSig(sign, whspec), (signleft, whspecright)))
end)
 in ( LrTable.NT 67, ( result, sign1left, whspec1right), rest671)
end
|  ( 229, ( rest671)) => let val  result = MlyValue.sigconstraint_op
 (fn _ => (NoSig))
 in ( LrTable.NT 68, ( result, defaultPos, defaultPos), rest671)
end
|  ( 230, ( ( _, ( MlyValue.sign sign1, _, sign1right)) :: ( _, ( _, 
COLON1left, _)) :: rest671)) => let val  result = 
MlyValue.sigconstraint_op (fn _ => let val  (sign as sign1) = sign1 ()
 in (Transparent(sign))
end)
 in ( LrTable.NT 68, ( result, COLON1left, sign1right), rest671)
end
|  ( 231, ( ( _, ( MlyValue.sign sign1, _, sign1right)) :: ( _, ( _, 
COLONGT1left, _)) :: rest671)) => let val  result = 
MlyValue.sigconstraint_op (fn _ => let val  (sign as sign1) = sign1 ()
 in (Opaque(sign))
end)
 in ( LrTable.NT 68, ( result, COLONGT1left, sign1right), rest671)
end
|  ( 232, ( rest671)) => let val  result = MlyValue.fsigconstraint_op
 (fn _ => (NoSig))
 in ( LrTable.NT 69, ( result, defaultPos, defaultPos), rest671)
end
|  ( 233, ( ( _, ( MlyValue.ident ident1, _, ident1right)) :: ( _, ( _
, COLON1left, _)) :: rest671)) => let val  result = 
MlyValue.fsigconstraint_op (fn _ => let val  (ident as ident1) = 
ident1 ()
 in (Transparent(VarFsig (ident)))
end)
 in ( LrTable.NT 69, ( result, COLON1left, ident1right), rest671)
end
|  ( 234, ( ( _, ( MlyValue.ident ident1, _, ident1right)) :: ( _, ( _
, COLONGT1left, _)) :: rest671)) => let val  result = 
MlyValue.fsigconstraint_op (fn _ => let val  (ident as ident1) = 
ident1 ()
 in (Opaque(VarFsig (ident)))
end)
 in ( LrTable.NT 69, ( result, COLONGT1left, ident1right), rest671)

end
|  ( 235, ( ( _, ( MlyValue.sigb sigb2, _, sigb2right)) :: _ :: ( _, (
 MlyValue.sigb sigb1, sigb1left, _)) :: rest671)) => let val  result =
 MlyValue.sigb (fn _ => let val  sigb1 = sigb1 ()
 val  sigb2 = sigb2 ()
 in (sigb1 @ sigb2)
end)
 in ( LrTable.NT 70, ( result, sigb1left, sigb2right), rest671)
end
|  ( 236, ( ( _, ( MlyValue.sign sign1, _, sign1right)) :: _ :: ( _, (
 MlyValue.ident ident1, ident1left, _)) :: rest671)) => let val  
result = MlyValue.sigb (fn _ => let val  (ident as ident1) = ident1 ()
 val  (sign as sign1) = sign1 ()
 in ([Sigb{name = ident, def = sign}])
end)
 in ( LrTable.NT 70, ( result, ident1left, sign1right), rest671)
end
|  ( 237, ( ( _, ( MlyValue.fsigb fsigb2, _, fsigb2right)) :: _ :: ( _
, ( MlyValue.fsigb fsigb1, fsigb1left, _)) :: rest671)) => let val  
result = MlyValue.fsigb (fn _ => let val  fsigb1 = fsigb1 ()
 val  fsigb2 = fsigb2 ()
 in (fsigb1 @ fsigb2)
end)
 in ( LrTable.NT 71, ( result, fsigb1left, fsigb2right), rest671)
end
|  ( 238, ( ( _, ( MlyValue.sign sign1, _, sign1right)) :: _ :: ( _, (
 MlyValue.fparamList fparamList1, _, _)) :: ( _, ( MlyValue.ident 
ident1, ident1left, _)) :: rest671)) => let val  result = 
MlyValue.fsigb (fn _ => let val  (ident as ident1) = ident1 ()
 val  (fparamList as fparamList1) = fparamList1 ()
 val  (sign as sign1) = sign1 ()
 in (
[
           Fsigb
           {name = ident, def = BaseFsig{param = fparamList, result = sign}}
         ]
)
end)
 in ( LrTable.NT 71, ( result, ident1left, sign1right), rest671)
end
|  ( 239, ( ( _, ( MlyValue.ident ident1, _, ident1right)) :: ( _, ( _
, COLON1left, _)) :: rest671)) => let val  result = MlyValue.fsig (fn
 _ => let val  (ident as ident1) = ident1 ()
 in (VarFsig (ident))
end)
 in ( LrTable.NT 72, ( result, COLON1left, ident1right), rest671)
end
|  ( 240, ( ( _, ( MlyValue.sign sign1, _, sign1right)) :: _ :: ( _, (
 MlyValue.fparamList fparamList1, fparamList1left, _)) :: rest671)) =>
 let val  result = MlyValue.fsig (fn _ => let val  (fparamList as 
fparamList1) = fparamList1 ()
 val  (sign as sign1) = sign1 ()
 in (BaseFsig{param = fparamList, result = sign})
end)
 in ( LrTable.NT 72, ( result, fparamList1left, sign1right), rest671)

end
|  ( 241, ( ( _, ( MlyValue.qid qid1, (qidleft as qid1left), (qidright
 as qid1right))) :: rest671)) => let val  result = MlyValue.str (fn _
 => let val  (qid as qid1) = qid1 ()
 in ((MarkStr(VarStr(qid), (qidleft, qidright))))
end)
 in ( LrTable.NT 73, ( result, qid1left, qid1right), rest671)
end
|  ( 242, ( ( _, ( _, _, (ENDright as END1right))) :: ( _, ( 
MlyValue.strdecs strdecs1, _, _)) :: ( _, ( _, (STRUCTleft as 
STRUCT1left), _)) :: rest671)) => let val  result = MlyValue.str (fn _
 => let val  (strdecs as strdecs1) = strdecs1 ()
 in (MarkStr(BaseStr strdecs, (STRUCTleft, ENDright)))
end)
 in ( LrTable.NT 73, ( result, STRUCT1left, END1right), rest671)
end
|  ( 243, ( ( _, ( MlyValue.arg_fct arg_fct1, _, (arg_fctright as 
arg_fct1right))) :: ( _, ( MlyValue.qid qid1, (qidleft as qid1left), _
)) :: rest671)) => let val  result = MlyValue.str (fn _ => let val  (
qid as qid1) = qid1 ()
 val  (arg_fct as arg_fct1) = arg_fct1 ()
 in (MarkStr(AppStr(qid, arg_fct), (qidleft, arg_fctright)))
end)
 in ( LrTable.NT 73, ( result, qid1left, arg_fct1right), rest671)
end
|  ( 244, ( ( _, ( _, _, (ENDright as END1right))) :: ( _, ( 
MlyValue.str str1, _, _)) :: _ :: ( _, ( MlyValue.strdecs strdecs1, _,
 _)) :: ( _, ( _, (LETleft as LET1left), _)) :: rest671)) => let val  
result = MlyValue.str (fn _ => let val  (strdecs as strdecs1) = 
strdecs1 ()
 val  (str as str1) = str1 ()
 in (MarkStr(LetStr(strdecs, str), (LETleft, ENDright)))
end)
 in ( LrTable.NT 73, ( result, LET1left, END1right), rest671)
end
|  ( 245, ( ( _, ( MlyValue.sign sign1, _, (signright as sign1right)))
 :: _ :: ( _, ( MlyValue.str str1, (strleft as str1left), _)) :: 
rest671)) => let val  result = MlyValue.str (fn _ => let val  (str as 
str1) = str1 ()
 val  (sign as sign1) = sign1 ()
 in (
MarkStr(ConstrainedStr(str, Transparent sign), (strleft, signright)))

end)
 in ( LrTable.NT 73, ( result, str1left, sign1right), rest671)
end
|  ( 246, ( ( _, ( MlyValue.sign sign1, _, (signright as sign1right)))
 :: _ :: ( _, ( MlyValue.str str1, (strleft as str1left), _)) :: 
rest671)) => let val  result = MlyValue.str (fn _ => let val  (str as 
str1) = str1 ()
 val  (sign as sign1) = sign1 ()
 in (MarkStr(ConstrainedStr(str, Opaque sign), (strleft, signright)))

end)
 in ( LrTable.NT 73, ( result, str1left, sign1right), rest671)
end
|  ( 247, ( ( _, ( MlyValue.arg_fct arg_fct1, _, arg_fct1right)) :: _
 :: ( _, ( MlyValue.strdecs strdecs1, strdecsleft, strdecsright)) :: (
 _, ( _, LPAREN1left, _)) :: rest671)) => let val  result = 
MlyValue.arg_fct (fn _ => let val  (strdecs as strdecs1) = strdecs1 ()
 val  (arg_fct as arg_fct1) = arg_fct1 ()
 in (
(MarkStr(BaseStr strdecs, (strdecsleft, strdecsright)), false) ::
           arg_fct
)
end)
 in ( LrTable.NT 74, ( result, LPAREN1left, arg_fct1right), rest671)

end
|  ( 248, ( ( _, ( MlyValue.arg_fct arg_fct1, _, arg_fct1right)) :: _
 :: ( _, ( MlyValue.str str1, _, _)) :: ( _, ( _, LPAREN1left, _)) :: 
rest671)) => let val  result = MlyValue.arg_fct (fn _ => let val  (str
 as str1) = str1 ()
 val  (arg_fct as arg_fct1) = arg_fct1 ()
 in ((str, true) :: arg_fct)
end)
 in ( LrTable.NT 74, ( result, LPAREN1left, arg_fct1right), rest671)

end
|  ( 249, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.str str1, _
, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let val  result = 
MlyValue.arg_fct (fn _ => let val  (str as str1) = str1 ()
 in ([(str, true)])
end)
 in ( LrTable.NT 74, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 250, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.strdecs 
strdecs1, strdecsleft, strdecsright)) :: ( _, ( _, LPAREN1left, _)) ::
 rest671)) => let val  result = MlyValue.arg_fct (fn _ => let val  (
strdecs as strdecs1) = strdecs1 ()
 in ([(MarkStr(BaseStr strdecs, (strdecsleft, strdecsright)), false)])

end)
 in ( LrTable.NT 74, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 251, ( ( _, ( MlyValue.strdecs strdecs1, _, strdecs1right)) :: (
 _, ( MlyValue.strdec strdec1, (strdecleft as strdec1left), 
strdecright)) :: rest671)) => let val  result = MlyValue.strdecs (fn _
 => let val  (strdec as strdec1) = strdec1 ()
 val  (strdecs as strdecs1) = strdecs1 ()
 in (makeSEQdec (markdec(strdec, strdecleft, strdecright), strdecs))

end)
 in ( LrTable.NT 76, ( result, strdec1left, strdecs1right), rest671)

end
|  ( 252, ( ( _, ( MlyValue.strdecs strdecs1, _, strdecs1right)) :: (
 _, ( _, SEMICOLON1left, _)) :: rest671)) => let val  result = 
MlyValue.strdecs (fn _ => let val  (strdecs as strdecs1) = strdecs1 ()
 in (strdecs)
end)
 in ( LrTable.NT 76, ( result, SEMICOLON1left, strdecs1right), rest671
)
end
|  ( 253, ( rest671)) => let val  result = MlyValue.strdecs (fn _ => (
SeqDec[]))
 in ( LrTable.NT 76, ( result, defaultPos, defaultPos), rest671)
end
|  ( 254, ( ( _, ( MlyValue.sdecs sdecs1, _, sdecs1right)) :: ( _, ( 
MlyValue.sdec sdec1, (sdecleft as sdec1left), sdecright)) :: rest671))
 => let val  result = MlyValue.sdecs (fn _ => let val  (sdec as sdec1)
 = sdec1 ()
 val  (sdecs as sdecs1) = sdecs1 ()
 in (makeSEQdec (markdec(sdec, sdecleft, sdecright), sdecs))
end)
 in ( LrTable.NT 78, ( result, sdec1left, sdecs1right), rest671)
end
|  ( 255, ( ( _, ( MlyValue.sdecs sdecs1, _, sdecs1right)) :: ( _, ( _
, SEMICOLON1left, _)) :: rest671)) => let val  result = MlyValue.sdecs
 (fn _ => let val  (sdecs as sdecs1) = sdecs1 ()
 in (sdecs)
end)
 in ( LrTable.NT 78, ( result, SEMICOLON1left, sdecs1right), rest671)

end
|  ( 256, ( rest671)) => let val  result = MlyValue.sdecs (fn _ => (
SeqDec[]))
 in ( LrTable.NT 78, ( result, defaultPos, defaultPos), rest671)
end
|  ( 257, ( ( _, ( MlyValue.sdecs' sdecs'1, _, sdecs'1right)) :: ( _, 
( MlyValue.sdec sdec1, (sdecleft as sdec1left), sdecright)) :: rest671
)) => let val  result = MlyValue.sdecs' (fn _ => let val  (sdec as 
sdec1) = sdec1 ()
 val  (sdecs' as sdecs'1) = sdecs'1 ()
 in (makeSEQdec (markdec(sdec, sdecleft, sdecright), sdecs'))
end)
 in ( LrTable.NT 79, ( result, sdec1left, sdecs'1right), rest671)
end
|  ( 258, ( ( _, ( MlyValue.sdec sdec1, (sdecleft as sdec1left), (
sdecright as sdec1right))) :: rest671)) => let val  result = 
MlyValue.sdecs' (fn _ => let val  (sdec as sdec1) = sdec1 ()
 in (markdec(sdec, sdecleft, sdecright))
end)
 in ( LrTable.NT 79, ( result, sdec1left, sdec1right), rest671)
end
|  ( 259, ( ( _, ( MlyValue.strb strb1, _, strb1right)) :: ( _, ( _, 
STRUCTURE1left, _)) :: rest671)) => let val  result = MlyValue.strdec
 (fn _ => let val  (strb as strb1) = strb1 ()
 in (StrDec strb)
end)
 in ( LrTable.NT 75, ( result, STRUCTURE1left, strb1right), rest671)

end
|  ( 260, ( ( _, ( MlyValue.fctb fctb1, _, fctb1right)) :: ( _, ( _, 
FUNCTOR1left, _)) :: rest671)) => let val  result = MlyValue.strdec
 (fn _ => let val  (fctb as fctb1) = fctb1 ()
 in (FctDec fctb)
end)
 in ( LrTable.NT 75, ( result, FUNCTOR1left, fctb1right), rest671)
end
|  ( 261, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.strdecs 
strdecs2, strdecs2left, strdecs2right)) :: _ :: ( _, ( 
MlyValue.strdecs strdecs1, strdecs1left, strdecs1right)) :: ( _, ( _, 
LOCAL1left, _)) :: rest671)) => let val  result = MlyValue.strdec (fn
 _ => let val  strdecs1 = strdecs1 ()
 val  strdecs2 = strdecs2 ()
 in (
LocalDec
          (
            markdec(strdecs1, strdecs1left, strdecs1right),
            markdec(strdecs2,strdecs2left,strdecs2right)
          )
)
end)
 in ( LrTable.NT 75, ( result, LOCAL1left, END1right), rest671)
end
|  ( 262, ( ( _, ( MlyValue.ldec ldec1, (ldecleft as ldec1left), (
ldecright as ldec1right))) :: rest671)) => let val  result = 
MlyValue.strdec (fn _ => let val  (ldec as ldec1) = ldec1 ()
 in (markdec(ldec, ldecleft, ldecright))
end)
 in ( LrTable.NT 75, ( result, ldec1left, ldec1right), rest671)
end
|  ( 263, ( ( _, ( MlyValue.strb strb1, _, strb1right)) :: ( _, ( _, 
STRUCTURE1left, _)) :: rest671)) => let val  result = MlyValue.sdec
 (fn _ => let val  (strb as strb1) = strb1 ()
 in (StrDec strb)
end)
 in ( LrTable.NT 77, ( result, STRUCTURE1left, strb1right), rest671)

end
|  ( 264, ( ( _, ( MlyValue.sigb sigb1, _, sigb1right)) :: ( _, ( _, 
SIGNATURE1left, _)) :: rest671)) => let val  result = MlyValue.sdec
 (fn _ => let val  (sigb as sigb1) = sigb1 ()
 in (SigDec sigb)
end)
 in ( LrTable.NT 77, ( result, SIGNATURE1left, sigb1right), rest671)

end
|  ( 265, ( ( _, ( MlyValue.fsigb fsigb1, _, fsigb1right)) :: ( _, ( _
, FUNSIG1left, _)) :: rest671)) => let val  result = MlyValue.sdec (fn
 _ => let val  (fsigb as fsigb1) = fsigb1 ()
 in (FsigDec fsigb)
end)
 in ( LrTable.NT 77, ( result, FUNSIG1left, fsigb1right), rest671)
end
|  ( 266, ( ( _, ( MlyValue.fctb fctb1, _, fctb1right)) :: ( _, ( _, 
FUNCTOR1left, _)) :: rest671)) => let val  result = MlyValue.sdec (fn
 _ => let val  (fctb as fctb1) = fctb1 ()
 in (FctDec fctb)
end)
 in ( LrTable.NT 77, ( result, FUNCTOR1left, fctb1right), rest671)
end
|  ( 267, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.sdecs sdecs2, 
sdecs2left, sdecs2right)) :: _ :: ( _, ( MlyValue.sdecs sdecs1, 
sdecs1left, sdecs1right)) :: ( _, ( _, LOCAL1left, _)) :: rest671)) =>
 let val  result = MlyValue.sdec (fn _ => let val  sdecs1 = sdecs1 ()
 val  sdecs2 = sdecs2 ()
 in (
LocalDec
        (
          markdec(sdecs1, sdecs1left, sdecs1right),
          markdec(sdecs2, sdecs2left, sdecs2right)
        )
)
end)
 in ( LrTable.NT 77, ( result, LOCAL1left, END1right), rest671)
end
|  ( 268, ( ( _, ( MlyValue.ldec ldec1, (ldecleft as ldec1left), (
ldecright as ldec1right))) :: rest671)) => let val  result = 
MlyValue.sdec (fn _ => let val  (ldec as ldec1) = ldec1 ()
 in (markdec(ldec, ldecleft, ldecright))
end)
 in ( LrTable.NT 77, ( result, ldec1left, ldec1right), rest671)
end
|  ( 269, ( ( _, ( MlyValue.str str1, _, (strright as str1right))) ::
 _ :: ( _, ( MlyValue.sigconstraint_op sigconstraint_op1, _, _)) :: (
 _, ( MlyValue.ident ident1, (identleft as ident1left), _)) :: rest671
)) => let val  result = MlyValue.strb (fn _ => let val  (ident as 
ident1) = ident1 ()
 val  (sigconstraint_op as sigconstraint_op1) = sigconstraint_op1 ()
 val  (str as str1) = str1 ()
 in (
[
          MarkStrb
          (
            Strb{name = ident, def = str, constraint = sigconstraint_op},
            (identleft, strright)
          )
        ]
)
end)
 in ( LrTable.NT 80, ( result, ident1left, str1right), rest671)
end
|  ( 270, ( ( _, ( MlyValue.strb strb2, _, strb2right)) :: _ :: ( _, (
 MlyValue.strb strb1, strb1left, _)) :: rest671)) => let val  result =
 MlyValue.strb (fn _ => let val  strb1 = strb1 ()
 val  strb2 = strb2 ()
 in (strb1 @ strb2)
end)
 in ( LrTable.NT 80, ( result, strb1left, strb2right), rest671)
end
|  ( 271, ( ( _, ( MlyValue.sign sign1, _, sign1right)) :: _ :: ( _, (
 MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.fparam (fn _ => let val  (ID as ID1) = ID1 ()
 val  (sign as sign1) = sign1 ()
 in ((SOME(ID), sign))
end)
 in ( LrTable.NT 81, ( result, ID1left, sign1right), rest671)
end
|  ( 272, ( ( _, ( MlyValue.spec_s spec_s1, (spec_sleft as spec_s1left
), (spec_sright as spec_s1right))) :: rest671)) => let val  result = 
MlyValue.fparam (fn _ => let val  (spec_s as spec_s1) = spec_s1 ()
 in ((NONE, MarkSig(BaseSig(spec_s), (spec_sleft, spec_sright))))
end)
 in ( LrTable.NT 81, ( result, spec_s1left, spec_s1right), rest671)

end
|  ( 273, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.fparam 
fparam1, _, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let val 
 result = MlyValue.fparamList (fn _ => let val  (fparam as fparam1) = 
fparam1 ()
 in ([fparam])
end)
 in ( LrTable.NT 82, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 274, ( ( _, ( MlyValue.fparamList fparamList1, _, 
fparamList1right)) :: _ :: ( _, ( MlyValue.fparam fparam1, _, _)) :: (
 _, ( _, LPAREN1left, _)) :: rest671)) => let val  result = 
MlyValue.fparamList (fn _ => let val  (fparam as fparam1) = fparam1 ()
 val  (fparamList as fparamList1) = fparamList1 ()
 in (fparam :: fparamList)
end)
 in ( LrTable.NT 82, ( result, LPAREN1left, fparamList1right), rest671
)
end
|  ( 275, ( ( _, ( MlyValue.str str1, _, (strright as str1right))) ::
 _ :: ( _, ( MlyValue.sigconstraint_op sigconstraint_op1, _, _)) :: (
 _, ( MlyValue.fparamList fparamList1, _, _)) :: ( _, ( MlyValue.ident
 ident1, (identleft as ident1left), _)) :: rest671)) => let val  
result = MlyValue.fctb (fn _ => let val  (ident as ident1) = ident1 ()
 val  (fparamList as fparamList1) = fparamList1 ()
 val  (sigconstraint_op as sigconstraint_op1) = sigconstraint_op1 ()
 val  (str as str1) = str1 ()
 in (
[
          MarkFctb
          (
            Fctb
            {
              name = ident,
              def =
              BaseFct
              {params = fparamList, body=str, constraint = sigconstraint_op}
            },
            (identleft, strright)
          )
        ]
)
end)
 in ( LrTable.NT 83, ( result, ident1left, str1right), rest671)
end
|  ( 276, ( ( _, ( MlyValue.fct_exp fct_exp1, _, (fct_expright as 
fct_exp1right))) :: _ :: ( _, ( MlyValue.fsigconstraint_op 
fsigconstraint_op1, _, _)) :: ( _, ( MlyValue.ident ident1, (identleft
 as ident1left), _)) :: rest671)) => let val  result = MlyValue.fctb
 (fn _ => let val  (ident as ident1) = ident1 ()
 val  (fsigconstraint_op as fsigconstraint_op1) = fsigconstraint_op1
 ()
 val  (fct_exp as fct_exp1) = fct_exp1 ()
 in (
[
          MarkFctb
          (
            Fctb{name = ident, def = fct_exp (fsigconstraint_op)},
            (identleft, fct_expright)
          )
        ]
)
end)
 in ( LrTable.NT 83, ( result, ident1left, fct_exp1right), rest671)

end
|  ( 277, ( ( _, ( MlyValue.fctb fctb2, _, fctb2right)) :: _ :: ( _, (
 MlyValue.fctb fctb1, fctb1left, _)) :: rest671)) => let val  result =
 MlyValue.fctb (fn _ => let val  fctb1 = fctb1 ()
 val  fctb2 = fctb2 ()
 in (fctb1 @ fctb2)
end)
 in ( LrTable.NT 83, ( result, fctb1left, fctb2right), rest671)
end
|  ( 278, ( ( _, ( MlyValue.qid qid1, qid1left, qid1right)) :: rest671
)) => let val  result = MlyValue.fct_exp (fn _ => let val  (qid as 
qid1) = qid1 ()
 in (fn constraint => VarFct(qid, constraint))
end)
 in ( LrTable.NT 84, ( result, qid1left, qid1right), rest671)
end
|  ( 279, ( ( _, ( MlyValue.arg_fct arg_fct1, _, (arg_fctright as 
arg_fct1right))) :: ( _, ( MlyValue.qid qid1, (qidleft as qid1left), _
)) :: rest671)) => let val  result = MlyValue.fct_exp (fn _ => let
 val  (qid as qid1) = qid1 ()
 val  (arg_fct as arg_fct1) = arg_fct1 ()
 in (
fn constraint =>
              MarkFct
                  (AppFct(qid, arg_fct,constraint), (qidleft, arg_fctright))
)
end)
 in ( LrTable.NT 84, ( result, qid1left, arg_fct1right), rest671)
end
|  ( 280, ( ( _, ( _, _, (ENDright as END1right))) :: ( _, ( 
MlyValue.fct_exp fct_exp1, _, _)) :: _ :: ( _, ( MlyValue.strdecs 
strdecs1, _, _)) :: ( _, ( _, (LETleft as LET1left), _)) :: rest671))
 => let val  result = MlyValue.fct_exp (fn _ => let val  (strdecs as 
strdecs1) = strdecs1 ()
 val  (fct_exp as fct_exp1) = fct_exp1 ()
 in (
fn constraint =>
              MarkFct
                  (LetFct(strdecs, fct_exp constraint), (LETleft, ENDright))
)
end)
 in ( LrTable.NT 84, ( result, LET1left, END1right), rest671)
end
|  ( 281, ( ( _, ( MlyValue.sdecs' sdecs'1, (sdecs'left as sdecs'1left
), (sdecs'right as sdecs'1right))) :: rest671)) => let val  result = 
MlyValue.interdec (fn _ => let val  (sdecs' as sdecs'1) = sdecs'1 ()
 in (markdec(sdecs', sdecs'left, sdecs'right))
end)
 in ( LrTable.NT 85, ( result, sdecs'1left, sdecs'1right), rest671)

end
|  ( 282, ( ( _, ( MlyValue.exp exp1, (expleft as exp1left), (expright
 as exp1right))) :: rest671)) => let val  result = MlyValue.interdec
 (fn _ => let val  (exp as exp1) = exp1 ()
 in (
markdec
            (
              ValDec([Vb{exp = exp, pat = VarPat itsym, lazyp = false}], nil),
              expleft,
              expright
            )
)
end)
 in ( LrTable.NT 85, ( result, exp1left, exp1right), rest671)
end
|  ( 283, ( rest671)) => let val  result = MlyValue.cconv (fn _ => ())
 in ( LrTable.NT 86, ( result, defaultPos, defaultPos), rest671)
end
|  ( 284, ( ( _, ( MlyValue.fficconv fficconv1, fficconv1left, 
fficconv1right)) :: rest671)) => let val  result = MlyValue.cconv (fn
 _ => let val  fficconv1 = fficconv1 ()
 in ()
end)
 in ( LrTable.NT 86, ( result, fficconv1left, fficconv1right), rest671
)
end
|  ( 285, ( ( _, ( MlyValue.ffity ffity1, _, ffity1right)) :: _ :: ( _
, ( MlyValue.app_exp app_exp1, app_exp1left, _)) :: rest671)) => let
 val  result = MlyValue.ffiApplyArg (fn _ => let val  app_exp1 = 
app_exp1 ()
 val  ffity1 = ffity1 ()
 in ()
end)
 in ( LrTable.NT 87, ( result, app_exp1left, ffity1right), rest671)

end
|  ( 286, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.ty ty1, _,
 _)) :: _ :: ( _, ( _, SIZEOF1left, _)) :: rest671)) => let val  
result = MlyValue.ffiApplyArg (fn _ => let val  ty1 = ty1 ()
 in ()
end)
 in ( LrTable.NT 87, ( result, SIZEOF1left, RPAREN1right), rest671)

end
|  ( 287, ( ( _, ( MlyValue.aexp aexp1, _, aexp1right)) :: _ :: _ :: (
 _, ( MlyValue.ty ty1, _, _)) :: _ :: ( _, ( _, SIZEOF1left, _)) :: 
rest671)) => let val  result = MlyValue.ffiApplyArg (fn _ => let val  
ty1 = ty1 ()
 val  aexp1 = aexp1 ()
 in ()
end)
 in ( LrTable.NT 87, ( result, SIZEOF1left, aexp1right), rest671)
end
|  ( 288, ( ( _, ( MlyValue.ffiApplyArg ffiApplyArg1, ffiApplyArg1left
, ffiApplyArg1right)) :: rest671)) => let val  result = 
MlyValue.ffiApplyArgSeq (fn _ => let val  ffiApplyArg1 = ffiApplyArg1
 ()
 in ()
end)
 in ( LrTable.NT 89, ( result, ffiApplyArg1left, ffiApplyArg1right), 
rest671)
end
|  ( 289, ( ( _, ( MlyValue.ffiApplyArgSeq ffiApplyArgSeq1, _, 
ffiApplyArgSeq1right)) :: _ :: ( _, ( MlyValue.ffiApplyArg 
ffiApplyArg1, ffiApplyArg1left, _)) :: rest671)) => let val  result = 
MlyValue.ffiApplyArgSeq (fn _ => let val  ffiApplyArg1 = ffiApplyArg1
 ()
 val  ffiApplyArgSeq1 = ffiApplyArgSeq1 ()
 in ()
end)
 in ( LrTable.NT 89, ( result, ffiApplyArg1left, ffiApplyArgSeq1right)
, rest671)
end
|  ( 290, ( rest671)) => let val  result = MlyValue.ffiApplyArgs (fn _
 => ())
 in ( LrTable.NT 88, ( result, defaultPos, defaultPos), rest671)
end
|  ( 291, ( ( _, ( MlyValue.ffiApplyArgSeq ffiApplyArgSeq1, 
ffiApplyArgSeq1left, ffiApplyArgSeq1right)) :: rest671)) => let val  
result = MlyValue.ffiApplyArgs (fn _ => let val  ffiApplyArgSeq1 = 
ffiApplyArgSeq1 ()
 in ()
end)
 in ( LrTable.NT 88, ( result, ffiApplyArgSeq1left, 
ffiApplyArgSeq1right), rest671)
end
|  ( 292, ( ( _, ( MlyValue.ffity ffity1, _, ffity1right)) :: _ :: ( _
, ( MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.ffityrow (fn _ => let val  ID1 = ID1 ()
 val  ffity1 = ffity1 ()
 in ()
end)
 in ( LrTable.NT 90, ( result, ID1left, ffity1right), rest671)
end
|  ( 293, ( ( _, ( MlyValue.ffityrow ffityrow1, _, ffityrow1right)) ::
 _ :: ( _, ( MlyValue.ffity ffity1, _, _)) :: _ :: ( _, ( MlyValue.ID 
ID1, ID1left, _)) :: rest671)) => let val  result = MlyValue.ffityrow
 (fn _ => let val  ID1 = ID1 ()
 val  ffity1 = ffity1 ()
 val  ffityrow1 = ffityrow1 ()
 in ()
end)
 in ( LrTable.NT 90, ( result, ID1left, ffityrow1right), rest671)
end
|  ( 294, ( ( _, ( MlyValue.ffity ffity2, _, ffity2right)) :: _ :: ( _
, ( MlyValue.ffity ffity1, ffity1left, _)) :: rest671)) => let val  
result = MlyValue.ffityseq (fn _ => let val  ffity1 = ffity1 ()
 val  ffity2 = ffity2 ()
 in ()
end)
 in ( LrTable.NT 91, ( result, ffity1left, ffity2right), rest671)
end
|  ( 295, ( ( _, ( MlyValue.ffityseq ffityseq1, _, ffityseq1right)) ::
 _ :: ( _, ( MlyValue.ffity ffity1, ffity1left, _)) :: rest671)) =>
 let val  result = MlyValue.ffityseq (fn _ => let val  ffity1 = ffity1
 ()
 val  ffityseq1 = ffityseq1 ()
 in ()
end)
 in ( LrTable.NT 91, ( result, ffity1left, ffityseq1right), rest671)

end
|  ( 296, ( ( _, ( MlyValue.ffiAtty ffiAtty1, ffiAtty1left, 
ffiAtty1right)) :: rest671)) => let val  result = MlyValue.ffiArgs (fn
 _ => let val  ffiAtty1 = ffiAtty1 ()
 in ()
end)
 in ( LrTable.NT 92, ( result, ffiAtty1left, ffiAtty1right), rest671)

end
|  ( 297, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.ffityseq 
ffityseq1, _, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let
 val  result = MlyValue.ffiArgs (fn _ => let val  ffityseq1 = 
ffityseq1 ()
 in ()
end)
 in ( LrTable.NT 92, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 298, ( rest671)) => let val  result = MlyValue.ffiContyArg (fn _
 => ())
 in ( LrTable.NT 93, ( result, defaultPos, defaultPos), rest671)
end
|  ( 299, ( ( _, ( MlyValue.ffiArgs ffiArgs1, ffiArgs1left, 
ffiArgs1right)) :: rest671)) => let val  result = MlyValue.ffiContyArg
 (fn _ => let val  ffiArgs1 = ffiArgs1 ()
 in ()
end)
 in ( LrTable.NT 93, ( result, ffiArgs1left, ffiArgs1right), rest671)

end
|  ( 300, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.ffity 
ffity1, _, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let val  
result = MlyValue.ffiAtty (fn _ => let val  ffity1 = ffity1 ()
 in ()
end)
 in ( LrTable.NT 94, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 301, ( ( _, ( MlyValue.TYVAR TYVAR1, TYVAR1left, TYVAR1right)) ::
 rest671)) => let val  result = MlyValue.ffiAtty (fn _ => let val  
TYVAR1 = TYVAR1 ()
 in ()
end)
 in ( LrTable.NT 94, ( result, TYVAR1left, TYVAR1right), rest671)
end
|  ( 302, ( ( _, ( MlyValue.tycon tycon1, _, tycon1right)) :: ( _, ( 
MlyValue.ffiContyArg ffiContyArg1, ffiContyArg1left, _)) :: rest671))
 => let val  result = MlyValue.ffiAtty (fn _ => let val  ffiContyArg1
 = ffiContyArg1 ()
 val  tycon1 = tycon1 ()
 in ()
end)
 in ( LrTable.NT 94, ( result, ffiContyArg1left, tycon1right), rest671
)
end
|  ( 303, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ffityrow 
ffityrow1, _, _)) :: ( _, ( _, LBRACE1left, _)) :: rest671)) => let
 val  result = MlyValue.ffiAtty (fn _ => let val  ffityrow1 = 
ffityrow1 ()
 in ()
end)
 in ( LrTable.NT 94, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 304, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( _, LBRACE1left, _))
 :: rest671)) => let val  result = MlyValue.ffiAtty (fn _ => ())
 in ( LrTable.NT 94, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 305, ( ( _, ( MlyValue.ffiAtty ffiAtty2, _, ffiAtty2right)) :: _
 :: ( _, ( MlyValue.ffiAtty ffiAtty1, ffiAtty1left, _)) :: rest671))
 => let val  result = MlyValue.ffitupleseq (fn _ => let val  ffiAtty1
 = ffiAtty1 ()
 val  ffiAtty2 = ffiAtty2 ()
 in ()
end)
 in ( LrTable.NT 95, ( result, ffiAtty1left, ffiAtty2right), rest671)

end
|  ( 306, ( ( _, ( MlyValue.ffitupleseq ffitupleseq1, _, 
ffitupleseq1right)) :: _ :: ( _, ( MlyValue.ffiAtty ffiAtty1, 
ffiAtty1left, _)) :: rest671)) => let val  result = 
MlyValue.ffitupleseq (fn _ => let val  ffiAtty1 = ffiAtty1 ()
 val  ffitupleseq1 = ffitupleseq1 ()
 in ()
end)
 in ( LrTable.NT 95, ( result, ffiAtty1left, ffitupleseq1right), 
rest671)
end
|  ( 307, ( ( _, ( MlyValue.ffitupleseq ffitupleseq1, ffitupleseq1left
, ffitupleseq1right)) :: rest671)) => let val  result = 
MlyValue.ffiTupleTy (fn _ => let val  ffitupleseq1 = ffitupleseq1 ()
 in ()
end)
 in ( LrTable.NT 96, ( result, ffitupleseq1left, ffitupleseq1right), 
rest671)
end
|  ( 308, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( _, LPAREN1left, _))
 :: rest671)) => let val  result = MlyValue.ffiFunArg (fn _ => ())
 in ( LrTable.NT 97, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 309, ( ( _, ( MlyValue.ffiArgs ffiArgs1, ffiArgs1left, 
ffiArgs1right)) :: rest671)) => let val  result = MlyValue.ffiFunArg
 (fn _ => let val  ffiArgs1 = ffiArgs1 ()
 in ()
end)
 in ( LrTable.NT 97, ( result, ffiArgs1left, ffiArgs1right), rest671)

end
|  ( 310, ( ( _, ( MlyValue.ffiTupleTy ffiTupleTy1, ffiTupleTy1left, 
ffiTupleTy1right)) :: rest671)) => let val  result = 
MlyValue.ffiFunArg (fn _ => let val  ffiTupleTy1 = ffiTupleTy1 ()
 in ()
end)
 in ( LrTable.NT 97, ( result, ffiTupleTy1left, ffiTupleTy1right), 
rest671)
end
|  ( 311, ( ( _, ( MlyValue.ffity ffity1, _, ffity1right)) :: _ :: ( _
, ( MlyValue.ffiFunArg ffiFunArg1, ffiFunArg1left, _)) :: rest671)) =>
 let val  result = MlyValue.ffiFunty (fn _ => let val  ffiFunArg1 = 
ffiFunArg1 ()
 val  ffity1 = ffity1 ()
 in ()
end)
 in ( LrTable.NT 98, ( result, ffiFunArg1left, ffity1right), rest671)

end
|  ( 312, ( ( _, ( MlyValue.ffity ffity1, _, ffity1right)) :: _ :: ( _
, ( MlyValue.ffiFunArg ffiFunArg1, _, _)) :: ( _, ( MlyValue.fficconv 
fficconv1, fficconv1left, _)) :: rest671)) => let val  result = 
MlyValue.ffiFunty (fn _ => let val  fficconv1 = fficconv1 ()
 val  ffiFunArg1 = ffiFunArg1 ()
 val  ffity1 = ffity1 ()
 in ()
end)
 in ( LrTable.NT 98, ( result, fficconv1left, ffity1right), rest671)

end
|  ( 313, ( ( _, ( _, CDECL1left, CDECL1right)) :: rest671)) => let
 val  result = MlyValue.fficconv (fn _ => ())
 in ( LrTable.NT 99, ( result, CDECL1left, CDECL1right), rest671)
end
|  ( 314, ( ( _, ( _, STDCALL1left, STDCALL1right)) :: rest671)) =>
 let val  result = MlyValue.fficconv (fn _ => ())
 in ( LrTable.NT 99, ( result, STDCALL1left, STDCALL1right), rest671)

end
|  ( 315, ( ( _, ( MlyValue.ffiAtty ffiAtty1, ffiAtty1left, 
ffiAtty1right)) :: rest671)) => let val  result = MlyValue.ffity (fn _
 => let val  ffiAtty1 = ffiAtty1 ()
 in ()
end)
 in ( LrTable.NT 100, ( result, ffiAtty1left, ffiAtty1right), rest671)

end
|  ( 316, ( ( _, ( MlyValue.ffiFunty ffiFunty1, ffiFunty1left, 
ffiFunty1right)) :: rest671)) => let val  result = MlyValue.ffity (fn
 _ => let val  ffiFunty1 = ffiFunty1 ()
 in ()
end)
 in ( LrTable.NT 100, ( result, ffiFunty1left, ffiFunty1right), 
rest671)
end
|  ( 317, ( ( _, ( MlyValue.ffiTupleTy ffiTupleTy1, ffiTupleTy1left, 
ffiTupleTy1right)) :: rest671)) => let val  result = MlyValue.ffity
 (fn _ => let val  ffiTupleTy1 = ffiTupleTy1 ()
 in ()
end)
 in ( LrTable.NT 100, ( result, ffiTupleTy1left, ffiTupleTy1right), 
rest671)
end
|  ( 318, ( rest671)) => let val  result = 
MlyValue.header_format_comment_list (fn _ => ([]))
 in ( LrTable.NT 101, ( result, defaultPos, defaultPos), rest671)
end
|  ( 319, ( ( _, ( MlyValue.header_format_comment_list 
header_format_comment_list1, _, header_format_comment_list1right)) ::
 _ :: ( _, ( MlyValue.header_format_specs header_format_specs1, _, _))
 :: ( _, ( _, FORMATCOMMENTSTART1left, _)) :: rest671)) => let val  
result = MlyValue.header_format_comment_list (fn _ => let val  (
header_format_specs as header_format_specs1) = header_format_specs1 ()
 val  (header_format_comment_list as header_format_comment_list1) = 
header_format_comment_list1 ()
 in (header_format_specs :: header_format_comment_list)
end)
 in ( LrTable.NT 101, ( result, FORMATCOMMENTSTART1left, 
header_format_comment_list1right), rest671)
end
|  ( 320, ( rest671)) => let val  result = 
MlyValue.header_format_specs (fn _ => (
{
             destinationOpt = NONE,
             funHeaderOpt = NONE,
             formatters = [],
             params = [],
             ditto = [],
             prefix = Ast.DefaultFormatterPrefix
           }
))
 in ( LrTable.NT 102, ( result, defaultPos, defaultPos), rest671)
end
|  ( 321, ( ( _, ( MlyValue.header_format_specs header_format_specs1,
 _, header_format_specs1right)) :: ( _, ( MlyValue.ditto_spec 
ditto_spec1, ditto_spec1left, _)) :: rest671)) => let val  result = 
MlyValue.header_format_specs (fn _ => let val  (ditto_spec as 
ditto_spec1) = ditto_spec1 ()
 val  (header_format_specs as header_format_specs1) = 
header_format_specs1 ()
 in (
{
             destinationOpt = #destinationOpt header_format_specs,
             funHeaderOpt = #funHeaderOpt header_format_specs,
             formatters = #formatters header_format_specs,
             params = #params header_format_specs,
             ditto = [ditto_spec],
             prefix = #prefix header_format_specs
           }
)
end)
 in ( LrTable.NT 102, ( result, ditto_spec1left, 
header_format_specs1right), rest671)
end
|  ( 322, ( ( _, ( MlyValue.header_format_specs header_format_specs1,
 _, header_format_specs1right)) :: ( _, ( MlyValue.prefix_spec 
prefix_spec1, prefix_spec1left, _)) :: rest671)) => let val  result = 
MlyValue.header_format_specs (fn _ => let val  (prefix_spec as 
prefix_spec1) = prefix_spec1 ()
 val  (header_format_specs as header_format_specs1) = 
header_format_specs1 ()
 in (
{
             destinationOpt = #destinationOpt header_format_specs,
             funHeaderOpt = #funHeaderOpt header_format_specs,
             formatters = #formatters header_format_specs,
             params = #params header_format_specs,
             ditto = #ditto header_format_specs,
             prefix = prefix_spec
           }
)
end)
 in ( LrTable.NT 102, ( result, prefix_spec1left, 
header_format_specs1right), rest671)
end
|  ( 323, ( ( _, ( MlyValue.header_format_specs header_format_specs1,
 _, header_format_specs1right)) :: ( _, ( MlyValue.formatter_spec 
formatter_spec1, formatter_spec1left, _)) :: rest671)) => let val  
result = MlyValue.header_format_specs (fn _ => let val  (
formatter_spec as formatter_spec1) = formatter_spec1 ()
 val  (header_format_specs as header_format_specs1) = 
header_format_specs1 ()
 in (
{
             destinationOpt = #destinationOpt header_format_specs,
             funHeaderOpt = #funHeaderOpt header_format_specs,
             formatters = formatter_spec :: (#formatters header_format_specs),
             params = #params header_format_specs,
             ditto = #ditto header_format_specs,
             prefix = #prefix header_format_specs
           }
)
end)
 in ( LrTable.NT 102, ( result, formatter_spec1left, 
header_format_specs1right), rest671)
end
|  ( 324, ( ( _, ( MlyValue.header_format_specs header_format_specs1,
 _, header_format_specs1right)) :: ( _, ( MlyValue.formatparams_spec 
formatparams_spec1, formatparams_spec1left, _)) :: rest671)) => let
 val  result = MlyValue.header_format_specs (fn _ => let val  (
formatparams_spec as formatparams_spec1) = formatparams_spec1 ()
 val  (header_format_specs as header_format_specs1) = 
header_format_specs1 ()
 in (
{
             destinationOpt = #destinationOpt header_format_specs,
             funHeaderOpt = #funHeaderOpt header_format_specs,
             formatters = #formatters header_format_specs,
             params = formatparams_spec @ (#params header_format_specs),
             ditto = #ditto header_format_specs,
             prefix = #prefix header_format_specs
           }
)
end)
 in ( LrTable.NT 102, ( result, formatparams_spec1left, 
header_format_specs1right), rest671)
end
|  ( 325, ( ( _, ( MlyValue.header_format_specs header_format_specs1,
 _, header_format_specs1right)) :: ( _, ( MlyValue.destination_spec 
destination_spec1, destination_spec1left, _)) :: rest671)) => let val 
 result = MlyValue.header_format_specs (fn _ => let val  (
destination_spec as destination_spec1) = destination_spec1 ()
 val  (header_format_specs as header_format_specs1) = 
header_format_specs1 ()
 in (
{
             destinationOpt = SOME destination_spec,
             funHeaderOpt = #funHeaderOpt header_format_specs,
             formatters = #formatters header_format_specs,
             params = #params header_format_specs,
             ditto = #ditto header_format_specs,
             prefix = #prefix header_format_specs
           }
)
end)
 in ( LrTable.NT 102, ( result, destination_spec1left, 
header_format_specs1right), rest671)
end
|  ( 326, ( ( _, ( MlyValue.header_format_specs header_format_specs1,
 _, header_format_specs1right)) :: ( _, ( MlyValue.funheader_spec 
funheader_spec1, funheader_spec1left, _)) :: rest671)) => let val  
result = MlyValue.header_format_specs (fn _ => let val  (
funheader_spec as funheader_spec1) = funheader_spec1 ()
 val  (header_format_specs as header_format_specs1) = 
header_format_specs1 ()
 in (
{
             destinationOpt = #destinationOpt header_format_specs,
             funHeaderOpt = SOME funheader_spec,
             formatters = #formatters header_format_specs,
             params = #params header_format_specs,
             ditto = #ditto header_format_specs,
             prefix = #prefix header_format_specs
           }
)
end)
 in ( LrTable.NT 102, ( result, funheader_spec1left, 
header_format_specs1right), rest671)
end
|  ( 327, ( rest671)) => let val  result = 
MlyValue.inner_header_format_comment_list (fn _ => ([]))
 in ( LrTable.NT 103, ( result, defaultPos, defaultPos), rest671)
end
|  ( 328, ( ( _, ( MlyValue.inner_header_format_comment_list 
inner_header_format_comment_list1, _, 
inner_header_format_comment_list1right)) :: _ :: ( _, ( 
MlyValue.inner_header_format_specs inner_header_format_specs1, _, _))
 :: ( _, ( _, FORMATCOMMENTSTART1left, _)) :: rest671)) => let val  
result = MlyValue.inner_header_format_comment_list (fn _ => let val  (
inner_header_format_specs as inner_header_format_specs1) = 
inner_header_format_specs1 ()
 val  (inner_header_format_comment_list as 
inner_header_format_comment_list1) = inner_header_format_comment_list1
 ()
 in (inner_header_format_specs :: inner_header_format_comment_list)

end)
 in ( LrTable.NT 103, ( result, FORMATCOMMENTSTART1left, 
inner_header_format_comment_list1right), rest671)
end
|  ( 329, ( ( _, ( MlyValue.inner_header_format_comment_list 
inner_header_format_comment_list1, _, 
inner_header_format_comment_list1right)) :: _ :: ( _, ( _, 
FORMATCOMMENTSTART1left, _)) :: rest671)) => let val  result = 
MlyValue.inner_header_format_comment_list (fn _ => let val  (
inner_header_format_comment_list as inner_header_format_comment_list1)
 = inner_header_format_comment_list1 ()
 in (inner_header_format_comment_list)
end)
 in ( LrTable.NT 103, ( result, FORMATCOMMENTSTART1left, 
inner_header_format_comment_list1right), rest671)
end
|  ( 330, ( ( _, ( MlyValue.inner_header_format_spec 
inner_header_format_spec1, inner_header_format_spec1left, 
inner_header_format_spec1right)) :: rest671)) => let val  result = 
MlyValue.inner_header_format_specs (fn _ => let val  (
inner_header_format_spec as inner_header_format_spec1) = 
inner_header_format_spec1 ()
 in (inner_header_format_spec)
end)
 in ( LrTable.NT 104, ( result, inner_header_format_spec1left, 
inner_header_format_spec1right), rest671)
end
|  ( 331, ( ( _, ( MlyValue.inner_header_format_specs 
inner_header_format_specs1, _, inner_header_format_specs1right)) :: (
 _, ( MlyValue.inner_header_format_spec inner_header_format_spec1, 
inner_header_format_spec1left, _)) :: rest671)) => let val  result = 
MlyValue.inner_header_format_specs (fn _ => let val  (
inner_header_format_spec as inner_header_format_spec1) = 
inner_header_format_spec1 ()
 val  (inner_header_format_specs as inner_header_format_specs1) = 
inner_header_format_specs1 ()
 in (
{
             formatters = #formatters inner_header_format_spec
                          @ #formatters inner_header_format_specs,
             params = #params inner_header_format_spec
                      @ #params inner_header_format_specs,
             prefix = case #prefix inner_header_format_spec of
                          SOME x => SOME x
                        | NONE => #prefix inner_header_format_specs
           }
)
end)
 in ( LrTable.NT 104, ( result, inner_header_format_spec1left, 
inner_header_format_specs1right), rest671)
end
|  ( 332, ( ( _, ( MlyValue.formatparams_spec formatparams_spec1, 
formatparams_spec1left, formatparams_spec1right)) :: rest671)) => let
 val  result = MlyValue.inner_header_format_spec (fn _ => let val  (
formatparams_spec as formatparams_spec1) = formatparams_spec1 ()
 in (
{
             formatters = nil,
             params = formatparams_spec,
             prefix = NONE
           }
)
end)
 in ( LrTable.NT 105, ( result, formatparams_spec1left, 
formatparams_spec1right), rest671)
end
|  ( 333, ( ( _, ( MlyValue.ID ID1, _, ID1right)) :: ( _, ( _, 
PREFIXTAG1left, _)) :: rest671)) => let val  result = 
MlyValue.prefix_spec (fn _ => let val  (ID as ID1) = ID1 ()
 in (ID)
end)
 in ( LrTable.NT 107, ( result, PREFIXTAG1left, ID1right), rest671)

end
|  ( 334, ( ( _, ( MlyValue.ID ID1, _, ID1right)) :: ( _, ( _, 
DITTOTAG1left, _)) :: rest671)) => let val  result = 
MlyValue.ditto_spec (fn _ => let val  (ID as ID1) = ID1 ()
 in (ID)
end)
 in ( LrTable.NT 106, ( result, DITTOTAG1left, ID1right), rest671)
end
|  ( 335, ( rest671)) => let val  result = MlyValue.prefix_spec_opt
 (fn _ => (Ast.DefaultFormatterPrefix))
 in ( LrTable.NT 108, ( result, defaultPos, defaultPos), rest671)
end
|  ( 336, ( ( _, ( MlyValue.prefix_spec prefix_spec1, prefix_spec1left
, prefix_spec1right)) :: rest671)) => let val  result = 
MlyValue.prefix_spec_opt (fn _ => let val  (prefix_spec as 
prefix_spec1) = prefix_spec1 ()
 in (prefix_spec)
end)
 in ( LrTable.NT 108, ( result, prefix_spec1left, prefix_spec1right), 
rest671)
end
|  ( 337, ( ( _, ( MlyValue.qid qid2, _, qid2right)) :: _ :: ( _, ( 
MlyValue.qid qid1, _, _)) :: _ :: ( _, ( _, FORMATTERTAG1left, _)) :: 
rest671)) => let val  result = MlyValue.formatter_spec (fn _ => let
 val  qid1 = qid1 ()
 val  qid2 = qid2 ()
 in (qidToString qid1, qidToString qid2)
end)
 in ( LrTable.NT 109, ( result, FORMATTERTAG1left, qid2right), rest671
)
end
|  ( 338, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( 
MlyValue.formatparam_list formatparam_list1, _, _)) :: _ :: ( _, ( _, 
FORMATPARAMSTAG1left, _)) :: rest671)) => let val  result = 
MlyValue.formatparams_spec (fn _ => let val  (formatparam_list as 
formatparam_list1) = formatparam_list1 ()
 in (formatparam_list)
end)
 in ( LrTable.NT 110, ( result, FORMATPARAMSTAG1left, RPAREN1right), 
rest671)
end
|  ( 339, ( ( _, ( MlyValue.ID ID1, ID1left, ID1right)) :: rest671))
 => let val  result = MlyValue.formatparam_list (fn _ => let val  (ID
 as ID1) = ID1 ()
 in ([ID])
end)
 in ( LrTable.NT 111, ( result, ID1left, ID1right), rest671)
end
|  ( 340, ( ( _, ( MlyValue.formatparam_list formatparam_list1, _, 
formatparam_list1right)) :: _ :: ( _, ( MlyValue.ID ID1, ID1left, _))
 :: rest671)) => let val  result = MlyValue.formatparam_list (fn _ =>
 let val  (ID as ID1) = ID1 ()
 val  (formatparam_list as formatparam_list1) = formatparam_list1 ()
 in (ID :: formatparam_list)
end)
 in ( LrTable.NT 111, ( result, ID1left, formatparam_list1right), 
rest671)
end
|  ( 341, ( ( _, ( MlyValue.STRING STRING1, _, STRING1right)) :: ( _, 
( _, DESTINATIONTAG1left, _)) :: rest671)) => let val  result = 
MlyValue.destination_spec (fn _ => let val  (STRING as STRING1) = 
STRING1 ()
 in (STRING)
end)
 in ( LrTable.NT 112, ( result, DESTINATIONTAG1left, STRING1right), 
rest671)
end
|  ( 342, ( ( _, ( MlyValue.STRING STRING1, _, STRING1right)) :: ( _, 
( _, HEADERTAG1left, _)) :: rest671)) => let val  result = 
MlyValue.funheader_spec (fn _ => let val  (STRING as STRING1) = 
STRING1 ()
 in (STRING)
end)
 in ( LrTable.NT 113, ( result, HEADERTAG1left, STRING1right), rest671
)
end
|  ( 343, ( ( _, ( _, _, FORMATCOMMENTEND1right)) :: ( _, ( 
MlyValue.localformattags localformattags1, _, _)) :: ( _, ( 
MlyValue.formattag formattag1, _, _)) :: ( _, ( 
MlyValue.prefix_spec_opt prefix_spec_opt1, _, _)) :: ( _, ( _, 
FORMATCOMMENTSTART1left, _)) :: rest671)) => let val  result = 
MlyValue.defining_format_comment (fn _ => let val  (prefix_spec_opt
 as prefix_spec_opt1) = prefix_spec_opt1 ()
 val  (formattag as formattag1) = formattag1 ()
 val  (localformattags as localformattags1) = localformattags1 ()
 in (
{
                             prefix = prefix_spec_opt,
                             primaryTag = formattag,
                             localTags = localformattags
                           }
)
end)
 in ( LrTable.NT 114, ( result, FORMATCOMMENTSTART1left, 
FORMATCOMMENTEND1right), rest671)
end
|  ( 344, ( rest671)) => let val  result = 
MlyValue.defining_format_comment_list (fn _ => ([]))
 in ( LrTable.NT 115, ( result, defaultPos, defaultPos), rest671)
end
|  ( 345, ( ( _, ( MlyValue.defining_format_comment 
defining_format_comment1, _, defining_format_comment1right)) :: ( _, (
 MlyValue.defining_format_comment_list defining_format_comment_list1, 
defining_format_comment_list1left, _)) :: rest671)) => let val  result
 = MlyValue.defining_format_comment_list (fn _ => let val  (
defining_format_comment_list as defining_format_comment_list1) = 
defining_format_comment_list1 ()
 val  (defining_format_comment as defining_format_comment1) = 
defining_format_comment1 ()
 in (
defining_format_comment_list @
                                [defining_format_comment]
)
end)
 in ( LrTable.NT 115, ( result, defining_format_comment_list1left, 
defining_format_comment1right), rest671)
end
|  ( 346, ( ( _, ( _, _, FORMATCOMMENTEND1right)) :: _ :: ( _, ( 
MlyValue.defining_format_comment_list defining_format_comment_list1, 
defining_format_comment_list1left, _)) :: rest671)) => let val  result
 = MlyValue.defining_format_comment_list (fn _ => let val  (
defining_format_comment_list as defining_format_comment_list1) = 
defining_format_comment_list1 ()
 in (defining_format_comment_list)
end)
 in ( LrTable.NT 115, ( result, defining_format_comment_list1left, 
FORMATCOMMENTEND1right), rest671)
end
|  ( 347, ( ( _, ( _, _, FORMATCOMMENTEND1right)) :: _ :: ( _, ( 
MlyValue.prefix_spec_opt prefix_spec_opt1, _, _)) :: _ :: ( _, ( 
MlyValue.defining_format_comment_list defining_format_comment_list1, 
defining_format_comment_list1left, _)) :: rest671)) => let val  result
 = MlyValue.defining_format_comment_list (fn _ => let val  (
defining_format_comment_list as defining_format_comment_list1) = 
defining_format_comment_list1 ()
 val  (prefix_spec_opt as prefix_spec_opt1) = prefix_spec_opt1 ()
 in (
let
                                  val {primaryTag, localTags, ...} =
                                      List.last defining_format_comment_list
                                in
                                  defining_format_comment_list @
                                  [{
                                     prefix = prefix_spec_opt,
                                     primaryTag = primaryTag,
                                     localTags = localTags
                                   }]
                                end
                                handle Empty => defining_format_comment_list
)
end)
 in ( LrTable.NT 115, ( result, defining_format_comment_list1left, 
FORMATCOMMENTEND1right), rest671)
end
|  ( 348, ( rest671)) => let val  result = 
MlyValue.defining_format_comment_list_with_inners (fn _ => ((nil, nil)
))
 in ( LrTable.NT 116, ( result, defaultPos, defaultPos), rest671)
end
|  ( 349, ( ( _, ( MlyValue.defining_format_comment_list_with_inners 
defining_format_comment_list_with_inners1, _, 
defining_format_comment_list_with_inners1right)) :: _ :: ( _, ( 
MlyValue.inner_header_format_specs inner_header_format_specs1, _, _))
 :: ( _, ( _, FORMATCOMMENTSTART1left, _)) :: rest671)) => let val  
result = MlyValue.defining_format_comment_list_with_inners (fn _ =>
 let val  (inner_header_format_specs as inner_header_format_specs1) = 
inner_header_format_specs1 ()
 val  (defining_format_comment_list_with_inners as 
defining_format_comment_list_with_inners1) = 
defining_format_comment_list_with_inners1 ()
 in (

           (inner_header_format_specs
            :: #1 defining_format_comment_list_with_inners,
            #2 defining_format_comment_list_with_inners)
          
)
end)
 in ( LrTable.NT 116, ( result, FORMATCOMMENTSTART1left, 
defining_format_comment_list_with_inners1right), rest671)
end
|  ( 350, ( ( _, ( MlyValue.defining_format_comment_list_with_inners 
defining_format_comment_list_with_inners1, _, 
defining_format_comment_list_with_inners1right)) :: ( _, ( 
MlyValue.defining_format_comment defining_format_comment1, 
defining_format_comment1left, _)) :: rest671)) => let val  result = 
MlyValue.defining_format_comment_list_with_inners (fn _ => let val  (
defining_format_comment as defining_format_comment1) = 
defining_format_comment1 ()
 val  (defining_format_comment_list_with_inners as 
defining_format_comment_list_with_inners1) = 
defining_format_comment_list_with_inners1 ()
 in (

           (#1 defining_format_comment_list_with_inners,
            defining_format_comment
            :: #2 defining_format_comment_list_with_inners)
          
)
end)
 in ( LrTable.NT 116, ( result, defining_format_comment1left, 
defining_format_comment_list_with_inners1right), rest671)
end
|  ( 351, ( ( _, ( MlyValue.defining_format_comment_list_with_inners 
defining_format_comment_list_with_inners1, _, 
defining_format_comment_list_with_inners1right)) :: _ :: ( _, ( _, 
FORMATCOMMENTSTART1left, _)) :: rest671)) => let val  result = 
MlyValue.defining_format_comment_list_with_inners (fn _ => let val  (
defining_format_comment_list_with_inners as 
defining_format_comment_list_with_inners1) = 
defining_format_comment_list_with_inners1 ()
 in (defining_format_comment_list_with_inners)
end)
 in ( LrTable.NT 116, ( result, FORMATCOMMENTSTART1left, 
defining_format_comment_list_with_inners1right), rest671)
end
|  ( 352, ( ( _, ( MlyValue.templates templates1, _, templates1right))
 :: _ :: ( _, ( MlyValue.typepat typepat1, _, _)) :: _ :: ( _, ( _, 
FORMATTAG1left, _)) :: rest671)) => let val  result = 
MlyValue.formattag (fn _ => let val  (typepat as typepat1) = typepat1
 ()
 val  (templates as templates1) = templates1 ()
 in ({id = NONE, typepat = typepat, templates = templates})
end)
 in ( LrTable.NT 117, ( result, FORMATTAG1left, templates1right), 
rest671)
end
|  ( 353, ( ( _, ( MlyValue.templates templates1, _, templates1right))
 :: ( _, ( _, FORMATTAG1left, _)) :: rest671)) => let val  result = 
MlyValue.formattag (fn _ => let val  (templates as templates1) = 
templates1 ()
 in ({id = NONE, typepat = VarTyPat "_", templates = templates})
end)
 in ( LrTable.NT 117, ( result, FORMATTAG1left, templates1right), 
rest671)
end
|  ( 354, ( rest671)) => let val  result = MlyValue.localformattags
 (fn _ => ([]))
 in ( LrTable.NT 118, ( result, defaultPos, defaultPos), rest671)
end
|  ( 355, ( ( _, ( MlyValue.localformattags localformattags1, _, 
localformattags1right)) :: ( _, ( MlyValue.localformattag 
localformattag1, localformattag1left, _)) :: rest671)) => let val  
result = MlyValue.localformattags (fn _ => let val  (localformattag
 as localformattag1) = localformattag1 ()
 val  (localformattags as localformattags1) = localformattags1 ()
 in (localformattag :: localformattags)
end)
 in ( LrTable.NT 118, ( result, localformattag1left, 
localformattags1right), rest671)
end
|  ( 356, ( ( _, ( MlyValue.templates templates1, _, templates1right))
 :: _ :: ( _, ( MlyValue.typepat typepat1, _, _)) :: _ :: ( _, ( 
MlyValue.LOCALFORMATTAG LOCALFORMATTAG1, LOCALFORMATTAG1left, _)) :: 
rest671)) => let val  result = MlyValue.localformattag (fn _ => let
 val  (LOCALFORMATTAG as LOCALFORMATTAG1) = LOCALFORMATTAG1 ()
 val  (typepat as typepat1) = typepat1 ()
 val  (templates as templates1) = templates1 ()
 in (
{
                   id = SOME(LOCALFORMATTAG),
                   typepat = typepat,
                   templates = templates
                 }
)
end)
 in ( LrTable.NT 119, ( result, LOCALFORMATTAG1left, templates1right),
 rest671)
end
|  ( 357, ( ( _, ( MlyValue.tuple_typepat tuple_typepat1, (
tuple_typepatleft as tuple_typepat1left), (tuple_typepatright as 
tuple_typepat1right))) :: rest671)) => let val  result = 
MlyValue.typepat (fn _ => let val  (tuple_typepat as tuple_typepat1) =
 tuple_typepat1 ()
 in (
marktypepat
           (TupleTyPat tuple_typepat, tuple_typepatleft, tuple_typepatright)
)
end)
 in ( LrTable.NT 120, ( result, tuple_typepat1left, 
tuple_typepat1right), rest671)
end
|  ( 358, ( ( _, ( MlyValue.typepat' typepat'1, typepat'1left, 
typepat'1right)) :: rest671)) => let val  result = MlyValue.typepat
 (fn _ => let val  (typepat' as typepat'1) = typepat'1 ()
 in (typepat')
end)
 in ( LrTable.NT 120, ( result, typepat'1left, typepat'1right), 
rest671)
end
|  ( 359, ( ( _, ( MlyValue.tuple_typepat tuple_typepat1, _, 
tuple_typepat1right)) :: _ :: ( _, ( MlyValue.typepat' typepat'1, 
typepat'1left, _)) :: rest671)) => let val  result = 
MlyValue.tuple_typepat (fn _ => let val  (typepat' as typepat'1) = 
typepat'1 ()
 val  (tuple_typepat as tuple_typepat1) = tuple_typepat1 ()
 in (typepat' :: tuple_typepat)
end)
 in ( LrTable.NT 122, ( result, typepat'1left, tuple_typepat1right), 
rest671)
end
|  ( 360, ( ( _, ( MlyValue.typepat' typepat'2, _, typepat'2right)) ::
 _ :: ( _, ( MlyValue.typepat' typepat'1, typepat'1left, _)) :: 
rest671)) => let val  result = MlyValue.tuple_typepat (fn _ => let
 val  typepat'1 = typepat'1 ()
 val  typepat'2 = typepat'2 ()
 in ([typepat'1, typepat'2])
end)
 in ( LrTable.NT 122, ( result, typepat'1left, typepat'2right), 
rest671)
end
|  ( 361, ( ( _, ( _, _, (RBRACEright as RBRACE1right))) :: ( _, ( 
MlyValue.typepat_rows typepat_rows1, _, _)) :: ( _, ( _, (LBRACEleft
 as LBRACE1left), _)) :: rest671)) => let val  result = 
MlyValue.typepat' (fn _ => let val  (typepat_rows as typepat_rows1) = 
typepat_rows1 ()
 in (marktypepat(RecordTyPat typepat_rows, LBRACEleft, RBRACEright))

end)
 in ( LrTable.NT 121, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 362, ( ( _, ( _, _, (RBRACEright as RBRACE1right))) :: ( _, ( _,
 (LBRACEleft as LBRACE1left), _)) :: rest671)) => let val  result = 
MlyValue.typepat' (fn _ => (
marktypepat(RecordTyPat ([], false), LBRACEleft, RBRACEright)))
 in ( LrTable.NT 121, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 363, ( ( _, ( _, _, (RPARENright as RPAREN1right))) :: ( _, ( 
MlyValue.typepat typepat1, _, _)) :: ( _, ( _, (LPARENleft as 
LPAREN1left), _)) :: rest671)) => let val  result = MlyValue.typepat'
 (fn _ => let val  (typepat as typepat1) = typepat1 ()
 in (marktypepat(typepat, LPARENleft, RPARENright))
end)
 in ( LrTable.NT 121, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 364, ( ( _, ( MlyValue.atypepat atypepat1, (atypepatleft as 
atypepat1left), (atypepatright as atypepat1right))) :: rest671)) =>
 let val  result = MlyValue.typepat' (fn _ => let val  (atypepat as 
atypepat1) = atypepat1 ()
 in (marktypepat(atypepat, atypepatleft, atypepatright))
end)
 in ( LrTable.NT 121, ( result, atypepat1left, atypepat1right), 
rest671)
end
|  ( 365, ( ( _, ( MlyValue.ID ID1, _, ID1right)) :: _ :: ( _, ( 
MlyValue.atypepat_list atypepat_list1, _, _)) :: ( _, ( _, LPAREN1left
, _)) :: rest671)) => let val  result = MlyValue.atypepat (fn _ => let
 val  (atypepat_list as atypepat_list1) = atypepat_list1 ()
 val  (ID as ID1) = ID1 ()
 in (TyConTyPat(ID, atypepat_list))
end)
 in ( LrTable.NT 125, ( result, LPAREN1left, ID1right), rest671)
end
|  ( 366, ( ( _, ( MlyValue.ID ID2, _, ID2right)) :: _ :: ( _, ( 
MlyValue.ID ID1, _, _)) :: _ :: ( _, ( MlyValue.atypepat_list 
atypepat_list1, _, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) =>
 let val  result = MlyValue.atypepat (fn _ => let val  (atypepat_list
 as atypepat_list1) = atypepat_list1 ()
 val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 in (TypedTyConTyPat(ID1, atypepat_list, ID2))
end)
 in ( LrTable.NT 125, ( result, LPAREN1left, ID2right), rest671)
end
|  ( 367, ( ( _, ( MlyValue.ID ID1, _, ID1right)) :: ( _, ( 
MlyValue.atypepat atypepat1, atypepat1left, _)) :: rest671)) => let
 val  result = MlyValue.atypepat (fn _ => let val  (atypepat as 
atypepat1) = atypepat1 ()
 val  (ID as ID1) = ID1 ()
 in (TyConTyPat(ID, [atypepat]))
end)
 in ( LrTable.NT 125, ( result, atypepat1left, ID1right), rest671)
end
|  ( 368, ( ( _, ( MlyValue.ID ID2, _, ID2right)) :: _ :: ( _, ( 
MlyValue.ID ID1, _, _)) :: ( _, ( MlyValue.atypepat atypepat1, 
atypepat1left, _)) :: rest671)) => let val  result = MlyValue.atypepat
 (fn _ => let val  (atypepat as atypepat1) = atypepat1 ()
 val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 in (TypedTyConTyPat(ID1, [atypepat], ID2))
end)
 in ( LrTable.NT 125, ( result, atypepat1left, ID2right), rest671)
end
|  ( 369, ( ( _, ( MlyValue.ID ID1, ID1left, ID1right)) :: rest671))
 => let val  result = MlyValue.atypepat (fn _ => let val  (ID as ID1)
 = ID1 ()
 in (VarTyPat ID)
end)
 in ( LrTable.NT 125, ( result, ID1left, ID1right), rest671)
end
|  ( 370, ( ( _, ( MlyValue.ID ID2, _, ID2right)) :: _ :: ( _, ( 
MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.atypepat (fn _ => let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 in (TypedVarTyPat (ID1, ID2))
end)
 in ( LrTable.NT 125, ( result, ID1left, ID2right), rest671)
end
|  ( 371, ( ( _, ( _, WILD1left, WILD1right)) :: rest671)) => let val 
 result = MlyValue.atypepat (fn _ => (WildTyPat))
 in ( LrTable.NT 125, ( result, WILD1left, WILD1right), rest671)
end
|  ( 372, ( ( _, ( MlyValue.atypepat_list atypepat_list1, _, 
atypepat_list1right)) :: _ :: ( _, ( MlyValue.atypepat atypepat1, 
atypepat1left, _)) :: rest671)) => let val  result = 
MlyValue.atypepat_list (fn _ => let val  (atypepat as atypepat1) = 
atypepat1 ()
 val  (atypepat_list as atypepat_list1) = atypepat_list1 ()
 in (atypepat :: atypepat_list)
end)
 in ( LrTable.NT 126, ( result, atypepat1left, atypepat_list1right), 
rest671)
end
|  ( 373, ( ( _, ( MlyValue.atypepat atypepat2, _, atypepat2right)) ::
 _ :: ( _, ( MlyValue.atypepat atypepat1, atypepat1left, _)) :: 
rest671)) => let val  result = MlyValue.atypepat_list (fn _ => let
 val  atypepat1 = atypepat1 ()
 val  atypepat2 = atypepat2 ()
 in ([atypepat1, atypepat2])
end)
 in ( LrTable.NT 126, ( result, atypepat1left, atypepat2right), 
rest671)
end
|  ( 374, ( ( _, ( MlyValue.typepat_rows typepat_rows1, _, 
typepat_rows1right)) :: _ :: ( _, ( MlyValue.typepat_field 
typepat_field1, typepat_field1left, _)) :: rest671)) => let val  
result = MlyValue.typepat_rows (fn _ => let val  (typepat_field as 
typepat_field1) = typepat_field1 ()
 val  (typepat_rows as typepat_rows1) = typepat_rows1 ()
 in (typepat_field :: (#1 typepat_rows), #2 typepat_rows)
end)
 in ( LrTable.NT 123, ( result, typepat_field1left, typepat_rows1right
), rest671)
end
|  ( 375, ( ( _, ( MlyValue.typepat_field typepat_field1, 
typepat_field1left, typepat_field1right)) :: rest671)) => let val  
result = MlyValue.typepat_rows (fn _ => let val  (typepat_field as 
typepat_field1) = typepat_field1 ()
 in ([typepat_field], false)
end)
 in ( LrTable.NT 123, ( result, typepat_field1left, 
typepat_field1right), rest671)
end
|  ( 376, ( ( _, ( _, DOTDOTDOT1left, DOTDOTDOT1right)) :: rest671))
 => let val  result = MlyValue.typepat_rows (fn _ => ([], true))
 in ( LrTable.NT 123, ( result, DOTDOTDOT1left, DOTDOTDOT1right), 
rest671)
end
|  ( 377, ( ( _, ( MlyValue.selector selector1, selector1left, 
selector1right)) :: rest671)) => let val  result = 
MlyValue.typepat_field (fn _ => let val  (selector as selector1) = 
selector1 ()
 in (selector, (VarTyPat selector))
end)
 in ( LrTable.NT 124, ( result, selector1left, selector1right), 
rest671)
end
|  ( 378, ( ( _, ( MlyValue.typepat typepat1, _, typepat1right)) :: _
 :: ( _, ( MlyValue.selector selector1, selector1left, _)) :: rest671)
) => let val  result = MlyValue.typepat_field (fn _ => let val  (
selector as selector1) = selector1 ()
 val  (typepat as typepat1) = typepat1 ()
 in (selector, typepat)
end)
 in ( LrTable.NT 124, ( result, selector1left, typepat1right), rest671
)
end
|  ( 379, ( ( _, ( MlyValue.templates templates1, _, templates1right))
 :: ( _, ( MlyValue.template template1, template1left, _)) :: rest671)
) => let val  result = MlyValue.templates (fn _ => let val  (template
 as template1) = template1 ()
 val  (templates as templates1) = templates1 ()
 in (template :: templates)
end)
 in ( LrTable.NT 127, ( result, template1left, templates1right), 
rest671)
end
|  ( 380, ( ( _, ( MlyValue.templates templates2, _, templates2right))
 :: ( _, ( _, RBRACKETleft, RBRACKETright)) :: ( _, ( 
MlyValue.templates templates1, _, _)) :: ( _, ( MlyValue.STARTOFINDENT
 STARTOFINDENT1, (STARTOFINDENTleft as STARTOFINDENT1left), 
STARTOFINDENTright)) :: rest671)) => let val  result = 
MlyValue.templates (fn _ => let val  (STARTOFINDENT as STARTOFINDENT1)
 = STARTOFINDENT1 ()
 val  templates1 = templates1 ()
 val  templates2 = templates2 ()
 in (
marktemplate
             (
              StartOfIndent STARTOFINDENT,
              STARTOFINDENTleft,
              STARTOFINDENTright
             ) ::
             templates1 @
             [marktemplate (EndOfIndent, RBRACKETleft, RBRACKETright)] @
             templates2
)
end)
 in ( LrTable.NT 127, ( result, STARTOFINDENT1left, templates2right), 
rest671)
end
|  ( 381, ( rest671)) => let val  result = MlyValue.templates (fn _ =>
 ([]))
 in ( LrTable.NT 127, ( result, defaultPos, defaultPos), rest671)
end
|  ( 382, ( ( _, ( MlyValue.STRING STRING1, (STRINGleft as STRING1left
), (STRINGright as STRING1right))) :: rest671)) => let val  result = 
MlyValue.template (fn _ => let val  (STRING as STRING1) = STRING1 ()
 in (marktemplate(Term STRING, STRINGleft, STRINGright))
end)
 in ( LrTable.NT 128, ( result, STRING1left, STRING1right), rest671)

end
|  ( 383, ( ( _, ( _, (NEWLINEleft as NEWLINE1left), (NEWLINEright as 
NEWLINE1right))) :: rest671)) => let val  result = MlyValue.template
 (fn _ => (marktemplate(Newline, NEWLINEleft, NEWLINEright)))
 in ( LrTable.NT 128, ( result, NEWLINE1left, NEWLINE1right), rest671)

end
|  ( 384, ( ( _, ( _, _, (RBRACEright as RBRACE1right))) :: ( _, ( 
MlyValue.templates templates1, _, _)) :: _ :: ( _, ( 
MlyValue.ASSOCINDICATOR ASSOCINDICATOR1, (ASSOCINDICATORleft as 
ASSOCINDICATOR1left), _)) :: rest671)) => let val  result = 
MlyValue.template (fn _ => let val  (ASSOCINDICATOR as ASSOCINDICATOR1
) = ASSOCINDICATOR1 ()
 val  (templates as templates1) = templates1 ()
 in (
marktemplate
            (
              Guard(SOME(ASSOCINDICATOR), templates),
              ASSOCINDICATORleft,
              RBRACEright
            )
)
end)
 in ( LrTable.NT 128, ( result, ASSOCINDICATOR1left, RBRACE1right), 
rest671)
end
|  ( 385, ( ( _, ( _, _, (RBRACEright as RBRACE1right))) :: ( _, ( 
MlyValue.templates templates1, _, _)) :: ( _, ( _, (LBRACEleft as 
LBRACE1left), _)) :: rest671)) => let val  result = MlyValue.template
 (fn _ => let val  (templates as templates1) = templates1 ()
 in (marktemplate(Guard(NONE, templates), LBRACEleft, RBRACEright))

end)
 in ( LrTable.NT 128, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 386, ( ( _, ( MlyValue.FORMATINDICATOR FORMATINDICATOR1, (
FORMATINDICATORleft as FORMATINDICATOR1left), (FORMATINDICATORright
 as FORMATINDICATOR1right))) :: rest671)) => let val  result = 
MlyValue.template (fn _ => let val  (FORMATINDICATOR as 
FORMATINDICATOR1) = FORMATINDICATOR1 ()
 in (
marktemplate
            (
              Indicator FORMATINDICATOR,
              FORMATINDICATORleft,
              FORMATINDICATORright
            )
)
end)
 in ( LrTable.NT 128, ( result, FORMATINDICATOR1left, 
FORMATINDICATOR1right), rest671)
end
|  ( 387, ( ( _, ( MlyValue.inst inst1, (instleft as inst1left), (
instright as inst1right))) :: rest671)) => let val  result = 
MlyValue.template (fn _ => let val  (inst as inst1) = inst1 ()
 in (marktemplate(Instance inst, instleft, instright))
end)
 in ( LrTable.NT 128, ( result, inst1left, inst1right), rest671)
end
|  ( 388, ( ( _, ( MlyValue.opt_typed opt_typed1, _, (opt_typedright
 as opt_typed1right))) :: ( _, ( MlyValue.ID ID1, (IDleft as ID1left),
 _)) :: rest671)) => let val  result = MlyValue.inst (fn _ => let val 
 (ID as ID1) = ID1 ()
 val  (opt_typed as opt_typed1) = opt_typed1 ()
 in (markinstance(Atom (ID, opt_typed), IDleft, opt_typedright))
end)
 in ( LrTable.NT 129, ( result, ID1left, opt_typed1right), rest671)

end
|  ( 389, ( ( _, ( _, _, RPAREN2right)) :: ( _, ( 
MlyValue.templates_comma_list templates_comma_list1, _, _)) :: _ :: (
 _, ( _, _, RPARENright)) :: ( _, ( MlyValue.insts insts1, _, _)) :: _
 :: ( _, ( MlyValue.opt_typed opt_typed1, _, _)) :: ( _, ( MlyValue.ID
 ID1, (IDleft as ID1left), _)) :: rest671)) => let val  result = 
MlyValue.inst (fn _ => let val  (ID as ID1) = ID1 ()
 val  (opt_typed as opt_typed1) = opt_typed1 ()
 val  (insts as insts1) = insts1 ()
 val  (templates_comma_list as templates_comma_list1) = 
templates_comma_list1 ()
 in (
markinstance
        (App(ID, opt_typed, insts, templates_comma_list),IDleft, RPARENright)
)
end)
 in ( LrTable.NT 129, ( result, ID1left, RPAREN2right), rest671)
end
|  ( 390, ( ( _, ( _, _, RPAREN2right)) :: ( _, ( 
MlyValue.templates_comma_list templates_comma_list1, _, _)) :: _ :: (
 _, ( _, _, RPARENright)) :: _ :: ( _, ( MlyValue.opt_typed opt_typed1
, _, _)) :: ( _, ( MlyValue.ID ID1, (IDleft as ID1left), _)) :: 
rest671)) => let val  result = MlyValue.inst (fn _ => let val  (ID as 
ID1) = ID1 ()
 val  (opt_typed as opt_typed1) = opt_typed1 ()
 val  (templates_comma_list as templates_comma_list1) = 
templates_comma_list1 ()
 in (
markinstance
        (App(ID, opt_typed, [], templates_comma_list), IDleft, RPARENright)
)
end)
 in ( LrTable.NT 129, ( result, ID1left, RPAREN2right), rest671)
end
|  ( 391, ( ( _, ( _, _, (RPARENright as RPAREN1right))) :: ( _, ( 
MlyValue.insts insts1, _, _)) :: _ :: ( _, ( MlyValue.opt_typed 
opt_typed1, _, _)) :: ( _, ( MlyValue.ID ID1, (IDleft as ID1left), _))
 :: rest671)) => let val  result = MlyValue.inst (fn _ => let val  (ID
 as ID1) = ID1 ()
 val  (opt_typed as opt_typed1) = opt_typed1 ()
 val  (insts as insts1) = insts1 ()
 in (markinstance(App(ID, opt_typed, insts, []), IDleft, RPARENright))

end)
 in ( LrTable.NT 129, ( result, ID1left, RPAREN1right), rest671)
end
|  ( 392, ( ( _, ( _, _, (RPARENright as RPAREN1right))) :: _ :: ( _, 
( MlyValue.opt_typed opt_typed1, _, _)) :: ( _, ( MlyValue.ID ID1, (
IDleft as ID1left), _)) :: rest671)) => let val  result = 
MlyValue.inst (fn _ => let val  (ID as ID1) = ID1 ()
 val  (opt_typed as opt_typed1) = opt_typed1 ()
 in (markinstance(App(ID, opt_typed, [], []), IDleft, RPARENright))

end)
 in ( LrTable.NT 129, ( result, ID1left, RPAREN1right), rest671)
end
|  ( 393, ( rest671)) => let val  result = MlyValue.opt_typed (fn _ =>
 (NONE))
 in ( LrTable.NT 130, ( result, defaultPos, defaultPos), rest671)
end
|  ( 394, ( ( _, ( MlyValue.ID ID1, _, ID1right)) :: ( _, ( _, 
COLON1left, _)) :: rest671)) => let val  result = MlyValue.opt_typed
 (fn _ => let val  (ID as ID1) = ID1 ()
 in (SOME(ID))
end)
 in ( LrTable.NT 130, ( result, COLON1left, ID1right), rest671)
end
|  ( 395, ( ( _, ( MlyValue.insts insts1, _, insts1right)) :: _ :: ( _
, ( MlyValue.inst inst1, inst1left, _)) :: rest671)) => let val  
result = MlyValue.insts (fn _ => let val  (inst as inst1) = inst1 ()
 val  (insts as insts1) = insts1 ()
 in (inst :: insts)
end)
 in ( LrTable.NT 131, ( result, inst1left, insts1right), rest671)
end
|  ( 396, ( ( _, ( MlyValue.inst inst1, inst1left, inst1right)) :: 
rest671)) => let val  result = MlyValue.insts (fn _ => let val  (inst
 as inst1) = inst1 ()
 in ([inst])
end)
 in ( LrTable.NT 131, ( result, inst1left, inst1right), rest671)
end
|  ( 397, ( ( _, ( MlyValue.templates_comma_list templates_comma_list1
, _, templates_comma_list1right)) :: _ :: ( _, ( MlyValue.templates 
templates1, templates1left, _)) :: rest671)) => let val  result = 
MlyValue.templates_comma_list (fn _ => let val  (templates as 
templates1) = templates1 ()
 val  (templates_comma_list as templates_comma_list1) = 
templates_comma_list1 ()
 in (templates :: templates_comma_list)
end)
 in ( LrTable.NT 132, ( result, templates1left, 
templates_comma_list1right), rest671)
end
|  ( 398, ( ( _, ( MlyValue.templates templates1, templates1left, 
templates1right)) :: rest671)) => let val  result = 
MlyValue.templates_comma_list (fn _ => let val  (templates as 
templates1) = templates1 ()
 in ([templates])
end)
 in ( LrTable.NT 132, ( result, templates1left, templates1right), 
rest671)
end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.interdec x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a ()
end
end
structure Tokens : ML_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.VOID,p1,p2))
fun SEMICOLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.VOID,p1,p2))
fun ID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.ID (fn () => i),p1,p2))
fun TYVAR (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.TYVAR (fn () => i),p1,p2))
fun INT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.INT (fn () => i),p1,p2))
fun INT0 (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.INT0 (fn () => i),p1,p2))
fun WORD (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.WORD (fn () => i),p1,p2))
fun REAL (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.REAL (fn () => i),p1,p2))
fun STRING (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.STRING (fn () => i),p1,p2))
fun CHAR (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.CHAR (fn () => i),p1,p2))
fun ABSTYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun AND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun ARROW (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun AS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun BAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun CASE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun DATATYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun DOTDOTDOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun ELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun END (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun EQUALOP (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun EQTYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun EXCEPTION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun DO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun DOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun DARROW (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun FN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun FUN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun FUNCTOR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun HANDLE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun HASH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun IF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun IN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun INCLUDE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun INFIX (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun INFIXR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun LAZY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun LET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun LOCAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun NONFIX (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun OF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun OP (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun OPEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun OVERLOAD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun RAISE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
fun REC (p1,p2) = Token.TOKEN (ParserData.LrTable.T 45,(
ParserData.MlyValue.VOID,p1,p2))
fun SHARING (p1,p2) = Token.TOKEN (ParserData.LrTable.T 46,(
ParserData.MlyValue.VOID,p1,p2))
fun SIG (p1,p2) = Token.TOKEN (ParserData.LrTable.T 47,(
ParserData.MlyValue.VOID,p1,p2))
fun SIGNATURE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 48,(
ParserData.MlyValue.VOID,p1,p2))
fun STRUCT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 49,(
ParserData.MlyValue.VOID,p1,p2))
fun STRUCTURE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 50,(
ParserData.MlyValue.VOID,p1,p2))
fun THEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 51,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 52,(
ParserData.MlyValue.VOID,p1,p2))
fun VAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 53,(
ParserData.MlyValue.VOID,p1,p2))
fun WHERE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 54,(
ParserData.MlyValue.VOID,p1,p2))
fun WHILE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 55,(
ParserData.MlyValue.VOID,p1,p2))
fun WILD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 56,(
ParserData.MlyValue.VOID,p1,p2))
fun WITH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 57,(
ParserData.MlyValue.VOID,p1,p2))
fun WITHTYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 58,(
ParserData.MlyValue.VOID,p1,p2))
fun ATOM (p1,p2) = Token.TOKEN (ParserData.LrTable.T 59,(
ParserData.MlyValue.VOID,p1,p2))
fun BOXED (p1,p2) = Token.TOKEN (ParserData.LrTable.T 60,(
ParserData.MlyValue.VOID,p1,p2))
fun CAST (p1,p2) = Token.TOKEN (ParserData.LrTable.T 61,(
ParserData.MlyValue.VOID,p1,p2))
fun CDECL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 62,(
ParserData.MlyValue.VOID,p1,p2))
fun DOUBLE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 63,(
ParserData.MlyValue.VOID,p1,p2))
fun EXPORT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 64,(
ParserData.MlyValue.VOID,p1,p2))
fun EXTERNAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 65,(
ParserData.MlyValue.VOID,p1,p2))
fun FFIAPPLY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 66,(
ParserData.MlyValue.VOID,p1,p2))
fun IMPORT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 67,(
ParserData.MlyValue.VOID,p1,p2))
fun SIZEOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 68,(
ParserData.MlyValue.VOID,p1,p2))
fun STDCALL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 69,(
ParserData.MlyValue.VOID,p1,p2))
fun USEOBJ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 70,(
ParserData.MlyValue.VOID,p1,p2))
fun ASTERISK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 71,(
ParserData.MlyValue.VOID,p1,p2))
fun COLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 72,(
ParserData.MlyValue.VOID,p1,p2))
fun COLONGT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 73,(
ParserData.MlyValue.VOID,p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 74,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 75,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACKET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 76,(
ParserData.MlyValue.VOID,p1,p2))
fun LPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 77,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 78,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACKET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 79,(
ParserData.MlyValue.VOID,p1,p2))
fun RPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 80,(
ParserData.MlyValue.VOID,p1,p2))
fun ORELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 81,(
ParserData.MlyValue.VOID,p1,p2))
fun ANDALSO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 82,(
ParserData.MlyValue.VOID,p1,p2))
fun FUNSIG (p1,p2) = Token.TOKEN (ParserData.LrTable.T 83,(
ParserData.MlyValue.VOID,p1,p2))
fun VECTORSTART (p1,p2) = Token.TOKEN (ParserData.LrTable.T 84,(
ParserData.MlyValue.VOID,p1,p2))
fun BEGINQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 85,(
ParserData.MlyValue.VOID,p1,p2))
fun ENDQ (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 86,(
ParserData.MlyValue.ENDQ (fn () => i),p1,p2))
fun OBJL (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 87,(
ParserData.MlyValue.OBJL (fn () => i),p1,p2))
fun AQID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 88,(
ParserData.MlyValue.AQID (fn () => i),p1,p2))
fun FORMATCOMMENTSTART (p1,p2) = Token.TOKEN (ParserData.LrTable.T 89
,(ParserData.MlyValue.VOID,p1,p2))
fun FORMATCOMMENTEND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 90,(
ParserData.MlyValue.VOID,p1,p2))
fun DITTOTAG (p1,p2) = Token.TOKEN (ParserData.LrTable.T 91,(
ParserData.MlyValue.VOID,p1,p2))
fun PREFIXTAG (p1,p2) = Token.TOKEN (ParserData.LrTable.T 92,(
ParserData.MlyValue.VOID,p1,p2))
fun FORMATTERTAG (p1,p2) = Token.TOKEN (ParserData.LrTable.T 93,(
ParserData.MlyValue.VOID,p1,p2))
fun FORMATPARAMSTAG (p1,p2) = Token.TOKEN (ParserData.LrTable.T 94,(
ParserData.MlyValue.VOID,p1,p2))
fun DESTINATIONTAG (p1,p2) = Token.TOKEN (ParserData.LrTable.T 95,(
ParserData.MlyValue.VOID,p1,p2))
fun HEADERTAG (p1,p2) = Token.TOKEN (ParserData.LrTable.T 96,(
ParserData.MlyValue.VOID,p1,p2))
fun FORMATTAG (p1,p2) = Token.TOKEN (ParserData.LrTable.T 97,(
ParserData.MlyValue.VOID,p1,p2))
fun LOCALFORMATTAG (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 98,(
ParserData.MlyValue.LOCALFORMATTAG (fn () => i),p1,p2))
fun NEWLINE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 99,(
ParserData.MlyValue.VOID,p1,p2))
fun STARTOFINDENT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 100,(
ParserData.MlyValue.STARTOFINDENT (fn () => i),p1,p2))
fun FORMATINDICATOR (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 101
,(ParserData.MlyValue.FORMATINDICATOR (fn () => i),p1,p2))
fun ASSOCINDICATOR (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 102,(
ParserData.MlyValue.ASSOCINDICATOR (fn () => i),p1,p2))
end
end
